/******************************************************************************
 * This file was generated by langium-cli 3.4.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/
import type { AstNode, Reference, ReferenceInfo, TypeMetaData } from 'langium';
import { AbstractAstReflection } from 'langium';
export declare const ArchiverseTerminals: {
    ID: RegExp;
    WS: RegExp;
    ML_COMMENT: RegExp;
    SL_COMMENT: RegExp;
    INT: RegExp;
    STRING: RegExp;
    FLOAT: RegExp;
    BOOLEAN: RegExp;
};
export type ArchiverseTerminalNames = keyof typeof ArchiverseTerminals;
export type ArchiverseKeywordNames = "#" | "(" | ")" | "*" | "+" | "," | "-" | "->" | "." | "0..*" | "0..1" | "0..n" | "1..*" | "1..1" | "1..n" | ":" | "=" | "A" | "API" | "AUTOMATED" | "Abstract" | "BATCH" | "Boolean" | "Byte" | "C" | "CHAR" | "CLNT" | "CMMI_CHECKLIST" | "CMMI_DOCUMENT" | "CMMI_ENGINEERING" | "CMMI_FULLY_IMPLEMENTED" | "CMMI_GENERIC" | "CMMI_INTERNAL" | "CMMI_LARGELY_IMPLEMENTED" | "CMMI_MODEL" | "CMMI_NOT_IMPLEMENTED" | "CMMI_PARTIALLY_IMPLEMENTED" | "CMMI_PROCESS_MANAGEMENT" | "CMMI_PROJECT_MANAGEMENT" | "CMMI_SCAMPI_A" | "CMMI_SCAMPI_B" | "CMMI_SCAMPI_C" | "CMMI_SPECIFIC" | "CMMI_SUPPORT" | "CMMI_TEMPLATE" | "CMMI_TOOL" | "CMMN_CASE" | "CMMN_DECISION" | "CMMN_FILE" | "CMMN_HUMAN" | "CMMN_MESSAGE" | "CMMN_ONE_ONE" | "CMMN_ONE_UNBOUNDED" | "CMMN_PROCESS" | "CMMN_SIGNAL" | "CMMN_TIMER" | "CMMN_USER" | "CMMN_ZERO_ONE" | "CMMN_ZERO_UNBOUNDED" | "CO" | "CRM" | "CURR" | "CUS" | "ChangeAuthority" | "DATS" | "DEC" | "DMN_ANY" | "DMN_COLLECT" | "DMN_FIRST" | "DMN_OUTPUT_ORDER" | "DMN_PRIORITY" | "DMN_RULE_ORDER" | "DMN_UNIQUE" | "Date" | "DateTime" | "Double" | "E" | "Exception" | "Executive" | "FI" | "FLTP" | "FPK" | "Final" | "G" | "GLS" | "Group" | "HR" | "INT1" | "INT2" | "INT4" | "INT8" | "INTEGRATION" | "ISV" | "Integer" | "L" | "Long" | "MM" | "Main" | "NUMC" | "Object" | "PLM" | "PM" | "PP" | "Parameter" | "Project" | "ProjectAssurance" | "ProjectBoard" | "ProjectManager" | "ProjectSupport" | "QM" | "QUAN" | "Regular" | "S" | "SAP_AMOUNT" | "SAP_BINARY" | "SAP_BOOLEAN" | "SAP_CURRENCY" | "SAP_DATE" | "SAP_DECIMAL" | "SAP_INTEGER" | "SAP_NUMC" | "SAP_QUANTITY" | "SAP_STRING" | "SAP_TIME" | "SAP_TIMESTAMP" | "SBVR_DERIVATION" | "SBVR_INDIVIDUAL_CONCEPT" | "SBVR_NECESSITY" | "SBVR_NOUN_CONCEPT" | "SBVR_OBLIGATION" | "SBVR_OPERATIONAL" | "SBVR_PERMISSION" | "SBVR_POSSIBILITY" | "SBVR_REFERENCE_SCHEME" | "SBVR_ROLE" | "SBVR_STRUCTURAL" | "SBVR_VERB_CONCEPT" | "SCM" | "SD" | "SLN" | "SRM" | "SYS" | "SeniorSupplier" | "SeniorUser" | "Setup" | "Singleton" | "Stage" | "String" | "TIMS" | "TOGAF_ACCESS" | "TOGAF_AGGREGATION" | "TOGAF_APPLICATION" | "TOGAF_ARCHITECTURE_CHANGE_MANAGEMENT" | "TOGAF_ARCHITECTURE_VISION" | "TOGAF_ASSIGNMENT" | "TOGAF_ASSOCIATION" | "TOGAF_BUSINESS" | "TOGAF_BUSINESS_ARCHITECTURE" | "TOGAF_COMPOSITION" | "TOGAF_CORPORATE" | "TOGAF_CRITICAL" | "TOGAF_DATA" | "TOGAF_HIGH" | "TOGAF_IMPLEMENTATION_GOVERNANCE" | "TOGAF_INFLUENCE" | "TOGAF_INFORMATION_SYSTEMS_ARCHITECTURE" | "TOGAF_INTEGRATION" | "TOGAF_LOW" | "TOGAF_MEDIUM" | "TOGAF_MIGRATION_PLANNING" | "TOGAF_OPERATIONS" | "TOGAF_OPPORTUNITIES_AND_SOLUTIONS" | "TOGAF_PRELIMINARY" | "TOGAF_PROGRAM" | "TOGAF_PROJECT" | "TOGAF_REALIZATION" | "TOGAF_REGULATOR" | "TOGAF_REQUIREMENTS_MANAGEMENT" | "TOGAF_SECURITY" | "TOGAF_SERVING" | "TOGAF_TECHNOLOGY" | "TOGAF_TECHNOLOGY_ARCHITECTURE" | "TOGAF_TRIGGERING" | "TOGAF_USER" | "Team" | "TeamManager" | "Time" | "Transaction" | "USER_INTERACTION" | "USR" | "VAR" | "VDML_CAPABILITY" | "VDML_INFORMATION" | "VDML_ORGANIZATION" | "VDML_PERSON" | "VDML_RESOURCE" | "VDML_SYSTEM" | "Void" | "W" | "ZeroMany" | "ZeroOne" | "[" | "]" | "abstract" | "acceptanceCriteria" | "acceptanceMethod" | "acceptanceResponsibilities" | "account-data" | "action" | "action-category" | "action-type" | "actions" | "activities" | "activity" | "activity-final" | "activity-node" | "activityAttributes" | "activityList" | "adm-phase" | "adm-step" | "aggregation" | "agreements" | "algorithm" | "allow-edit" | "api" | "applicability-rules" | "applicationCollaboration" | "applicationComponent" | "applicationFunction" | "applicationInteraction" | "applicationInterface" | "applicationService" | "appliesToProject" | "approvers" | "arc" | "architecture" | "architecture-building-block" | "architecture-principle" | "architecture-requirement" | "architecture-type" | "architecture-viewpoint" | "architecture-vision" | "arcs" | "area" | "area-path" | "array" | "artifact" | "artifacts" | "assessment" | "association" | "associations" | "assumptionLog" | "assumptions" | "asynchronous" | "attribute" | "attributes" | "auto-complete" | "auto-increment" | "backing-field" | "basisOfEstimates" | "bc-codeunit" | "bc-page" | "bc-table" | "benefitsManagementApproach" | "bidDocuments" | "blob" | "blocking" | "boolean" | "building-blocks" | "business-knowledge-model" | "business-network" | "business-object" | "business-outcome" | "business-rule" | "business-vocabulary" | "businessActor" | "businessCase" | "businessCollaboration" | "businessEvent" | "businessFunction" | "businessInteraction" | "businessInterface" | "businessObject" | "businessOptions" | "businessProcess" | "businessRole" | "businessService" | "capabilities" | "capability" | "capability-level" | "caption" | "card" | "cardinality" | "cascade" | "case" | "case-file" | "case-file-item" | "category" | "changeControlApproach" | "changeLog" | "changeManagementPlan" | "changeRequest" | "characteristic" | "characteristics" | "chart-part" | "charter" | "checkpointReport" | "children" | "class" | "classifier" | "closingProject" | "clustered" | "code" | "communicationManagementApproach" | "communicationNetwork" | "communicationsManagementPlan" | "communities" | "community" | "component" | "component-interface" | "components" | "composition" | "compositionDetails" | "concept" | "concepts" | "concern-statements" | "concerns" | "condition" | "configuration-deliverable" | "configurationItemRecord" | "configurationManagementPlan" | "constraint" | "constraints" | "containsBusinessCase" | "containsProjectPlan" | "contract" | "controllingStage" | "costBaseline" | "costEstimates" | "costManagementPlan" | "costs" | "courseOfAction" | "coverage" | "create" | "customer-content" | "customerQualityExpectations" | "dailyLog" | "data-classification" | "data-element" | "data-type" | "dataObject" | "date" | "datetime" | "decimal" | "decision" | "decision-table" | "default-value" | "definition" | "deliverable" | "delivered-value" | "delivers-value" | "delivery-class" | "dependencies" | "dependency" | "deployment-unit" | "derivation" | "description" | "destroy" | "developmentSkills" | "device" | "dictionary" | "directingProject" | "discretionary-items" | "document" | "domain" | "drd" | "driver" | "duration" | "durationEstimates" | "edge" | "edges" | "eef" | "effort" | "element" | "elements" | "end" | "end-to-end" | "end-user-identifiable-information" | "endProjectReport" | "endStageReport" | "engagementStrategy" | "entity" | "entry" | "entry-criteria" | "enum" | "error" | "event" | "event-listener" | "event-listeners" | "events" | "examples" | "exceptionPlan" | "exceptionReport" | "exclusions" | "exclusive" | "exit" | "exit-criteria" | "exitCriteria" | "expectedBenefits" | "expectedDisbenefits" | "extends" | "extension" | "fact" | "fact-type" | "fact-types" | "field" | "field-relation" | "field-relations" | "fields" | "final" | "finalReport" | "fitness" | "float" | "flow" | "flows" | "focus" | "for" | "fork" | "format" | "formula" | "formulation" | "framework" | "frequency" | "from" | "from-field" | "functions" | "gap" | "gateway" | "general-concept" | "generalization" | "generic-goals" | "global" | "goal" | "group" | "guard" | "guid" | "highLevelRequirements" | "highlightReport" | "hit-policy" | "id" | "if-part" | "image" | "impact" | "implementation" | "implementationEvent" | "implements" | "implications" | "in-community" | "inclusive" | "influence" | "inheritance" | "initial" | "initiatingProject" | "input" | "input-data" | "inputs" | "instance" | "int" | "integer" | "interest" | "interface" | "interfaces" | "intermediate" | "investmentAppraisal" | "invisible" | "issueLog" | "issueRegister" | "issueReport" | "join" | "key" | "key-metrics" | "key-stakeholders" | "keys" | "knowledge-source" | "knowledgeArea" | "label" | "layout" | "lead-assessor" | "length" | "lessonsLearnedRegister" | "lessonsLog" | "lessonsReport" | "level" | "lifecycleModel" | "lifeline" | "lifelines" | "links" | "list" | "list-part" | "local" | "majorRisks" | "makeOrBuyDecisions" | "managementPlan" | "managementProducts" | "managingProductDelivery" | "managingStageBoundary" | "mandatory" | "manual" | "manual-activation" | "map" | "mapping" | "maturity-level" | "meaning" | "merge" | "message" | "messages" | "method" | "methods" | "milestone" | "milestoneList" | "milestones" | "modality" | "model" | "module" | "multiplicity" | "name" | "namespace" | "navigate" | "new" | "no-edit" | "node" | "nodes" | "none" | "normal" | "not-null" | "nullable" | "object-type" | "object-types" | "objectives" | "on-part" | "opa" | "operation" | "operations" | "option" | "option-string" | "organization-identifiable-information" | "outcome" | "output" | "outputs" | "overallPurpose" | "owner" | "package" | "page-type" | "parallel" | "parameter" | "parameters" | "part" | "participant" | "participants" | "path" | "performanceMeasurementBaseline" | "phase-type" | "place" | "places" | "plan" | "plan-fragment" | "planType" | "planning-table" | "plateau" | "plays-roles" | "practice" | "practices" | "precision" | "predecessor" | "prefix" | "primary" | "primary-key" | "principle" | "principles" | "priority" | "private" | "probability" | "process" | "process-area" | "process-areas" | "process-component" | "process-model" | "process-variant" | "processGroup" | "processes" | "procurementManagementPlan" | "procurementStatementOfWork" | "product" | "productDescription" | "productStatusAccount" | "project" | "projectBrief" | "projectCalendar" | "projectCharter" | "projectCommunications" | "projectFundingRequirements" | "projectInitiationDocumentation" | "projectLevelQualityTolerances" | "projectManagementPlan" | "projectManager" | "projectPlan" | "projectProcess" | "projectProductDescription" | "projectSchedule" | "projectScheduleNetworkDiagram" | "projectScopeStatement" | "protected" | "provides" | "public" | "publisher" | "purpose" | "qualityControlMeasurements" | "qualityCriteria" | "qualityManagementApproach" | "qualityManagementPlan" | "qualityMetrics" | "qualityRegister" | "qualityReport" | "quantity" | "rating" | "ratings" | "rationale" | "readonly" | "real" | "reasons" | "recommendations" | "record" | "record-id" | "reference" | "references" | "relation" | "relations" | "relationship" | "relationships" | "repetition" | "reply" | "report" | "reportsTo" | "representation" | "represents" | "required" | "requirement" | "requirements" | "requirementsDocumentation" | "requirementsManagementPlan" | "requirementsTraceabilityMatrix" | "requires" | "resource" | "resourceAssignments" | "resourceBreakdownStructure" | "resourceCalendar" | "resourceManagementPlan" | "resourceRequirements" | "resources" | "response" | "responsibilities" | "responsibleForProducts" | "responsibleRoles" | "restricted" | "return-type" | "risk" | "riskManagementApproach" | "riskManagementPlan" | "riskRegister" | "riskReport" | "risks" | "role" | "role-center" | "roleType" | "roles" | "sap-business-object" | "sap-business-process" | "sap-message" | "sap-service" | "sap-table" | "scenario" | "scheduleBaseline" | "scheduleData" | "scheduleManagementPlan" | "scopeBaseline" | "scopeManagementPlan" | "scopeStatement" | "script" | "search-help" | "sentries" | "sentry" | "separator" | "service" | "simplicity" | "source" | "source-field" | "source-multiplicity" | "source-role" | "source-table" | "source-type" | "sourceSelectionCriteria" | "specific-goals" | "sponsor" | "stage" | "stagePlan" | "stages" | "stakeholder" | "stakeholderEngagementPlan" | "stakeholderRegister" | "stakeholders" | "start" | "startingUpProject" | "state" | "statement" | "states" | "static" | "status" | "step" | "step-number" | "step-type" | "steps" | "store" | "strengths" | "string" | "subpractices" | "successCriteria" | "synchronous" | "synonyms" | "system" | "system-metadata" | "system-part" | "systemSoftware" | "table" | "table-field" | "table-filter" | "table-no" | "table-type" | "tailoring" | "target" | "target-multiplicity" | "target-role" | "target-state" | "task" | "tasks" | "team-members" | "teamCharter" | "teamPlan" | "technical-name" | "technologyCollaboration" | "technologyEvent" | "technologyFunction" | "technologyInteraction" | "technologyInterface" | "technologyProcess" | "technologyService" | "template" | "temporary" | "testAndEvaluationDocuments" | "text" | "theme" | "threshold" | "time" | "time-criticality" | "timescale" | "to" | "to-be-classified" | "to-field" | "to-node" | "to-table" | "tokens" | "toolTechnique" | "toolsTechniques" | "trace" | "traces" | "transition" | "transitions" | "trigger" | "type" | "type-definition" | "uml-activity-diagram" | "uml-class-diagram" | "uml-component-diagram" | "uml-sequence-diagram" | "uml-state-diagram" | "unique" | "unit" | "uri" | "user" | "valuation" | "value" | "value-area" | "value-component" | "value-components" | "value-help" | "value-proposition" | "value-propositions" | "valueStream" | "values" | "var" | "variant" | "version" | "viewpoints" | "virtual" | "wbs" | "wbsDictionary" | "weaknesses" | "weight" | "with" | "work-product" | "work-products" | "workPackage" | "worksheet" | "xes-log" | "{" | "}" | "~";
export type ArchiverseTokenNames = ArchiverseTerminalNames | ArchiverseKeywordNames;
export type ArchimateElement = Archimate_Application_Collaboration | Archimate_Application_Component | Archimate_Application_Function | Archimate_Application_Interaction | Archimate_Application_Interface | Archimate_Application_Service | Archimate_Artifact | Archimate_Assessment | Archimate_Business_Actor | Archimate_Business_Collaboration | Archimate_Business_Event | Archimate_Business_Function | Archimate_Business_Interaction | Archimate_Business_Interface | Archimate_Business_Object | Archimate_Business_Process | Archimate_Business_Role | Archimate_Business_Service | Archimate_Capability | Archimate_CommunicationNetwork | Archimate_Constraint | Archimate_Contract | Archimate_CourseOfAction | Archimate_Data_Object | Archimate_Deliverable | Archimate_Device | Archimate_Driver | Archimate_Gap | Archimate_Goal | Archimate_ImplementationEvent | Archimate_Meaning | Archimate_Node | Archimate_Outcome | Archimate_Path | Archimate_Plateau | Archimate_Principle | Archimate_Product | Archimate_Representation | Archimate_Requirement | Archimate_Resource | Archimate_Stakeholder | Archimate_SystemSoftware | Archimate_Technology_Collaboration | Archimate_Technology_Event | Archimate_Technology_Function | Archimate_Technology_Interaction | Archimate_Technology_Interface | Archimate_Technology_Process | Archimate_Technology_Service | Archimate_Value | Archimate_ValueStream | Archimate_WorkPackage;
export declare const ArchimateElement = "ArchimateElement";
export declare function isArchimateElement(item: unknown): item is ArchimateElement;
export type ArchimateRelationship = AccessRelationship | AggregationRelationship | AssignmentRelationship | AssociationRelationship | CompositionRelationship | FlowRelationship | InfluenceRelationship | RealizationRelationship | ServingRelationship | SpecializationRelationship | TriggeringRelationship;
export declare const ArchimateRelationship = "ArchimateRelationship";
export declare function isArchimateRelationship(item: unknown): item is ArchimateRelationship;
export type BPC_BusinessProcessItem = BPC_ConfigurationDeliverable | BPC_EndToEndProcess | BPC_Process | BPC_ProcessArea | BPC_Scenario;
export declare const BPC_BusinessProcessItem = "BPC_BusinessProcessItem";
export declare function isBPC_BusinessProcessItem(item: unknown): item is BPC_BusinessProcessItem;
export type BPMN_Element = BPMN_Flow_Node;
export declare const BPMN_Element = "BPMN_Element";
export declare function isBPMN_Element(item: unknown): item is BPMN_Element;
export type BPMN_Flow_Node = BPMN_Event | BPMN_Gateway | BPMN_Task;
export declare const BPMN_Flow_Node = "BPMN_Flow_Node";
export declare function isBPMN_Flow_Node(item: unknown): item is BPMN_Flow_Node;
export type CMMI_Category = 'CMMI_ENGINEERING' | 'CMMI_PROCESS_MANAGEMENT' | 'CMMI_PROJECT_MANAGEMENT' | 'CMMI_SUPPORT';
export declare function isCMMI_Category(item: unknown): item is CMMI_Category;
export type CMMI_Element = CMMI_Artifact | CMMI_Assessment | CMMI_CapabilityLevel | CMMI_Goal | CMMI_MaturityLevel | CMMI_Practice | CMMI_Process | CMMI_ProcessArea;
export declare const CMMI_Element = "CMMI_Element";
export declare function isCMMI_Element(item: unknown): item is CMMI_Element;
export type CMMIArtifactType = 'CMMI_CHECKLIST' | 'CMMI_DOCUMENT' | 'CMMI_MODEL' | 'CMMI_TEMPLATE' | 'CMMI_TOOL';
export declare function isCMMIArtifactType(item: unknown): item is CMMIArtifactType;
export type CMMIAssessmentType = 'CMMI_INTERNAL' | 'CMMI_SCAMPI_A' | 'CMMI_SCAMPI_B' | 'CMMI_SCAMPI_C';
export declare function isCMMIAssessmentType(item: unknown): item is CMMIAssessmentType;
export type CMMIGoalType = 'CMMI_GENERIC' | 'CMMI_SPECIFIC';
export declare function isCMMIGoalType(item: unknown): item is CMMIGoalType;
export type CMMIMaturityLevel = 'CMMI_DEFINED' | 'CMMI_INITIAL' | 'CMMI_MANAGED' | 'CMMI_OPTIMIZING' | 'CMMI_QUANTITATIVELY_MANAGED';
export declare function isCMMIMaturityLevel(item: unknown): item is CMMIMaturityLevel;
export type CMMIPracticeType = 'CMMI_GENERIC' | 'CMMI_SPECIFIC';
export declare function isCMMIPracticeType(item: unknown): item is CMMIPracticeType;
export type CMMIRatingValue = 'CMMI_FULLY_IMPLEMENTED' | 'CMMI_LARGELY_IMPLEMENTED' | 'CMMI_NOT_IMPLEMENTED' | 'CMMI_PARTIALLY_IMPLEMENTED';
export declare function isCMMIRatingValue(item: unknown): item is CMMIRatingValue;
export type CMMN_Element = CMMN_Case | CMMN_CaseFileItem | CMMN_EventListener | CMMN_Milestone | CMMN_PlanFragment | CMMN_Sentry | CMMN_Stage | CMMN_Task;
export declare const CMMN_Element = "CMMN_Element";
export declare function isCMMN_Element(item: unknown): item is CMMN_Element;
export type CMMN_EventType = 'CMMN_FILE' | 'CMMN_MESSAGE' | 'CMMN_SIGNAL' | 'CMMN_TIMER' | 'CMMN_USER';
export declare function isCMMN_EventType(item: unknown): item is CMMN_EventType;
export type CMMN_Multiplicity = 'CMMN_ONE_ONE' | 'CMMN_ONE_UNBOUNDED' | 'CMMN_ZERO_ONE' | 'CMMN_ZERO_UNBOUNDED';
export declare function isCMMN_Multiplicity(item: unknown): item is CMMN_Multiplicity;
export type CMMN_TaskType = 'CMMN_CASE' | 'CMMN_DECISION' | 'CMMN_HUMAN' | 'CMMN_PROCESS';
export declare function isCMMN_TaskType(item: unknown): item is CMMN_TaskType;
export type D365BC_ActionCategory = 'navigate' | 'new' | 'process' | 'report';
export declare function isD365BC_ActionCategory(item: unknown): item is D365BC_ActionCategory;
export type D365BC_ActionType = 'action' | 'group' | 'separator';
export declare function isD365BC_ActionType(item: unknown): item is D365BC_ActionType;
export type D365BC_DataClassification = 'account-data' | 'customer-content' | 'end-user-identifiable-information' | 'organization-identifiable-information' | 'system-metadata' | 'to-be-classified';
export declare function isD365BC_DataClassification(item: unknown): item is D365BC_DataClassification;
export type D365BC_DataType = 'array' | 'boolean' | 'code' | 'date' | 'datetime' | 'decimal' | 'dictionary' | 'enum' | 'integer' | 'interface' | 'record' | 'text' | 'time' | 'variant';
export declare function isD365BC_DataType(item: unknown): item is D365BC_DataType;
export type D365BC_Element = D365BC_Codeunit | D365BC_Page | D365BC_Table;
export declare const D365BC_Element = "D365BC_Element";
export declare function isD365BC_Element(item: unknown): item is D365BC_Element;
export type D365BC_FieldType = 'blob' | 'boolean' | 'code' | 'date' | 'datetime' | 'decimal' | 'guid' | 'integer' | 'option' | 'record-id' | 'table-filter' | 'text' | 'time';
export declare function isD365BC_FieldType(item: unknown): item is D365BC_FieldType;
export type D365BC_PageElementType = 'area' | 'chart-part' | 'field' | 'group' | 'part' | 'system-part';
export declare function isD365BC_PageElementType(item: unknown): item is D365BC_PageElementType;
export type D365BC_PageType = 'api' | 'card' | 'document' | 'list' | 'list-part' | 'role-center' | 'worksheet';
export declare function isD365BC_PageType(item: unknown): item is D365BC_PageType;
export type D365BC_TableType = 'normal' | 'temporary' | 'virtual';
export declare function isD365BC_TableType(item: unknown): item is D365BC_TableType;
export type D365FO_BusinessLogic = D365FO_Class | D365FO_Method;
export declare const D365FO_BusinessLogic = "D365FO_BusinessLogic";
export declare function isD365FO_BusinessLogic(item: unknown): item is D365FO_BusinessLogic;
export type D365FO_ClassType = 'Abstract' | 'Final' | 'Regular' | 'Singleton';
export declare function isD365FO_ClassType(item: unknown): item is D365FO_ClassType;
export type D365FO_DataModel = D365FO_Enum | D365FO_Table;
export declare const D365FO_DataModel = "D365FO_DataModel";
export declare function isD365FO_DataModel(item: unknown): item is D365FO_DataModel;
export type D365FO_DataType = 'boolean' | 'datetime' | 'guid' | 'int' | 'real' | 'string';
export declare function isD365FO_DataType(item: unknown): item is D365FO_DataType;
export type D365FO_DeleteAction = 'cascade' | 'none' | 'restricted';
export declare function isD365FO_DeleteAction(item: unknown): item is D365FO_DeleteAction;
export type D365FO_Integration = D365FO_DataEntity;
export declare const D365FO_Integration = "D365FO_Integration";
export declare function isD365FO_Integration(item: unknown): item is D365FO_Integration;
export type D365FO_MethodScopeType = 'instance' | 'static';
export declare function isD365FO_MethodScopeType(item: unknown): item is D365FO_MethodScopeType;
export type D365FO_MethodVisibility = 'private' | 'protected' | 'public';
export declare function isD365FO_MethodVisibility(item: unknown): item is D365FO_MethodVisibility;
export type D365FO_ModelLayer = 'CUS' | 'FPK' | 'GLS' | 'ISV' | 'SLN' | 'SYS' | 'USR' | 'VAR';
export declare function isD365FO_ModelLayer(item: unknown): item is D365FO_ModelLayer;
export type D365FO_ModelStoreElement = D365FO_AOTPackage | D365FO_BusinessLogic | D365FO_DataModel | D365FO_Integration;
export declare const D365FO_ModelStoreElement = "D365FO_ModelStoreElement";
export declare function isD365FO_ModelStoreElement(item: unknown): item is D365FO_ModelStoreElement;
export type D365FO_RelationCardinality = 'ZeroMany' | 'ZeroOne';
export declare function isD365FO_RelationCardinality(item: unknown): item is D365FO_RelationCardinality;
export type D365FO_TableGroup = 'Group' | 'Main' | 'Parameter' | 'Setup' | 'Transaction';
export declare function isD365FO_TableGroup(item: unknown): item is D365FO_TableGroup;
export type DMN_Element = DMN_BusinessKnowledgeModel | DMN_Decision | DMN_DecisionRequirementsDiagram | DMN_DecisionTable | DMN_Expression | DMN_InformationRequirement | DMN_InputData | DMN_KnowledgeSource;
export declare const DMN_Element = "DMN_Element";
export declare function isDMN_Element(item: unknown): item is DMN_Element;
export type DMN_ExpressionLanguage = 'DMN_FEEL' | 'DMN_JAVA' | 'DMN_JAVASCRIPT' | 'DMN_PMML';
export declare function isDMN_ExpressionLanguage(item: unknown): item is DMN_ExpressionLanguage;
export type DMN_HitPolicy = 'DMN_ANY' | 'DMN_COLLECT' | 'DMN_FIRST' | 'DMN_OUTPUT_ORDER' | 'DMN_PRIORITY' | 'DMN_RULE_ORDER' | 'DMN_UNIQUE';
export declare function isDMN_HitPolicy(item: unknown): item is DMN_HitPolicy;
export type ModelElement = Archimate_Application_Collaboration | Archimate_Application_Component | Archimate_Application_Function | Archimate_Application_Interaction | Archimate_Application_Interface | Archimate_Application_Service | Archimate_Artifact | Archimate_Assessment | Archimate_Business_Actor | Archimate_Business_Collaboration | Archimate_Business_Event | Archimate_Business_Function | Archimate_Business_Interaction | Archimate_Business_Interface | Archimate_Business_Object | Archimate_Business_Process | Archimate_Business_Role | Archimate_Business_Service | Archimate_Capability | Archimate_CommunicationNetwork | Archimate_Constraint | Archimate_Contract | Archimate_CourseOfAction | Archimate_Data_Object | Archimate_Deliverable | Archimate_Device | Archimate_Driver | Archimate_Gap | Archimate_Goal | Archimate_ImplementationEvent | Archimate_Meaning | Archimate_Node | Archimate_Outcome | Archimate_Path | Archimate_Plateau | Archimate_Principle | Archimate_Product | Archimate_Representation | Archimate_Requirement | Archimate_Resource | Archimate_Stakeholder | Archimate_SystemSoftware | Archimate_Technology_Collaboration | Archimate_Technology_Event | Archimate_Technology_Function | Archimate_Technology_Interaction | Archimate_Technology_Interface | Archimate_Technology_Process | Archimate_Technology_Service | Archimate_Value | Archimate_ValueStream | Archimate_WorkPackage | BPC_BusinessProcessCatalog | BPC_BusinessProcessItem | BPC_Process | BPMN_Element | BusinessProcessCatalogImplementation | BusinessProcessImplementation | CMMI_Artifact | CMMI_Assessment | CMMI_CapabilityLevel | CMMI_Goal | CMMI_MaturityLevel | CMMI_Practice | CMMI_Process | CMMI_ProcessArea | CMMI_WorkProduct | CMMN_Case | CMMN_CaseFileItem | CMMN_EventListener | CMMN_Milestone | CMMN_PlanFragment | CMMN_Sentry | CMMN_Stage | CMMN_Task | D365BC_Codeunit | D365BC_Page | D365BC_Table | D365FO_AOTPackage | D365FO_ModelStore | DMN_BusinessKnowledgeModel | DMN_Decision | DMN_DecisionRequirementsDiagram | DMN_DecisionTable | DMN_InputData | DMN_KnowledgeSource | PMBOK_ActivityAttributes | PMBOK_ActivityList | PMBOK_Agreements | PMBOK_AssumptionLog | PMBOK_BasisOfEstimates | PMBOK_BidDocuments | PMBOK_ChangeLog | PMBOK_ChangeManagementPlan | PMBOK_ChangeRequest | PMBOK_CommunicationsManagementPlan | PMBOK_ConfigurationManagementPlan | PMBOK_CostBaseline | PMBOK_CostEstimates | PMBOK_CostManagementPlan | PMBOK_Deliverable | PMBOK_DurationEstimates | PMBOK_EnterpriseEnvironmentalFactors | PMBOK_FinalReport | PMBOK_Input | PMBOK_IssueLog | PMBOK_KnowledgeArea | PMBOK_LessonsLearnedRegister | PMBOK_MakeOrBuyDecisions | PMBOK_MilestoneList | PMBOK_OrganizationalProcessAssets | PMBOK_Output | PMBOK_PerformanceMeasurementBaseline | PMBOK_ProcessGroup | PMBOK_ProcurementManagementPlan | PMBOK_ProcurementStatementOfWork | PMBOK_Project | PMBOK_ProjectCalendar | PMBOK_ProjectCharter | PMBOK_ProjectCommunications | PMBOK_ProjectFundingRequirements | PMBOK_ProjectManagementPlan | PMBOK_ProjectProcess | PMBOK_ProjectSchedule | PMBOK_ProjectScheduleNetworkDiagram | PMBOK_ProjectScopeStatement | PMBOK_QualityControlMeasurements | PMBOK_QualityManagementPlan | PMBOK_QualityMetrics | PMBOK_QualityReport | PMBOK_RequirementsDocumentation | PMBOK_RequirementsManagementPlan | PMBOK_RequirementsTraceabilityMatrix | PMBOK_ResourceAssignments | PMBOK_ResourceBreakdownStructure | PMBOK_ResourceCalendar | PMBOK_ResourceManagementPlan | PMBOK_ResourceRequirements | PMBOK_RiskManagementPlan | PMBOK_RiskRegister | PMBOK_RiskReport | PMBOK_ScheduleBaseline | PMBOK_ScheduleData | PMBOK_ScheduleManagementPlan | PMBOK_ScopeBaseline | PMBOK_ScopeManagementPlan | PMBOK_SourceSelectionCriteria | PMBOK_StakeholderEngagementPlan | PMBOK_StakeholderRegister | PMBOK_TeamCharter | PMBOK_TestAndEvaluationDocuments | PMBOK_ToolTechnique | PMBOK_WBS | PMBOK_WBS_Dictionary | PRINCE2_Activity | PRINCE2_AnyProcess | PRINCE2_BenefitsManagementApproach | PRINCE2_BusinessCase | PRINCE2_ChangeControlApproach | PRINCE2_CheckpointReport | PRINCE2_CommunicationManagementApproach | PRINCE2_ConfigurationItemRecord | PRINCE2_DailyLog | PRINCE2_EndProjectReport | PRINCE2_EndStageReport | PRINCE2_ExceptionPlan | PRINCE2_ExceptionReport | PRINCE2_HighlightReport | PRINCE2_IssueRegister | PRINCE2_IssueReport | PRINCE2_LessonsLog | PRINCE2_LessonsReport | PRINCE2_PID | PRINCE2_Plan | PRINCE2_Principle | PRINCE2_ProductDescription | PRINCE2_ProductStatusAccount | PRINCE2_ProjectBrief | PRINCE2_ProjectPlan | PRINCE2_ProjectProductDescription | PRINCE2_QualityManagementApproach | PRINCE2_QualityRegister | PRINCE2_RiskManagementApproach | PRINCE2_RiskRegister | PRINCE2_RiskReport | PRINCE2_Role | PRINCE2_StagePlan | PRINCE2_Tailoring | PRINCE2_TeamPlan | PRINCE2_Theme | PRINCE2_WorkPackage | SAP_BusinessObject | SAP_BusinessProcess | SAP_Message | SAP_Service | SAP_Table | SBVR_BusinessRule | SBVR_BusinessVocabulary | SBVR_Concept | SBVR_FactType | SBVR_ObjectType | TOGAF_ADMPhase | TOGAF_Architecture | TOGAF_ArchitectureBuilding | TOGAF_ArchitecturePrinciple | TOGAF_ArchitectureRequirement | TOGAF_ArchitectureViewpoint | TOGAF_ArchitectureVision | TOGAF_Stakeholder | UMLActivityDiagram | UMLClassDiagram | UMLComponentDiagram | UMLSequenceDiagram | UMLStateDiagram | VDML_Activity | VDML_BusinessNetwork | VDML_Capability | VDML_Community | VDML_Participant | VDML_Role | VDML_Store | VDML_ValueProposition | XES_Log | XES_ProcessModel | XES_ProcessVariant;
export declare const ModelElement = "ModelElement";
export declare function isModelElement(item: unknown): item is ModelElement;
export type PMBOK_ITTO_Element = PMBOK_ActivityAttributes | PMBOK_ActivityList | PMBOK_Agreements | PMBOK_AssumptionLog | PMBOK_BasisOfEstimates | PMBOK_BidDocuments | PMBOK_ChangeLog | PMBOK_ChangeManagementPlan | PMBOK_ChangeRequest | PMBOK_CommunicationsManagementPlan | PMBOK_ConfigurationManagementPlan | PMBOK_CostBaseline | PMBOK_CostEstimates | PMBOK_CostManagementPlan | PMBOK_Deliverable | PMBOK_DurationEstimates | PMBOK_EnterpriseEnvironmentalFactors | PMBOK_FinalReport | PMBOK_Input | PMBOK_IssueLog | PMBOK_LessonsLearnedRegister | PMBOK_MakeOrBuyDecisions | PMBOK_MilestoneList | PMBOK_OrganizationalProcessAssets | PMBOK_Output | PMBOK_PerformanceMeasurementBaseline | PMBOK_ProcurementManagementPlan | PMBOK_ProcurementStatementOfWork | PMBOK_ProjectCalendar | PMBOK_ProjectCharter | PMBOK_ProjectCommunications | PMBOK_ProjectFundingRequirements | PMBOK_ProjectManagementPlan | PMBOK_ProjectSchedule | PMBOK_ProjectScheduleNetworkDiagram | PMBOK_ProjectScopeStatement | PMBOK_QualityControlMeasurements | PMBOK_QualityManagementPlan | PMBOK_QualityMetrics | PMBOK_QualityReport | PMBOK_RequirementsDocumentation | PMBOK_RequirementsManagementPlan | PMBOK_RequirementsTraceabilityMatrix | PMBOK_ResourceAssignments | PMBOK_ResourceBreakdownStructure | PMBOK_ResourceCalendar | PMBOK_ResourceManagementPlan | PMBOK_ResourceRequirements | PMBOK_RiskManagementPlan | PMBOK_RiskRegister | PMBOK_RiskReport | PMBOK_ScheduleBaseline | PMBOK_ScheduleData | PMBOK_ScheduleManagementPlan | PMBOK_ScopeBaseline | PMBOK_ScopeManagementPlan | PMBOK_SourceSelectionCriteria | PMBOK_StakeholderEngagementPlan | PMBOK_StakeholderRegister | PMBOK_TeamCharter | PMBOK_TestAndEvaluationDocuments | PMBOK_ToolTechnique | PMBOK_WBS | PMBOK_WBS_Dictionary;
export declare const PMBOK_ITTO_Element = "PMBOK_ITTO_Element";
export declare function isPMBOK_ITTO_Element(item: unknown): item is PMBOK_ITTO_Element;
export type PRINCE2_AnyManagementProduct = PRINCE2_BenefitsManagementApproach | PRINCE2_BusinessCase | PRINCE2_ChangeControlApproach | PRINCE2_CheckpointReport | PRINCE2_CommunicationManagementApproach | PRINCE2_ConfigurationItemRecord | PRINCE2_DailyLog | PRINCE2_EndProjectReport | PRINCE2_EndStageReport | PRINCE2_ExceptionPlan | PRINCE2_ExceptionReport | PRINCE2_HighlightReport | PRINCE2_IssueRegister | PRINCE2_IssueReport | PRINCE2_LessonsLog | PRINCE2_LessonsReport | PRINCE2_PID | PRINCE2_Plan | PRINCE2_ProductDescription | PRINCE2_ProductStatusAccount | PRINCE2_ProjectBrief | PRINCE2_ProjectPlan | PRINCE2_ProjectProductDescription | PRINCE2_QualityManagementApproach | PRINCE2_QualityRegister | PRINCE2_RiskManagementApproach | PRINCE2_RiskRegister | PRINCE2_RiskReport | PRINCE2_StagePlan | PRINCE2_TeamPlan | PRINCE2_WorkPackage;
export declare const PRINCE2_AnyManagementProduct = "PRINCE2_AnyManagementProduct";
export declare function isPRINCE2_AnyManagementProduct(item: unknown): item is PRINCE2_AnyManagementProduct;
export type PRINCE2_AnyProcess = PRINCE2_ClosingProject | PRINCE2_ControllingStage | PRINCE2_Directing | PRINCE2_Initiating | PRINCE2_ManagingProductDelivery | PRINCE2_ManagingStageBoundary | PRINCE2_StartingUp;
export declare const PRINCE2_AnyProcess = "PRINCE2_AnyProcess";
export declare function isPRINCE2_AnyProcess(item: unknown): item is PRINCE2_AnyProcess;
export type PRINCE2_Referenceable = PRINCE2_Activity | PRINCE2_AnyManagementProduct | PRINCE2_AnyProcess | PRINCE2_Principle | PRINCE2_Role | PRINCE2_Tailoring | PRINCE2_Theme;
export declare const PRINCE2_Referenceable = "PRINCE2_Referenceable";
export declare function isPRINCE2_Referenceable(item: unknown): item is PRINCE2_Referenceable;
export type QualifiedName = string;
export declare function isQualifiedName(item: unknown): item is QualifiedName;
export type SAP_Cardinality = '0..1' | '0..n' | '1..1' | '1..n';
export declare function isSAP_Cardinality(item: unknown): item is SAP_Cardinality;
export type SAP_DataType = 'CHAR' | 'CLNT' | 'CURR' | 'DATS' | 'DEC' | 'FLTP' | 'INT1' | 'INT2' | 'INT4' | 'INT8' | 'NUMC' | 'QUAN' | 'TIMS';
export declare function isSAP_DataType(item: unknown): item is SAP_DataType;
export type SAP_DeliveryClass = 'A' | 'C' | 'E' | 'G' | 'L' | 'S' | 'W';
export declare function isSAP_DeliveryClass(item: unknown): item is SAP_DeliveryClass;
export type SAP_Element = SAP_BusinessObject | SAP_BusinessProcess | SAP_Message | SAP_Service | SAP_Table | SAP_ValueHelp;
export declare const SAP_Element = "SAP_Element";
export declare function isSAP_Element(item: unknown): item is SAP_Element;
export type SAP_FieldType = 'SAP_AMOUNT' | 'SAP_BINARY' | 'SAP_BOOLEAN' | 'SAP_CURRENCY' | 'SAP_DATE' | 'SAP_DECIMAL' | 'SAP_INTEGER' | 'SAP_NUMC' | 'SAP_QUANTITY' | 'SAP_STRING' | 'SAP_TIME' | 'SAP_TIMESTAMP';
export declare function isSAP_FieldType(item: unknown): item is SAP_FieldType;
export type SAP_Module = 'CO' | 'CRM' | 'FI' | 'HR' | 'MM' | 'PLM' | 'PM' | 'PP' | 'QM' | 'SCM' | 'SD' | 'SRM';
export declare function isSAP_Module(item: unknown): item is SAP_Module;
export type SAP_StepType = 'API' | 'AUTOMATED' | 'BATCH' | 'INTEGRATION' | 'USER_INTERACTION';
export declare function isSAP_StepType(item: unknown): item is SAP_StepType;
export type SAP_ValueHelpSourceType = 'CDS_VIEW' | 'CUSTOM_LOGIC' | 'FIXED_VALUES' | 'TABLE';
export declare function isSAP_ValueHelpSourceType(item: unknown): item is SAP_ValueHelpSourceType;
export type SBVR_ConceptType = 'SBVR_INDIVIDUAL_CONCEPT' | 'SBVR_NOUN_CONCEPT' | 'SBVR_REFERENCE_SCHEME' | 'SBVR_ROLE' | 'SBVR_VERB_CONCEPT';
export declare function isSBVR_ConceptType(item: unknown): item is SBVR_ConceptType;
export type SBVR_Element = SBVR_BusinessRule | SBVR_BusinessVocabulary | SBVR_Concept | SBVR_FactType | SBVR_ObjectType;
export declare const SBVR_Element = "SBVR_Element";
export declare function isSBVR_Element(item: unknown): item is SBVR_Element;
export type SBVR_Modality = 'SBVR_NECESSITY' | 'SBVR_OBLIGATION' | 'SBVR_PERMISSION' | 'SBVR_POSSIBILITY';
export declare function isSBVR_Modality(item: unknown): item is SBVR_Modality;
export type SBVR_RuleType = 'SBVR_DERIVATION' | 'SBVR_OPERATIONAL' | 'SBVR_STRUCTURAL';
export declare function isSBVR_RuleType(item: unknown): item is SBVR_RuleType;
export type TOGAF_ADMPhaseType = 'TOGAF_ARCHITECTURE_CHANGE_MANAGEMENT' | 'TOGAF_ARCHITECTURE_VISION' | 'TOGAF_BUSINESS_ARCHITECTURE' | 'TOGAF_IMPLEMENTATION_GOVERNANCE' | 'TOGAF_INFORMATION_SYSTEMS_ARCHITECTURE' | 'TOGAF_MIGRATION_PLANNING' | 'TOGAF_OPPORTUNITIES_AND_SOLUTIONS' | 'TOGAF_PRELIMINARY' | 'TOGAF_REQUIREMENTS_MANAGEMENT' | 'TOGAF_TECHNOLOGY_ARCHITECTURE';
export declare function isTOGAF_ADMPhaseType(item: unknown): item is TOGAF_ADMPhaseType;
export type TOGAF_ArchitectureType = 'TOGAF_APPLICATION' | 'TOGAF_BUSINESS' | 'TOGAF_DATA' | 'TOGAF_INTEGRATION' | 'TOGAF_SECURITY' | 'TOGAF_TECHNOLOGY';
export declare function isTOGAF_ArchitectureType(item: unknown): item is TOGAF_ArchitectureType;
export type TOGAF_BuildingBlockType = 'TOGAF_APPLICATION' | 'TOGAF_BUSINESS' | 'TOGAF_DATA' | 'TOGAF_TECHNOLOGY';
export declare function isTOGAF_BuildingBlockType(item: unknown): item is TOGAF_BuildingBlockType;
export type TOGAF_Element = TOGAF_ADMPhase | TOGAF_Architecture | TOGAF_ArchitectureBuilding | TOGAF_ArchitectureGap | TOGAF_ArchitecturePrinciple | TOGAF_ArchitectureRequirement | TOGAF_ArchitectureViewpoint | TOGAF_ArchitectureVision | TOGAF_Implementation | TOGAF_Stakeholder | TOGAF_WorkPackage;
export declare const TOGAF_Element = "TOGAF_Element";
export declare function isTOGAF_Element(item: unknown): item is TOGAF_Element;
export type TOGAF_GapType = 'TOGAF_APPLICATION' | 'TOGAF_BUSINESS' | 'TOGAF_DATA' | 'TOGAF_TECHNOLOGY';
export declare function isTOGAF_GapType(item: unknown): item is TOGAF_GapType;
export type TOGAF_PriorityLevel = 'TOGAF_CRITICAL' | 'TOGAF_HIGH' | 'TOGAF_LOW' | 'TOGAF_MEDIUM';
export declare function isTOGAF_PriorityLevel(item: unknown): item is TOGAF_PriorityLevel;
export type TOGAF_RelationshipType = 'TOGAF_ACCESS' | 'TOGAF_AGGREGATION' | 'TOGAF_ASSIGNMENT' | 'TOGAF_ASSOCIATION' | 'TOGAF_COMPOSITION' | 'TOGAF_INFLUENCE' | 'TOGAF_REALIZATION' | 'TOGAF_SERVING' | 'TOGAF_TRIGGERING';
export declare function isTOGAF_RelationshipType(item: unknown): item is TOGAF_RelationshipType;
export type TOGAF_StakeholderClass = 'TOGAF_CORPORATE' | 'TOGAF_OPERATIONS' | 'TOGAF_PROGRAM' | 'TOGAF_PROJECT' | 'TOGAF_REGULATOR' | 'TOGAF_USER';
export declare function isTOGAF_StakeholderClass(item: unknown): item is TOGAF_StakeholderClass;
export type UMLActivityNodeType = 'action' | 'activity-final' | 'decision' | 'final' | 'fork' | 'initial' | 'join' | 'merge';
export declare function isUMLActivityNodeType(item: unknown): item is UMLActivityNodeType;
export type UMLAttributeType = 'Boolean' | 'Byte' | 'Date' | 'DateTime' | 'Double' | 'Integer' | 'Long' | 'Object' | 'String' | 'Time' | 'Void';
export declare function isUMLAttributeType(item: unknown): item is UMLAttributeType;
export type UMLElement = UMLActivityDiagram | UMLClassDiagram | UMLComponentDiagram | UMLSequenceDiagram | UMLStateDiagram;
export declare const UMLElement = "UMLElement";
export declare function isUMLElement(item: unknown): item is UMLElement;
export type UMLMessageType = 'asynchronous' | 'create' | 'destroy' | 'reply' | 'synchronous';
export declare function isUMLMessageType(item: unknown): item is UMLMessageType;
export type UMLMultiplicity = '*' | '0..*' | '0..1' | '1..*' | '1..1';
export declare function isUMLMultiplicity(item: unknown): item is UMLMultiplicity;
export type UMLRelationshipType = 'aggregation' | 'association' | 'composition' | 'dependency' | 'implementation' | 'inheritance';
export declare function isUMLRelationshipType(item: unknown): item is UMLRelationshipType;
export type UMLVisibility = '#' | '+' | '-' | '~';
export declare function isUMLVisibility(item: unknown): item is UMLVisibility;
export type VDML_Element = VDML_Activity | VDML_BusinessNetwork | VDML_Capability | VDML_Collaboration | VDML_Role | VDML_Store | VDML_ValueProposition;
export declare const VDML_Element = "VDML_Element";
export declare function isVDML_Element(item: unknown): item is VDML_Element;
export type VDML_ParticipantType = 'VDML_ORGANIZATION' | 'VDML_PERSON' | 'VDML_SYSTEM';
export declare function isVDML_ParticipantType(item: unknown): item is VDML_ParticipantType;
export type VDML_StoreType = 'VDML_CAPABILITY' | 'VDML_INFORMATION' | 'VDML_RESOURCE';
export declare function isVDML_StoreType(item: unknown): item is VDML_StoreType;
export type XES_Attribute = XES_BooleanAttribute | XES_DateAttribute | XES_FloatAttribute | XES_IDAttribute | XES_IntAttribute | XES_StringAttribute;
export declare const XES_Attribute = "XES_Attribute";
export declare function isXES_Attribute(item: unknown): item is XES_Attribute;
export type XES_ConceptAttributes = 'concept:instance' | 'concept:name';
export declare function isXES_ConceptAttributes(item: unknown): item is XES_ConceptAttributes;
export type XES_CostAttributes = 'cost:currency' | 'cost:driver' | 'cost:total';
export declare function isXES_CostAttributes(item: unknown): item is XES_CostAttributes;
export type XES_Element = XES_Log | XES_ProcessModel | XES_ProcessVariant;
export declare const XES_Element = "XES_Element";
export declare function isXES_Element(item: unknown): item is XES_Element;
export type XES_IdentityAttributes = 'identity:id';
export declare function isXES_IdentityAttributes(item: unknown): item is XES_IdentityAttributes;
export type XES_LifecycleAttributes = 'lifecycle:model' | 'lifecycle:transition';
export declare function isXES_LifecycleAttributes(item: unknown): item is XES_LifecycleAttributes;
export type XES_OrganizationalAttributes = 'org:group' | 'org:resource' | 'org:role';
export declare function isXES_OrganizationalAttributes(item: unknown): item is XES_OrganizationalAttributes;
export type XES_Scope = 'event' | 'trace';
export declare function isXES_Scope(item: unknown): item is XES_Scope;
export type XES_SemanticAttributes = 'semantic:modelReference';
export declare function isXES_SemanticAttributes(item: unknown): item is XES_SemanticAttributes;
export type XES_StandardExtension = 'concept' | 'cost' | 'identity' | 'lifecycle' | 'organizational' | 'resource' | 'semantic' | 'time';
export declare function isXES_StandardExtension(item: unknown): item is XES_StandardExtension;
export type XES_TimeAttributes = 'time:duration' | 'time:timestamp';
export declare function isXES_TimeAttributes(item: unknown): item is XES_TimeAttributes;
export interface AccessRelationship extends AstNode {
    readonly $container: ArchimateModel;
    readonly $type: 'AccessRelationship';
    accessType?: 'none' | 'read' | 'readWrite' | 'write';
    from: ArchimateRef;
    to: ArchimateRef;
}
export declare const AccessRelationship = "AccessRelationship";
export declare function isAccessRelationship(item: unknown): item is AccessRelationship;
export interface AggregationRelationship extends AstNode {
    readonly $container: ArchimateModel;
    readonly $type: 'AggregationRelationship';
    from: ArchimateRef;
    to: ArchimateRef;
}
export declare const AggregationRelationship = "AggregationRelationship";
export declare function isAggregationRelationship(item: unknown): item is AggregationRelationship;
export interface Archimate_Application_Collaboration extends AstNode {
    readonly $container: ArchimateModel | ArchiverseModel;
    readonly $type: 'Archimate_Application_Collaboration';
    description?: string;
    name: string;
}
export declare const Archimate_Application_Collaboration = "Archimate_Application_Collaboration";
export declare function isArchimate_Application_Collaboration(item: unknown): item is Archimate_Application_Collaboration;
export interface Archimate_Application_Component extends AstNode {
    readonly $container: ArchimateModel | ArchiverseModel;
    readonly $type: 'Archimate_Application_Component';
    description?: string;
    name: string;
}
export declare const Archimate_Application_Component = "Archimate_Application_Component";
export declare function isArchimate_Application_Component(item: unknown): item is Archimate_Application_Component;
export interface Archimate_Application_Function extends AstNode {
    readonly $container: ArchimateModel | ArchiverseModel;
    readonly $type: 'Archimate_Application_Function';
    description?: string;
    name: string;
}
export declare const Archimate_Application_Function = "Archimate_Application_Function";
export declare function isArchimate_Application_Function(item: unknown): item is Archimate_Application_Function;
export interface Archimate_Application_Interaction extends AstNode {
    readonly $container: ArchimateModel | ArchiverseModel;
    readonly $type: 'Archimate_Application_Interaction';
    description?: string;
    name: string;
}
export declare const Archimate_Application_Interaction = "Archimate_Application_Interaction";
export declare function isArchimate_Application_Interaction(item: unknown): item is Archimate_Application_Interaction;
export interface Archimate_Application_Interface extends AstNode {
    readonly $container: ArchimateModel | ArchiverseModel;
    readonly $type: 'Archimate_Application_Interface';
    description?: string;
    name: string;
}
export declare const Archimate_Application_Interface = "Archimate_Application_Interface";
export declare function isArchimate_Application_Interface(item: unknown): item is Archimate_Application_Interface;
export interface Archimate_Application_Service extends AstNode {
    readonly $container: ArchimateModel | ArchiverseModel;
    readonly $type: 'Archimate_Application_Service';
    description?: string;
    name: string;
}
export declare const Archimate_Application_Service = "Archimate_Application_Service";
export declare function isArchimate_Application_Service(item: unknown): item is Archimate_Application_Service;
export interface Archimate_Artifact extends AstNode {
    readonly $container: ArchimateModel | ArchiverseModel;
    readonly $type: 'Archimate_Artifact';
    description?: string;
    name: string;
}
export declare const Archimate_Artifact = "Archimate_Artifact";
export declare function isArchimate_Artifact(item: unknown): item is Archimate_Artifact;
export interface Archimate_Assessment extends AstNode {
    readonly $container: ArchimateModel | ArchiverseModel;
    readonly $type: 'Archimate_Assessment';
    description?: string;
    name: string;
}
export declare const Archimate_Assessment = "Archimate_Assessment";
export declare function isArchimate_Assessment(item: unknown): item is Archimate_Assessment;
export interface Archimate_Business_Actor extends AstNode {
    readonly $container: ArchimateModel | ArchiverseModel;
    readonly $type: 'Archimate_Business_Actor';
    description?: string;
    name: string;
}
export declare const Archimate_Business_Actor = "Archimate_Business_Actor";
export declare function isArchimate_Business_Actor(item: unknown): item is Archimate_Business_Actor;
export interface Archimate_Business_Collaboration extends AstNode {
    readonly $container: ArchimateModel | ArchiverseModel;
    readonly $type: 'Archimate_Business_Collaboration';
    description?: string;
    name: string;
}
export declare const Archimate_Business_Collaboration = "Archimate_Business_Collaboration";
export declare function isArchimate_Business_Collaboration(item: unknown): item is Archimate_Business_Collaboration;
export interface Archimate_Business_Event extends AstNode {
    readonly $container: ArchimateModel | ArchiverseModel;
    readonly $type: 'Archimate_Business_Event';
    description?: string;
    name: string;
}
export declare const Archimate_Business_Event = "Archimate_Business_Event";
export declare function isArchimate_Business_Event(item: unknown): item is Archimate_Business_Event;
export interface Archimate_Business_Function extends AstNode {
    readonly $container: ArchimateModel | ArchiverseModel;
    readonly $type: 'Archimate_Business_Function';
    description?: string;
    name: string;
}
export declare const Archimate_Business_Function = "Archimate_Business_Function";
export declare function isArchimate_Business_Function(item: unknown): item is Archimate_Business_Function;
export interface Archimate_Business_Interaction extends AstNode {
    readonly $container: ArchimateModel | ArchiverseModel;
    readonly $type: 'Archimate_Business_Interaction';
    description?: string;
    name: string;
}
export declare const Archimate_Business_Interaction = "Archimate_Business_Interaction";
export declare function isArchimate_Business_Interaction(item: unknown): item is Archimate_Business_Interaction;
export interface Archimate_Business_Interface extends AstNode {
    readonly $container: ArchimateModel | ArchiverseModel;
    readonly $type: 'Archimate_Business_Interface';
    description?: string;
    name: string;
}
export declare const Archimate_Business_Interface = "Archimate_Business_Interface";
export declare function isArchimate_Business_Interface(item: unknown): item is Archimate_Business_Interface;
export interface Archimate_Business_Object extends AstNode {
    readonly $container: ArchimateModel | ArchiverseModel;
    readonly $type: 'Archimate_Business_Object';
    description?: string;
    name: string;
}
export declare const Archimate_Business_Object = "Archimate_Business_Object";
export declare function isArchimate_Business_Object(item: unknown): item is Archimate_Business_Object;
export interface Archimate_Business_Process extends AstNode {
    readonly $container: ArchimateModel | ArchiverseModel;
    readonly $type: 'Archimate_Business_Process';
    description?: string;
    name: string;
}
export declare const Archimate_Business_Process = "Archimate_Business_Process";
export declare function isArchimate_Business_Process(item: unknown): item is Archimate_Business_Process;
export interface Archimate_Business_Role extends AstNode {
    readonly $container: ArchimateModel | ArchiverseModel;
    readonly $type: 'Archimate_Business_Role';
    description?: string;
    name: string;
}
export declare const Archimate_Business_Role = "Archimate_Business_Role";
export declare function isArchimate_Business_Role(item: unknown): item is Archimate_Business_Role;
export interface Archimate_Business_Service extends AstNode {
    readonly $container: ArchimateModel | ArchiverseModel;
    readonly $type: 'Archimate_Business_Service';
    description?: string;
    name: string;
}
export declare const Archimate_Business_Service = "Archimate_Business_Service";
export declare function isArchimate_Business_Service(item: unknown): item is Archimate_Business_Service;
export interface Archimate_Capability extends AstNode {
    readonly $container: ArchimateModel | ArchiverseModel;
    readonly $type: 'Archimate_Capability';
    description?: string;
    name: string;
}
export declare const Archimate_Capability = "Archimate_Capability";
export declare function isArchimate_Capability(item: unknown): item is Archimate_Capability;
export interface Archimate_CommunicationNetwork extends AstNode {
    readonly $container: ArchimateModel | ArchiverseModel;
    readonly $type: 'Archimate_CommunicationNetwork';
    description?: string;
    name: string;
}
export declare const Archimate_CommunicationNetwork = "Archimate_CommunicationNetwork";
export declare function isArchimate_CommunicationNetwork(item: unknown): item is Archimate_CommunicationNetwork;
export interface Archimate_Constraint extends AstNode {
    readonly $container: ArchimateModel | ArchiverseModel;
    readonly $type: 'Archimate_Constraint';
    description?: string;
    name: string;
}
export declare const Archimate_Constraint = "Archimate_Constraint";
export declare function isArchimate_Constraint(item: unknown): item is Archimate_Constraint;
export interface Archimate_Contract extends AstNode {
    readonly $container: ArchimateModel | ArchiverseModel;
    readonly $type: 'Archimate_Contract';
    description?: string;
    name: string;
}
export declare const Archimate_Contract = "Archimate_Contract";
export declare function isArchimate_Contract(item: unknown): item is Archimate_Contract;
export interface Archimate_CourseOfAction extends AstNode {
    readonly $container: ArchimateModel | ArchiverseModel;
    readonly $type: 'Archimate_CourseOfAction';
    description?: string;
    name: string;
}
export declare const Archimate_CourseOfAction = "Archimate_CourseOfAction";
export declare function isArchimate_CourseOfAction(item: unknown): item is Archimate_CourseOfAction;
export interface Archimate_Data_Object extends AstNode {
    readonly $container: ArchimateModel | ArchiverseModel;
    readonly $type: 'Archimate_Data_Object';
    description?: string;
    name: string;
}
export declare const Archimate_Data_Object = "Archimate_Data_Object";
export declare function isArchimate_Data_Object(item: unknown): item is Archimate_Data_Object;
export interface Archimate_Deliverable extends AstNode {
    readonly $container: ArchimateModel | ArchiverseModel;
    readonly $type: 'Archimate_Deliverable';
    description?: string;
    name: string;
}
export declare const Archimate_Deliverable = "Archimate_Deliverable";
export declare function isArchimate_Deliverable(item: unknown): item is Archimate_Deliverable;
export interface Archimate_Device extends AstNode {
    readonly $container: ArchimateModel | ArchiverseModel;
    readonly $type: 'Archimate_Device';
    description?: string;
    name: string;
}
export declare const Archimate_Device = "Archimate_Device";
export declare function isArchimate_Device(item: unknown): item is Archimate_Device;
export interface Archimate_Driver extends AstNode {
    readonly $container: ArchimateModel | ArchiverseModel;
    readonly $type: 'Archimate_Driver';
    description?: string;
    name: string;
}
export declare const Archimate_Driver = "Archimate_Driver";
export declare function isArchimate_Driver(item: unknown): item is Archimate_Driver;
export interface Archimate_Gap extends AstNode {
    readonly $container: ArchimateModel | ArchiverseModel;
    readonly $type: 'Archimate_Gap';
    description?: string;
    name: string;
}
export declare const Archimate_Gap = "Archimate_Gap";
export declare function isArchimate_Gap(item: unknown): item is Archimate_Gap;
export interface Archimate_Goal extends AstNode {
    readonly $container: ArchimateModel | ArchiverseModel;
    readonly $type: 'Archimate_Goal';
    description?: string;
    name: string;
}
export declare const Archimate_Goal = "Archimate_Goal";
export declare function isArchimate_Goal(item: unknown): item is Archimate_Goal;
export interface Archimate_ImplementationEvent extends AstNode {
    readonly $container: ArchimateModel | ArchiverseModel;
    readonly $type: 'Archimate_ImplementationEvent';
    description?: string;
    name: string;
}
export declare const Archimate_ImplementationEvent = "Archimate_ImplementationEvent";
export declare function isArchimate_ImplementationEvent(item: unknown): item is Archimate_ImplementationEvent;
export interface Archimate_Meaning extends AstNode {
    readonly $container: ArchimateModel | ArchiverseModel;
    readonly $type: 'Archimate_Meaning';
    description?: string;
    name: string;
}
export declare const Archimate_Meaning = "Archimate_Meaning";
export declare function isArchimate_Meaning(item: unknown): item is Archimate_Meaning;
export interface Archimate_Node extends AstNode {
    readonly $container: ArchimateModel | ArchiverseModel;
    readonly $type: 'Archimate_Node';
    description?: string;
    name: string;
}
export declare const Archimate_Node = "Archimate_Node";
export declare function isArchimate_Node(item: unknown): item is Archimate_Node;
export interface Archimate_Outcome extends AstNode {
    readonly $container: ArchimateModel | ArchiverseModel;
    readonly $type: 'Archimate_Outcome';
    description?: string;
    name: string;
}
export declare const Archimate_Outcome = "Archimate_Outcome";
export declare function isArchimate_Outcome(item: unknown): item is Archimate_Outcome;
export interface Archimate_Path extends AstNode {
    readonly $container: ArchimateModel | ArchiverseModel;
    readonly $type: 'Archimate_Path';
    description?: string;
    name: string;
}
export declare const Archimate_Path = "Archimate_Path";
export declare function isArchimate_Path(item: unknown): item is Archimate_Path;
export interface Archimate_Plateau extends AstNode {
    readonly $container: ArchimateModel | ArchiverseModel;
    readonly $type: 'Archimate_Plateau';
    description?: string;
    name: string;
}
export declare const Archimate_Plateau = "Archimate_Plateau";
export declare function isArchimate_Plateau(item: unknown): item is Archimate_Plateau;
export interface Archimate_Principle extends AstNode {
    readonly $container: ArchimateModel | ArchiverseModel;
    readonly $type: 'Archimate_Principle';
    description?: string;
    name: string;
}
export declare const Archimate_Principle = "Archimate_Principle";
export declare function isArchimate_Principle(item: unknown): item is Archimate_Principle;
export interface Archimate_Product extends AstNode {
    readonly $container: ArchimateModel | ArchiverseModel;
    readonly $type: 'Archimate_Product';
    description?: string;
    name: string;
}
export declare const Archimate_Product = "Archimate_Product";
export declare function isArchimate_Product(item: unknown): item is Archimate_Product;
export interface Archimate_Representation extends AstNode {
    readonly $container: ArchimateModel | ArchiverseModel;
    readonly $type: 'Archimate_Representation';
    description?: string;
    name: string;
}
export declare const Archimate_Representation = "Archimate_Representation";
export declare function isArchimate_Representation(item: unknown): item is Archimate_Representation;
export interface Archimate_Requirement extends AstNode {
    readonly $container: ArchimateModel | ArchiverseModel;
    readonly $type: 'Archimate_Requirement';
    description?: string;
    name: string;
}
export declare const Archimate_Requirement = "Archimate_Requirement";
export declare function isArchimate_Requirement(item: unknown): item is Archimate_Requirement;
export interface Archimate_Resource extends AstNode {
    readonly $container: ArchimateModel | ArchiverseModel;
    readonly $type: 'Archimate_Resource';
    description?: string;
    name: string;
}
export declare const Archimate_Resource = "Archimate_Resource";
export declare function isArchimate_Resource(item: unknown): item is Archimate_Resource;
export interface Archimate_Stakeholder extends AstNode {
    readonly $container: ArchimateModel | ArchiverseModel;
    readonly $type: 'Archimate_Stakeholder';
    description?: string;
    name: string;
}
export declare const Archimate_Stakeholder = "Archimate_Stakeholder";
export declare function isArchimate_Stakeholder(item: unknown): item is Archimate_Stakeholder;
export interface Archimate_SystemSoftware extends AstNode {
    readonly $container: ArchimateModel | ArchiverseModel;
    readonly $type: 'Archimate_SystemSoftware';
    description?: string;
    name: string;
}
export declare const Archimate_SystemSoftware = "Archimate_SystemSoftware";
export declare function isArchimate_SystemSoftware(item: unknown): item is Archimate_SystemSoftware;
export interface Archimate_Technology_Collaboration extends AstNode {
    readonly $container: ArchimateModel | ArchiverseModel;
    readonly $type: 'Archimate_Technology_Collaboration';
    description?: string;
    name: string;
}
export declare const Archimate_Technology_Collaboration = "Archimate_Technology_Collaboration";
export declare function isArchimate_Technology_Collaboration(item: unknown): item is Archimate_Technology_Collaboration;
export interface Archimate_Technology_Event extends AstNode {
    readonly $container: ArchimateModel | ArchiverseModel;
    readonly $type: 'Archimate_Technology_Event';
    description?: string;
    name: string;
}
export declare const Archimate_Technology_Event = "Archimate_Technology_Event";
export declare function isArchimate_Technology_Event(item: unknown): item is Archimate_Technology_Event;
export interface Archimate_Technology_Function extends AstNode {
    readonly $container: ArchimateModel | ArchiverseModel;
    readonly $type: 'Archimate_Technology_Function';
    description?: string;
    name: string;
}
export declare const Archimate_Technology_Function = "Archimate_Technology_Function";
export declare function isArchimate_Technology_Function(item: unknown): item is Archimate_Technology_Function;
export interface Archimate_Technology_Interaction extends AstNode {
    readonly $container: ArchimateModel | ArchiverseModel;
    readonly $type: 'Archimate_Technology_Interaction';
    description?: string;
    name: string;
}
export declare const Archimate_Technology_Interaction = "Archimate_Technology_Interaction";
export declare function isArchimate_Technology_Interaction(item: unknown): item is Archimate_Technology_Interaction;
export interface Archimate_Technology_Interface extends AstNode {
    readonly $container: ArchimateModel | ArchiverseModel;
    readonly $type: 'Archimate_Technology_Interface';
    description?: string;
    name: string;
}
export declare const Archimate_Technology_Interface = "Archimate_Technology_Interface";
export declare function isArchimate_Technology_Interface(item: unknown): item is Archimate_Technology_Interface;
export interface Archimate_Technology_Process extends AstNode {
    readonly $container: ArchimateModel | ArchiverseModel;
    readonly $type: 'Archimate_Technology_Process';
    description?: string;
    name: string;
}
export declare const Archimate_Technology_Process = "Archimate_Technology_Process";
export declare function isArchimate_Technology_Process(item: unknown): item is Archimate_Technology_Process;
export interface Archimate_Technology_Service extends AstNode {
    readonly $container: ArchimateModel | ArchiverseModel;
    readonly $type: 'Archimate_Technology_Service';
    description?: string;
    name: string;
}
export declare const Archimate_Technology_Service = "Archimate_Technology_Service";
export declare function isArchimate_Technology_Service(item: unknown): item is Archimate_Technology_Service;
export interface Archimate_Value extends AstNode {
    readonly $container: ArchimateModel | ArchiverseModel;
    readonly $type: 'Archimate_Value';
    description?: string;
    name: string;
}
export declare const Archimate_Value = "Archimate_Value";
export declare function isArchimate_Value(item: unknown): item is Archimate_Value;
export interface Archimate_ValueStream extends AstNode {
    readonly $container: ArchimateModel | ArchiverseModel;
    readonly $type: 'Archimate_ValueStream';
    description?: string;
    name: string;
}
export declare const Archimate_ValueStream = "Archimate_ValueStream";
export declare function isArchimate_ValueStream(item: unknown): item is Archimate_ValueStream;
export interface Archimate_WorkPackage extends AstNode {
    readonly $container: ArchimateModel | ArchiverseModel;
    readonly $type: 'Archimate_WorkPackage';
    description?: string;
    name: string;
}
export declare const Archimate_WorkPackage = "Archimate_WorkPackage";
export declare function isArchimate_WorkPackage(item: unknown): item is Archimate_WorkPackage;
export interface ArchimateModel extends AstNode {
    readonly $type: 'ArchimateModel';
    elements: Array<ArchimateElement>;
    relationships: Array<ArchimateRelationship>;
}
export declare const ArchimateModel = "ArchimateModel";
export declare function isArchimateModel(item: unknown): item is ArchimateModel;
export interface ArchimateRef extends AstNode {
    readonly $container: AccessRelationship | AggregationRelationship | AssignmentRelationship | AssociationRelationship | CompositionRelationship | FlowRelationship | InfluenceRelationship | RealizationRelationship | ServingRelationship | SpecializationRelationship | TriggeringRelationship;
    readonly $type: 'ArchimateRef';
    ref: Reference<ArchimateElement>;
}
export declare const ArchimateRef = "ArchimateRef";
export declare function isArchimateRef(item: unknown): item is ArchimateRef;
export interface ArchiverseModel extends AstNode {
    readonly $type: 'ArchiverseModel';
    elements: Array<ModelElement>;
}
export declare const ArchiverseModel = "ArchiverseModel";
export declare function isArchiverseModel(item: unknown): item is ArchiverseModel;
export interface AssignmentRelationship extends AstNode {
    readonly $container: ArchimateModel;
    readonly $type: 'AssignmentRelationship';
    from: ArchimateRef;
    to: ArchimateRef;
}
export declare const AssignmentRelationship = "AssignmentRelationship";
export declare function isAssignmentRelationship(item: unknown): item is AssignmentRelationship;
export interface AssociationRelationship extends AstNode {
    readonly $container: ArchimateModel;
    readonly $type: 'AssociationRelationship';
    from: ArchimateRef;
    to: ArchimateRef;
}
export declare const AssociationRelationship = "AssociationRelationship";
export declare function isAssociationRelationship(item: unknown): item is AssociationRelationship;
export interface BPC_AreaPath extends AstNode {
    readonly $container: BPC_EndToEndProcess | BPC_Process | BPC_ProcessArea | BPC_Scenario;
    readonly $type: 'BPC_AreaPath';
    path: string;
}
export declare const BPC_AreaPath = "BPC_AreaPath";
export declare function isBPC_AreaPath(item: unknown): item is BPC_AreaPath;
export interface BPC_BusinessOutcomeCategory extends AstNode {
    readonly $container: BPC_EndToEndProcess | BPC_Process | BPC_ProcessArea | BPC_Scenario;
    readonly $type: 'BPC_BusinessOutcomeCategory';
    category: string;
}
export declare const BPC_BusinessOutcomeCategory = "BPC_BusinessOutcomeCategory";
export declare function isBPC_BusinessOutcomeCategory(item: unknown): item is BPC_BusinessOutcomeCategory;
export interface BPC_BusinessProcessCatalog extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'BPC_BusinessProcessCatalog';
    items: Array<BPC_BusinessProcessItem>;
}
export declare const BPC_BusinessProcessCatalog = "BPC_BusinessProcessCatalog";
export declare function isBPC_BusinessProcessCatalog(item: unknown): item is BPC_BusinessProcessCatalog;
export interface BPC_ConfigurationDeliverable extends AstNode {
    readonly $container: ArchiverseModel | BPC_BusinessProcessCatalog | BPC_EndToEndProcess | BPC_Process | BPC_ProcessArea;
    readonly $type: 'BPC_ConfigurationDeliverable';
    description?: BPC_Description;
    includedInEntity?: string;
    menuPath: string;
    module?: string;
}
export declare const BPC_ConfigurationDeliverable = "BPC_ConfigurationDeliverable";
export declare function isBPC_ConfigurationDeliverable(item: unknown): item is BPC_ConfigurationDeliverable;
export interface BPC_Description extends AstNode {
    readonly $container: BPC_ConfigurationDeliverable | BPC_EndToEndProcess | BPC_Process | BPC_ProcessArea | BPC_Scenario;
    readonly $type: 'BPC_Description';
    text: string;
}
export declare const BPC_Description = "BPC_Description";
export declare function isBPC_Description(item: unknown): item is BPC_Description;
export interface BPC_Effort extends AstNode {
    readonly $container: BPC_EndToEndProcess | BPC_Process | BPC_ProcessArea | BPC_Scenario;
    readonly $type: 'BPC_Effort';
    value: string;
}
export declare const BPC_Effort = "BPC_Effort";
export declare function isBPC_Effort(item: unknown): item is BPC_Effort;
export interface BPC_EndToEndProcess extends AstNode {
    readonly $container: ArchiverseModel | BPC_BusinessProcessCatalog;
    readonly $type: 'BPC_EndToEndProcess';
    acceptanceCriteria?: string;
    alternateProcessSequenceId?: string;
    businessOutcome?: BPC_BusinessOutcomeCategory;
    description?: BPC_Description;
    discipline?: string;
    effort?: BPC_Effort;
    items: Array<BPC_ConfigurationDeliverable | BPC_Process | BPC_ProcessArea | BPC_Scenario>;
    kpis?: string;
    msLearnUrl?: string;
    name: string;
    priority?: BPC_Priority;
    processSequenceId?: string;
    risk?: BPC_Risk;
    timeCriticality?: BPC_TimeCriticality;
    valueArea?: BPC_ValueArea;
    valuePath?: BPC_AreaPath;
}
export declare const BPC_EndToEndProcess = "BPC_EndToEndProcess";
export declare function isBPC_EndToEndProcess(item: unknown): item is BPC_EndToEndProcess;
export interface BPC_Priority extends AstNode {
    readonly $container: BPC_EndToEndProcess | BPC_Process | BPC_ProcessArea | BPC_Scenario;
    readonly $type: 'BPC_Priority';
    value: number;
}
export declare const BPC_Priority = "BPC_Priority";
export declare function isBPC_Priority(item: unknown): item is BPC_Priority;
export interface BPC_Process extends AstNode {
    readonly $container: ArchiverseModel | BPC_BusinessProcessCatalog | BPC_EndToEndProcess | BPC_ProcessArea;
    readonly $type: 'BPC_Process';
    acceptanceCriteria?: string;
    alternateProcessSequenceId?: string;
    businessOutcome?: BPC_BusinessOutcomeCategory;
    description?: BPC_Description;
    discipline?: string;
    effort?: BPC_Effort;
    items: Array<BPC_ConfigurationDeliverable | BPC_Scenario>;
    kpis?: string;
    name: string;
    priority?: BPC_Priority;
    processSequenceId?: string;
    risk?: BPC_Risk;
    timeCriticality?: BPC_TimeCriticality;
    valueArea?: BPC_ValueArea;
    valuePath?: BPC_AreaPath;
}
export declare const BPC_Process = "BPC_Process";
export declare function isBPC_Process(item: unknown): item is BPC_Process;
export interface BPC_ProcessArea extends AstNode {
    readonly $container: ArchiverseModel | BPC_BusinessProcessCatalog | BPC_EndToEndProcess;
    readonly $type: 'BPC_ProcessArea';
    acceptanceCriteria?: string;
    alternateProcessSequenceId?: string;
    businessOutcome?: BPC_BusinessOutcomeCategory;
    description?: BPC_Description;
    discipline?: string;
    effort?: BPC_Effort;
    items: Array<BPC_ConfigurationDeliverable | BPC_Process | BPC_Scenario>;
    kpis?: string;
    name: string;
    priority?: BPC_Priority;
    processSequenceId?: string;
    risk?: BPC_Risk;
    timeCriticality?: BPC_TimeCriticality;
    valueArea?: BPC_ValueArea;
    valuePath?: BPC_AreaPath;
}
export declare const BPC_ProcessArea = "BPC_ProcessArea";
export declare function isBPC_ProcessArea(item: unknown): item is BPC_ProcessArea;
export interface BPC_Risk extends AstNode {
    readonly $container: BPC_EndToEndProcess | BPC_Process | BPC_ProcessArea | BPC_Scenario;
    readonly $type: 'BPC_Risk';
    value: string;
}
export declare const BPC_Risk = "BPC_Risk";
export declare function isBPC_Risk(item: unknown): item is BPC_Risk;
export interface BPC_Scenario extends AstNode {
    readonly $container: ArchiverseModel | BPC_BusinessProcessCatalog | BPC_EndToEndProcess | BPC_Process | BPC_ProcessArea;
    readonly $type: 'BPC_Scenario';
    acceptanceCriteria?: string;
    alternateProcessSequenceId?: string;
    businessOutcome?: BPC_BusinessOutcomeCategory;
    description?: BPC_Description;
    discipline?: string;
    effort?: BPC_Effort;
    kpis?: string;
    name: string;
    priority?: BPC_Priority;
    processSequenceId?: string;
    risk?: BPC_Risk;
    timeCriticality?: BPC_TimeCriticality;
    valueArea?: BPC_ValueArea;
    valuePath?: BPC_AreaPath;
}
export declare const BPC_Scenario = "BPC_Scenario";
export declare function isBPC_Scenario(item: unknown): item is BPC_Scenario;
export interface BPC_TimeCriticality extends AstNode {
    readonly $container: BPC_EndToEndProcess | BPC_Process | BPC_ProcessArea | BPC_Scenario;
    readonly $type: 'BPC_TimeCriticality';
    value: string;
}
export declare const BPC_TimeCriticality = "BPC_TimeCriticality";
export declare function isBPC_TimeCriticality(item: unknown): item is BPC_TimeCriticality;
export interface BPC_ValueArea extends AstNode {
    readonly $container: BPC_EndToEndProcess | BPC_Process | BPC_ProcessArea | BPC_Scenario;
    readonly $type: 'BPC_ValueArea';
    area: string;
}
export declare const BPC_ValueArea = "BPC_ValueArea";
export declare function isBPC_ValueArea(item: unknown): item is BPC_ValueArea;
export interface BPMN_Bpmn_Model extends AstNode {
    readonly $type: 'BPMN_Bpmn_Model';
    elements: Array<BPMN_Element>;
}
export declare const BPMN_Bpmn_Model = "BPMN_Bpmn_Model";
export declare function isBPMN_Bpmn_Model(item: unknown): item is BPMN_Bpmn_Model;
export interface BPMN_Event extends AstNode {
    readonly $container: ArchiverseModel | BPMN_Bpmn_Model;
    readonly $type: 'BPMN_Event';
    description?: string;
    name: string;
    type: BPMN_EventType;
}
export declare const BPMN_Event = "BPMN_Event";
export declare function isBPMN_Event(item: unknown): item is BPMN_Event;
export interface BPMN_EventType extends AstNode {
    readonly $container: BPMN_Event;
    readonly $type: 'BPMN_EventType';
    value: 'end' | 'intermediate' | 'start';
}
export declare const BPMN_EventType = "BPMN_EventType";
export declare function isBPMN_EventType(item: unknown): item is BPMN_EventType;
export interface BPMN_Gateway extends AstNode {
    readonly $container: ArchiverseModel | BPMN_Bpmn_Model;
    readonly $type: 'BPMN_Gateway';
    description?: string;
    name: string;
    type: BPMN_GatewayType;
}
export declare const BPMN_Gateway = "BPMN_Gateway";
export declare function isBPMN_Gateway(item: unknown): item is BPMN_Gateway;
export interface BPMN_GatewayType extends AstNode {
    readonly $container: BPMN_Gateway;
    readonly $type: 'BPMN_GatewayType';
    value: 'exclusive' | 'inclusive' | 'parallel';
}
export declare const BPMN_GatewayType = "BPMN_GatewayType";
export declare function isBPMN_GatewayType(item: unknown): item is BPMN_GatewayType;
export interface BPMN_Task extends AstNode {
    readonly $container: ArchiverseModel | BPMN_Bpmn_Model;
    readonly $type: 'BPMN_Task';
    description?: string;
    name: string;
    type?: BPMN_TaskType;
}
export declare const BPMN_Task = "BPMN_Task";
export declare function isBPMN_Task(item: unknown): item is BPMN_Task;
export interface BPMN_TaskType extends AstNode {
    readonly $container: BPMN_Task;
    readonly $type: 'BPMN_TaskType';
    value: 'manual' | 'script' | 'service' | 'user';
}
export declare const BPMN_TaskType = "BPMN_TaskType";
export declare function isBPMN_TaskType(item: unknown): item is BPMN_TaskType;
export interface BusinessProcessCatalogImplementation extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'BusinessProcessCatalogImplementation';
    businessProcess: Reference<Archimate_Business_Process>;
    catalogItem: Reference<BPC_BusinessProcessItem>;
}
export declare const BusinessProcessCatalogImplementation = "BusinessProcessCatalogImplementation";
export declare function isBusinessProcessCatalogImplementation(item: unknown): item is BusinessProcessCatalogImplementation;
export interface BusinessProcessImplementation extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'BusinessProcessImplementation';
    process: Reference<Archimate_Business_Process>;
    task: Reference<BPMN_Task>;
}
export declare const BusinessProcessImplementation = "BusinessProcessImplementation";
export declare function isBusinessProcessImplementation(item: unknown): item is BusinessProcessImplementation;
export interface CMMI_Artifact extends AstNode {
    readonly $container: ArchiverseModel | CMMI_Model | CMMI_Practice;
    readonly $type: 'CMMI_Artifact';
    artifactType?: CMMIArtifactType;
    description?: string;
    name: string;
    template?: string;
}
export declare const CMMI_Artifact = "CMMI_Artifact";
export declare function isCMMI_Artifact(item: unknown): item is CMMI_Artifact;
export interface CMMI_Assessment extends AstNode {
    readonly $container: ArchiverseModel | CMMI_Model;
    readonly $type: 'CMMI_Assessment';
    assessmentType?: CMMIAssessmentType;
    date?: string;
    description?: string;
    leadAssessor?: string;
    name: string;
    ratings: Array<CMMI_MaturityRating>;
    recommendations: Array<string>;
    strengths: Array<string>;
    teamMembers: Array<string>;
    weaknesses: Array<string>;
}
export declare const CMMI_Assessment = "CMMI_Assessment";
export declare function isCMMI_Assessment(item: unknown): item is CMMI_Assessment;
export interface CMMI_CapabilityLevel extends AstNode {
    readonly $container: ArchiverseModel | CMMI_Model;
    readonly $type: 'CMMI_CapabilityLevel';
    description?: string;
    genericGoals: Array<Reference<CMMI_Goal>>;
    level?: number;
    levelDescription?: string;
    name: string;
}
export declare const CMMI_CapabilityLevel = "CMMI_CapabilityLevel";
export declare function isCMMI_CapabilityLevel(item: unknown): item is CMMI_CapabilityLevel;
export interface CMMI_Goal extends AstNode {
    readonly $container: ArchiverseModel | CMMI_Model | CMMI_ProcessArea;
    readonly $type: 'CMMI_Goal';
    description?: string;
    goalType?: CMMIGoalType;
    name: string;
    practices: Array<CMMI_Practice>;
}
export declare const CMMI_Goal = "CMMI_Goal";
export declare function isCMMI_Goal(item: unknown): item is CMMI_Goal;
export interface CMMI_MaturityLevel extends AstNode {
    readonly $container: ArchiverseModel | CMMI_Model | CMMI_ProcessArea;
    readonly $type: 'CMMI_MaturityLevel';
    description?: string;
    focus?: string;
    level?: number;
    name: string;
    processAreas: Array<Reference<CMMI_ProcessArea>>;
}
export declare const CMMI_MaturityLevel = "CMMI_MaturityLevel";
export declare function isCMMI_MaturityLevel(item: unknown): item is CMMI_MaturityLevel;
export interface CMMI_MaturityRating extends AstNode {
    readonly $container: CMMI_Assessment;
    readonly $type: 'CMMI_MaturityRating';
    description?: string;
    processArea: Reference<CMMI_ProcessArea>;
    ratingValue: CMMIRatingValue;
}
export declare const CMMI_MaturityRating = "CMMI_MaturityRating";
export declare function isCMMI_MaturityRating(item: unknown): item is CMMI_MaturityRating;
export interface CMMI_Model extends AstNode {
    readonly $type: 'CMMI_Model';
    elements: Array<CMMI_Element>;
}
export declare const CMMI_Model = "CMMI_Model";
export declare function isCMMI_Model(item: unknown): item is CMMI_Model;
export interface CMMI_Practice extends AstNode {
    readonly $container: ArchiverseModel | CMMI_Goal | CMMI_Model;
    readonly $type: 'CMMI_Practice';
    artifacts: Array<CMMI_Artifact>;
    description?: string;
    name: string;
    practiceType?: CMMIPracticeType;
    references: Array<string>;
    subpractices: Array<string>;
    workProducts: Array<Reference<CMMI_WorkProduct>>;
}
export declare const CMMI_Practice = "CMMI_Practice";
export declare function isCMMI_Practice(item: unknown): item is CMMI_Practice;
export interface CMMI_Process extends AstNode {
    readonly $container: ArchiverseModel | CMMI_Model;
    readonly $type: 'CMMI_Process';
    description?: string;
    entryCriteria: Array<string>;
    exitCriteria: Array<string>;
    implementsAreas: Array<Reference<CMMI_ProcessArea>>;
    inputs: Array<string>;
    name: string;
    outputs: Array<string>;
    owner?: string;
}
export declare const CMMI_Process = "CMMI_Process";
export declare function isCMMI_Process(item: unknown): item is CMMI_Process;
export interface CMMI_ProcessArea extends AstNode {
    readonly $container: ArchiverseModel | CMMI_Model;
    readonly $type: 'CMMI_ProcessArea';
    category?: CMMI_Category;
    description?: string;
    genericGoals: Array<CMMI_Goal>;
    maturityLevel?: CMMI_MaturityLevel;
    name: string;
    specificGoals: Array<CMMI_Goal>;
}
export declare const CMMI_ProcessArea = "CMMI_ProcessArea";
export declare function isCMMI_ProcessArea(item: unknown): item is CMMI_ProcessArea;
export interface CMMI_WorkProduct extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'CMMI_WorkProduct';
    characteristics: Array<string>;
    description?: string;
    name: string;
    productType?: string;
}
export declare const CMMI_WorkProduct = "CMMI_WorkProduct";
export declare function isCMMI_WorkProduct(item: unknown): item is CMMI_WorkProduct;
export interface CMMN_Case extends AstNode {
    readonly $container: ArchiverseModel | CMMN_Model;
    readonly $type: 'CMMN_Case';
    caseFile: Array<CMMN_CaseFileItem>;
    description?: string;
    milestones: Array<CMMN_Milestone>;
    name: string;
    sentries: Array<CMMN_Sentry>;
    stages: Array<CMMN_Stage>;
}
export declare const CMMN_Case = "CMMN_Case";
export declare function isCMMN_Case(item: unknown): item is CMMN_Case;
export interface CMMN_CaseFileItem extends AstNode {
    readonly $container: ArchiverseModel | CMMN_Case | CMMN_CaseFileItem | CMMN_Model;
    readonly $type: 'CMMN_CaseFileItem';
    children: Array<CMMN_CaseFileItem>;
    description?: string;
    itemType?: string;
    multiplicity?: CMMN_Multiplicity;
    name: string;
}
export declare const CMMN_CaseFileItem = "CMMN_CaseFileItem";
export declare function isCMMN_CaseFileItem(item: unknown): item is CMMN_CaseFileItem;
export interface CMMN_EventListener extends AstNode {
    readonly $container: ArchiverseModel | CMMN_Model | CMMN_Stage;
    readonly $type: 'CMMN_EventListener';
    description?: string;
    eventType?: CMMN_EventType;
    name: string;
}
export declare const CMMN_EventListener = "CMMN_EventListener";
export declare function isCMMN_EventListener(item: unknown): item is CMMN_EventListener;
export interface CMMN_Milestone extends AstNode {
    readonly $container: ArchiverseModel | CMMN_Case | CMMN_Model | CMMN_Stage;
    readonly $type: 'CMMN_Milestone';
    description?: string;
    hasRepetition: boolean;
    isRequired: boolean;
    name: string;
}
export declare const CMMN_Milestone = "CMMN_Milestone";
export declare function isCMMN_Milestone(item: unknown): item is CMMN_Milestone;
export interface CMMN_Model extends AstNode {
    readonly $type: 'CMMN_Model';
    elements: Array<CMMN_Element>;
}
export declare const CMMN_Model = "CMMN_Model";
export declare function isCMMN_Model(item: unknown): item is CMMN_Model;
export interface CMMN_PlanFragment extends AstNode {
    readonly $container: ArchiverseModel | CMMN_Model;
    readonly $type: 'CMMN_PlanFragment';
    description?: string;
    name: string;
}
export declare const CMMN_PlanFragment = "CMMN_PlanFragment";
export declare function isCMMN_PlanFragment(item: unknown): item is CMMN_PlanFragment;
export interface CMMN_PlanningTable extends AstNode {
    readonly $container: CMMN_Stage;
    readonly $type: 'CMMN_PlanningTable';
    applicabilityRules: Array<string>;
    description?: string;
    discretionaryItems: Array<string>;
    name: string;
}
export declare const CMMN_PlanningTable = "CMMN_PlanningTable";
export declare function isCMMN_PlanningTable(item: unknown): item is CMMN_PlanningTable;
export interface CMMN_Sentry extends AstNode {
    readonly $container: ArchiverseModel | CMMN_Case | CMMN_Model | CMMN_Stage;
    readonly $type: 'CMMN_Sentry';
    description?: string;
    ifPart?: string;
    name: string;
    onPart?: string;
}
export declare const CMMN_Sentry = "CMMN_Sentry";
export declare function isCMMN_Sentry(item: unknown): item is CMMN_Sentry;
export interface CMMN_Stage extends AstNode {
    readonly $container: ArchiverseModel | CMMN_Case | CMMN_Model;
    readonly $type: 'CMMN_Stage';
    description?: string;
    eventListeners: Array<CMMN_EventListener>;
    hasRepetition: boolean;
    isAutoComplete: boolean;
    isRequired: boolean;
    milestones: Array<CMMN_Milestone>;
    name: string;
    planningTable?: CMMN_PlanningTable;
    sentries: Array<CMMN_Sentry>;
    tasks: Array<CMMN_Task>;
}
export declare const CMMN_Stage = "CMMN_Stage";
export declare function isCMMN_Stage(item: unknown): item is CMMN_Stage;
export interface CMMN_Task extends AstNode {
    readonly $container: ArchiverseModel | CMMN_Model | CMMN_Stage;
    readonly $type: 'CMMN_Task';
    description?: string;
    hasRepetition: boolean;
    isBlocking: boolean;
    isRequired: boolean;
    manualActivation: boolean;
    name: string;
    taskType?: CMMN_TaskType;
}
export declare const CMMN_Task = "CMMN_Task";
export declare function isCMMN_Task(item: unknown): item is CMMN_Task;
export interface CompositionRelationship extends AstNode {
    readonly $container: ArchimateModel;
    readonly $type: 'CompositionRelationship';
    from: ArchimateRef;
    to: ArchimateRef;
}
export declare const CompositionRelationship = "CompositionRelationship";
export declare function isCompositionRelationship(item: unknown): item is CompositionRelationship;
export interface D365BC_Codeunit extends AstNode {
    readonly $container: ArchiverseModel | D365BC_Model;
    readonly $type: 'D365BC_Codeunit';
    description?: string;
    methods: Array<D365BC_Method>;
    name: string;
    tableNo?: number;
}
export declare const D365BC_Codeunit = "D365BC_Codeunit";
export declare function isD365BC_Codeunit(item: unknown): item is D365BC_Codeunit;
export interface D365BC_Field extends AstNode {
    readonly $container: D365BC_Table;
    readonly $type: 'D365BC_Field';
    autoIncrement: boolean;
    dataClassification?: D365BC_DataClassification;
    defaultValue?: string;
    description?: string;
    fieldType: D365BC_FieldType;
    length?: number;
    mandatory: boolean;
    name: string;
    optionString?: string;
}
export declare const D365BC_Field = "D365BC_Field";
export declare function isD365BC_Field(item: unknown): item is D365BC_Field;
export interface D365BC_FieldRelation extends AstNode {
    readonly $container: D365BC_TableRelation;
    readonly $type: 'D365BC_FieldRelation';
    condition?: string;
    fromField: Reference<D365BC_Field>;
    toField: Reference<D365BC_Field>;
}
export declare const D365BC_FieldRelation = "D365BC_FieldRelation";
export declare function isD365BC_FieldRelation(item: unknown): item is D365BC_FieldRelation;
export interface D365BC_Key extends AstNode {
    readonly $container: D365BC_Table;
    readonly $type: 'D365BC_Key';
    fieldNames: Array<Reference<D365BC_Field>>;
    isClustered: boolean;
    isPrimary: boolean;
    name: string;
}
export declare const D365BC_Key = "D365BC_Key";
export declare function isD365BC_Key(item: unknown): item is D365BC_Key;
export interface D365BC_Method extends AstNode {
    readonly $container: D365BC_Codeunit;
    readonly $type: 'D365BC_Method';
    isLocal: boolean;
    name: string;
    parameters: Array<D365BC_Parameter>;
    returnType?: D365BC_DataType;
}
export declare const D365BC_Method = "D365BC_Method";
export declare function isD365BC_Method(item: unknown): item is D365BC_Method;
export interface D365BC_Model extends AstNode {
    readonly $type: 'D365BC_Model';
    elements: Array<D365BC_Element>;
}
export declare const D365BC_Model = "D365BC_Model";
export declare function isD365BC_Model(item: unknown): item is D365BC_Model;
export interface D365BC_Page extends AstNode {
    readonly $container: ArchiverseModel | D365BC_Model;
    readonly $type: 'D365BC_Page';
    actions: Array<D365BC_PageAction>;
    description?: string;
    extends?: Reference<D365BC_Page>;
    layoutElements: Array<D365BC_PageLayoutElement>;
    name: string;
    pageType: D365BC_PageType;
    sourceTable?: Reference<D365BC_Table>;
}
export declare const D365BC_Page = "D365BC_Page";
export declare function isD365BC_Page(item: unknown): item is D365BC_Page;
export interface D365BC_PageAction extends AstNode {
    readonly $container: D365BC_Page;
    readonly $type: 'D365BC_PageAction';
    actionType: D365BC_ActionType;
    caption?: string;
    category?: D365BC_ActionCategory;
    image?: string;
    name: string;
}
export declare const D365BC_PageAction = "D365BC_PageAction";
export declare function isD365BC_PageAction(item: unknown): item is D365BC_PageAction;
export interface D365BC_PageLayoutElement extends AstNode {
    readonly $container: D365BC_Page | D365BC_PageLayoutElement;
    readonly $type: 'D365BC_PageLayoutElement';
    caption?: string;
    childElements: Array<D365BC_PageLayoutElement>;
    name: string;
    sourceField?: Reference<D365BC_Field>;
    type: D365BC_PageElementType;
}
export declare const D365BC_PageLayoutElement = "D365BC_PageLayoutElement";
export declare function isD365BC_PageLayoutElement(item: unknown): item is D365BC_PageLayoutElement;
export interface D365BC_Parameter extends AstNode {
    readonly $container: D365BC_Method;
    readonly $type: 'D365BC_Parameter';
    dataType: D365BC_DataType;
    isVar: boolean;
    name: string;
}
export declare const D365BC_Parameter = "D365BC_Parameter";
export declare function isD365BC_Parameter(item: unknown): item is D365BC_Parameter;
export interface D365BC_Table extends AstNode {
    readonly $container: ArchiverseModel | D365BC_Model;
    readonly $type: 'D365BC_Table';
    dataClassification?: D365BC_DataClassification;
    description?: string;
    extends?: Reference<D365BC_Table>;
    fields: Array<D365BC_Field>;
    keys: Array<D365BC_Key>;
    name: string;
    relations: Array<D365BC_TableRelation>;
    tableType?: D365BC_TableType;
}
export declare const D365BC_Table = "D365BC_Table";
export declare function isD365BC_Table(item: unknown): item is D365BC_Table;
export interface D365BC_TableRelation extends AstNode {
    readonly $container: D365BC_Table;
    readonly $type: 'D365BC_TableRelation';
    fieldRelations: Array<D365BC_FieldRelation>;
    name: string;
    toTable: Reference<D365BC_Table>;
}
export declare const D365BC_TableRelation = "D365BC_TableRelation";
export declare function isD365BC_TableRelation(item: unknown): item is D365BC_TableRelation;
export interface D365FO_AOTPackage extends AstNode {
    readonly $container: ArchiverseModel | D365FO_ModelStore;
    readonly $type: 'D365FO_AOTPackage';
    description?: D365FO_Description;
    models: Array<D365FO_Model>;
    name: string;
    publisher?: D365FO_Publisher;
    version?: D365FO_Version;
}
export declare const D365FO_AOTPackage = "D365FO_AOTPackage";
export declare function isD365FO_AOTPackage(item: unknown): item is D365FO_AOTPackage;
export interface D365FO_Class extends AstNode {
    readonly $container: D365FO_Model | D365FO_ModelStore;
    readonly $type: 'D365FO_Class';
    description?: D365FO_Description;
    methods: Array<D365FO_Method>;
    name: string;
    superclass?: Reference<D365FO_Class>;
    type?: D365FO_ClassType;
}
export declare const D365FO_Class = "D365FO_Class";
export declare function isD365FO_Class(item: unknown): item is D365FO_Class;
export interface D365FO_DataEntity extends AstNode {
    readonly $container: D365FO_Model | D365FO_ModelStore;
    readonly $type: 'D365FO_DataEntity';
    description?: D365FO_Description;
    fields: Array<D365FO_EntityField>;
    label?: D365FO_Label;
    name: string;
    table: Reference<D365FO_Table>;
}
export declare const D365FO_DataEntity = "D365FO_DataEntity";
export declare function isD365FO_DataEntity(item: unknown): item is D365FO_DataEntity;
export interface D365FO_Description extends AstNode {
    readonly $container: D365FO_AOTPackage | D365FO_Class | D365FO_DataEntity | D365FO_Enum | D365FO_Method | D365FO_Model | D365FO_Table | D365FO_TableField;
    readonly $type: 'D365FO_Description';
    text: string;
}
export declare const D365FO_Description = "D365FO_Description";
export declare function isD365FO_Description(item: unknown): item is D365FO_Description;
export interface D365FO_EntityField extends AstNode {
    readonly $container: D365FO_DataEntity;
    readonly $type: 'D365FO_EntityField';
    backingField: Reference<D365FO_TableField>;
    label?: D365FO_Label;
    name: string;
}
export declare const D365FO_EntityField = "D365FO_EntityField";
export declare function isD365FO_EntityField(item: unknown): item is D365FO_EntityField;
export interface D365FO_Enum extends AstNode {
    readonly $container: D365FO_Model | D365FO_ModelStore;
    readonly $type: 'D365FO_Enum';
    description?: D365FO_Description;
    name: string;
    values: Array<D365FO_EnumValue>;
}
export declare const D365FO_Enum = "D365FO_Enum";
export declare function isD365FO_Enum(item: unknown): item is D365FO_Enum;
export interface D365FO_EnumValue extends AstNode {
    readonly $container: D365FO_Enum;
    readonly $type: 'D365FO_EnumValue';
    name: string;
    ordinal?: number;
}
export declare const D365FO_EnumValue = "D365FO_EnumValue";
export declare function isD365FO_EnumValue(item: unknown): item is D365FO_EnumValue;
export interface D365FO_Label extends AstNode {
    readonly $container: D365FO_DataEntity | D365FO_EntityField;
    readonly $type: 'D365FO_Label';
    text: string;
}
export declare const D365FO_Label = "D365FO_Label";
export declare function isD365FO_Label(item: unknown): item is D365FO_Label;
export interface D365FO_Method extends AstNode {
    readonly $container: D365FO_Class | D365FO_Model | D365FO_ModelStore;
    readonly $type: 'D365FO_Method';
    body?: string;
    description?: D365FO_Description;
    name: string;
    parameters: Array<D365FO_MethodParameter>;
    returnType: D365FO_DataType;
    scope?: D365FO_MethodScopeType;
    visibility?: D365FO_MethodVisibility;
}
export declare const D365FO_Method = "D365FO_Method";
export declare function isD365FO_Method(item: unknown): item is D365FO_Method;
export interface D365FO_MethodParameter extends AstNode {
    readonly $container: D365FO_Method;
    readonly $type: 'D365FO_MethodParameter';
    name: string;
    type: D365FO_DataType;
}
export declare const D365FO_MethodParameter = "D365FO_MethodParameter";
export declare function isD365FO_MethodParameter(item: unknown): item is D365FO_MethodParameter;
export interface D365FO_Model extends AstNode {
    readonly $container: D365FO_AOTPackage;
    readonly $type: 'D365FO_Model';
    description?: D365FO_Description;
    elements: Array<D365FO_BusinessLogic | D365FO_DataModel | D365FO_Integration>;
    isSystem: boolean;
    layer?: D365FO_ModelLayer;
    name: string;
}
export declare const D365FO_Model = "D365FO_Model";
export declare function isD365FO_Model(item: unknown): item is D365FO_Model;
export interface D365FO_ModelStore extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'D365FO_ModelStore';
    elements: Array<D365FO_ModelStoreElement>;
}
export declare const D365FO_ModelStore = "D365FO_ModelStore";
export declare function isD365FO_ModelStore(item: unknown): item is D365FO_ModelStore;
export interface D365FO_Publisher extends AstNode {
    readonly $container: D365FO_AOTPackage;
    readonly $type: 'D365FO_Publisher';
    name: string;
}
export declare const D365FO_Publisher = "D365FO_Publisher";
export declare function isD365FO_Publisher(item: unknown): item is D365FO_Publisher;
export interface D365FO_Table extends AstNode {
    readonly $container: D365FO_Model | D365FO_ModelStore;
    readonly $type: 'D365FO_Table';
    description?: D365FO_Description;
    fields: Array<D365FO_TableField>;
    group?: D365FO_TableGroup;
    name: string;
    relations: Array<D365FO_TableRelation>;
}
export declare const D365FO_Table = "D365FO_Table";
export declare function isD365FO_Table(item: unknown): item is D365FO_Table;
export interface D365FO_TableField extends AstNode {
    readonly $container: D365FO_Table;
    readonly $type: 'D365FO_TableField';
    allowEdit: boolean;
    description?: D365FO_Description;
    isKey: boolean;
    mandatory: boolean;
    name: string;
    noEdit: boolean;
    type: D365FO_DataType;
}
export declare const D365FO_TableField = "D365FO_TableField";
export declare function isD365FO_TableField(item: unknown): item is D365FO_TableField;
export interface D365FO_TableRelation extends AstNode {
    readonly $container: D365FO_Table;
    readonly $type: 'D365FO_TableRelation';
    cardinality?: D365FO_RelationCardinality;
    delete?: D365FO_DeleteAction;
    fields: Array<Reference<D365FO_TableField>>;
    name: string;
    target: Reference<D365FO_Table>;
    targetFields: Array<Reference<D365FO_TableField>>;
}
export declare const D365FO_TableRelation = "D365FO_TableRelation";
export declare function isD365FO_TableRelation(item: unknown): item is D365FO_TableRelation;
export interface D365FO_Version extends AstNode {
    readonly $container: D365FO_AOTPackage;
    readonly $type: 'D365FO_Version';
    value: string;
}
export declare const D365FO_Version = "D365FO_Version";
export declare function isD365FO_Version(item: unknown): item is D365FO_Version;
export interface DMN_BusinessKnowledgeModel extends AstNode {
    readonly $container: ArchiverseModel | DMN_Model;
    readonly $type: 'DMN_BusinessKnowledgeModel';
    description?: string;
    name: string;
}
export declare const DMN_BusinessKnowledgeModel = "DMN_BusinessKnowledgeModel";
export declare function isDMN_BusinessKnowledgeModel(item: unknown): item is DMN_BusinessKnowledgeModel;
export interface DMN_Decision extends AstNode {
    readonly $container: ArchiverseModel | DMN_Model;
    readonly $type: 'DMN_Decision';
    description?: string;
    name: string;
}
export declare const DMN_Decision = "DMN_Decision";
export declare function isDMN_Decision(item: unknown): item is DMN_Decision;
export interface DMN_DecisionRequirementsDiagram extends AstNode {
    readonly $container: ArchiverseModel | DMN_Model;
    readonly $type: 'DMN_DecisionRequirementsDiagram';
    description?: string;
    name: string;
}
export declare const DMN_DecisionRequirementsDiagram = "DMN_DecisionRequirementsDiagram";
export declare function isDMN_DecisionRequirementsDiagram(item: unknown): item is DMN_DecisionRequirementsDiagram;
export interface DMN_DecisionTable extends AstNode {
    readonly $container: ArchiverseModel | DMN_Model;
    readonly $type: 'DMN_DecisionTable';
    description?: string;
    hitPolicy?: DMN_HitPolicy;
    name: string;
}
export declare const DMN_DecisionTable = "DMN_DecisionTable";
export declare function isDMN_DecisionTable(item: unknown): item is DMN_DecisionTable;
export interface DMN_Expression extends AstNode {
    readonly $container: DMN_Model;
    readonly $type: 'DMN_Expression';
    body: string;
    language?: DMN_ExpressionLanguage;
}
export declare const DMN_Expression = "DMN_Expression";
export declare function isDMN_Expression(item: unknown): item is DMN_Expression;
export interface DMN_InformationRequirement extends AstNode {
    readonly $container: DMN_Model;
    readonly $type: 'DMN_InformationRequirement';
    description?: string;
    source: Reference<DMN_InputData>;
    target: Reference<DMN_Decision>;
}
export declare const DMN_InformationRequirement = "DMN_InformationRequirement";
export declare function isDMN_InformationRequirement(item: unknown): item is DMN_InformationRequirement;
export interface DMN_InputData extends AstNode {
    readonly $container: ArchiverseModel | DMN_Model;
    readonly $type: 'DMN_InputData';
    description?: string;
    name: string;
}
export declare const DMN_InputData = "DMN_InputData";
export declare function isDMN_InputData(item: unknown): item is DMN_InputData;
export interface DMN_KnowledgeSource extends AstNode {
    readonly $container: ArchiverseModel | DMN_Model;
    readonly $type: 'DMN_KnowledgeSource';
    description?: string;
    name: string;
    sourceType?: string;
}
export declare const DMN_KnowledgeSource = "DMN_KnowledgeSource";
export declare function isDMN_KnowledgeSource(item: unknown): item is DMN_KnowledgeSource;
export interface DMN_Model extends AstNode {
    readonly $type: 'DMN_Model';
    elements: Array<DMN_Element>;
}
export declare const DMN_Model = "DMN_Model";
export declare function isDMN_Model(item: unknown): item is DMN_Model;
export interface FlowRelationship extends AstNode {
    readonly $container: ArchimateModel;
    readonly $type: 'FlowRelationship';
    from: ArchimateRef;
    object?: string;
    to: ArchimateRef;
}
export declare const FlowRelationship = "FlowRelationship";
export declare function isFlowRelationship(item: unknown): item is FlowRelationship;
export interface InfluenceRelationship extends AstNode {
    readonly $container: ArchimateModel;
    readonly $type: 'InfluenceRelationship';
    from: ArchimateRef;
    strength?: string;
    to: ArchimateRef;
}
export declare const InfluenceRelationship = "InfluenceRelationship";
export declare function isInfluenceRelationship(item: unknown): item is InfluenceRelationship;
export interface PMBOK_ActivityAttributes extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_ActivityAttributes';
    description?: string;
    name: string;
}
export declare const PMBOK_ActivityAttributes = "PMBOK_ActivityAttributes";
export declare function isPMBOK_ActivityAttributes(item: unknown): item is PMBOK_ActivityAttributes;
export interface PMBOK_ActivityList extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_ActivityList';
    description?: string;
    name: string;
}
export declare const PMBOK_ActivityList = "PMBOK_ActivityList";
export declare function isPMBOK_ActivityList(item: unknown): item is PMBOK_ActivityList;
export interface PMBOK_Agreements extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_Agreements';
    description?: string;
    name: string;
}
export declare const PMBOK_Agreements = "PMBOK_Agreements";
export declare function isPMBOK_Agreements(item: unknown): item is PMBOK_Agreements;
export interface PMBOK_AssumptionLog extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_AssumptionLog';
    entries: Array<PMBOK_LogEntry>;
    name: string;
}
export declare const PMBOK_AssumptionLog = "PMBOK_AssumptionLog";
export declare function isPMBOK_AssumptionLog(item: unknown): item is PMBOK_AssumptionLog;
export interface PMBOK_BasisOfEstimates extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_BasisOfEstimates';
    description?: string;
    name: string;
}
export declare const PMBOK_BasisOfEstimates = "PMBOK_BasisOfEstimates";
export declare function isPMBOK_BasisOfEstimates(item: unknown): item is PMBOK_BasisOfEstimates;
export interface PMBOK_BidDocuments extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_BidDocuments';
    description?: string;
    name: string;
}
export declare const PMBOK_BidDocuments = "PMBOK_BidDocuments";
export declare function isPMBOK_BidDocuments(item: unknown): item is PMBOK_BidDocuments;
export interface PMBOK_ChangeLog extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_ChangeLog';
    entries: Array<PMBOK_LogEntry>;
    name: string;
}
export declare const PMBOK_ChangeLog = "PMBOK_ChangeLog";
export declare function isPMBOK_ChangeLog(item: unknown): item is PMBOK_ChangeLog;
export interface PMBOK_ChangeManagementPlan extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_ChangeManagementPlan';
    description?: string;
    name: string;
}
export declare const PMBOK_ChangeManagementPlan = "PMBOK_ChangeManagementPlan";
export declare function isPMBOK_ChangeManagementPlan(item: unknown): item is PMBOK_ChangeManagementPlan;
export interface PMBOK_ChangeRequest extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_ChangeRequest';
    description?: string;
    id: string;
    status?: string;
}
export declare const PMBOK_ChangeRequest = "PMBOK_ChangeRequest";
export declare function isPMBOK_ChangeRequest(item: unknown): item is PMBOK_ChangeRequest;
export interface PMBOK_CommunicationsManagementPlan extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_CommunicationsManagementPlan';
    description?: string;
    name: string;
}
export declare const PMBOK_CommunicationsManagementPlan = "PMBOK_CommunicationsManagementPlan";
export declare function isPMBOK_CommunicationsManagementPlan(item: unknown): item is PMBOK_CommunicationsManagementPlan;
export interface PMBOK_ConfigurationManagementPlan extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_ConfigurationManagementPlan';
    description?: string;
    name: string;
}
export declare const PMBOK_ConfigurationManagementPlan = "PMBOK_ConfigurationManagementPlan";
export declare function isPMBOK_ConfigurationManagementPlan(item: unknown): item is PMBOK_ConfigurationManagementPlan;
export interface PMBOK_CostBaseline extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_CostBaseline';
    name: string;
    version?: string;
}
export declare const PMBOK_CostBaseline = "PMBOK_CostBaseline";
export declare function isPMBOK_CostBaseline(item: unknown): item is PMBOK_CostBaseline;
export interface PMBOK_CostEstimates extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_CostEstimates';
    description?: string;
    name: string;
}
export declare const PMBOK_CostEstimates = "PMBOK_CostEstimates";
export declare function isPMBOK_CostEstimates(item: unknown): item is PMBOK_CostEstimates;
export interface PMBOK_CostManagementPlan extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_CostManagementPlan';
    description?: string;
    name: string;
}
export declare const PMBOK_CostManagementPlan = "PMBOK_CostManagementPlan";
export declare function isPMBOK_CostManagementPlan(item: unknown): item is PMBOK_CostManagementPlan;
export interface PMBOK_Deliverable extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_Deliverable';
    acceptanceCriteria?: string;
    description?: string;
    name: string;
}
export declare const PMBOK_Deliverable = "PMBOK_Deliverable";
export declare function isPMBOK_Deliverable(item: unknown): item is PMBOK_Deliverable;
export interface PMBOK_DurationEstimates extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_DurationEstimates';
    description?: string;
    name: string;
}
export declare const PMBOK_DurationEstimates = "PMBOK_DurationEstimates";
export declare function isPMBOK_DurationEstimates(item: unknown): item is PMBOK_DurationEstimates;
export interface PMBOK_EnterpriseEnvironmentalFactors extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_EnterpriseEnvironmentalFactors';
    description?: string;
    name: string;
}
export declare const PMBOK_EnterpriseEnvironmentalFactors = "PMBOK_EnterpriseEnvironmentalFactors";
export declare function isPMBOK_EnterpriseEnvironmentalFactors(item: unknown): item is PMBOK_EnterpriseEnvironmentalFactors;
export interface PMBOK_FinalReport extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_FinalReport';
    description?: string;
    name: string;
}
export declare const PMBOK_FinalReport = "PMBOK_FinalReport";
export declare function isPMBOK_FinalReport(item: unknown): item is PMBOK_FinalReport;
export interface PMBOK_Input extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_Input';
    description?: string;
    name: string;
}
export declare const PMBOK_Input = "PMBOK_Input";
export declare function isPMBOK_Input(item: unknown): item is PMBOK_Input;
export interface PMBOK_IssueLog extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_IssueLog';
    entries: Array<PMBOK_LogEntry>;
    name: string;
}
export declare const PMBOK_IssueLog = "PMBOK_IssueLog";
export declare function isPMBOK_IssueLog(item: unknown): item is PMBOK_IssueLog;
export interface PMBOK_ITTO_Reference extends AstNode {
    readonly $container: PMBOK_ProjectProcess;
    readonly $type: 'PMBOK_ITTO_Reference';
    ref: Reference<PMBOK_ITTO_Element>;
}
export declare const PMBOK_ITTO_Reference = "PMBOK_ITTO_Reference";
export declare function isPMBOK_ITTO_Reference(item: unknown): item is PMBOK_ITTO_Reference;
export interface PMBOK_KnowledgeArea extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_KnowledgeArea';
    description?: string;
    name: string;
    processes: Array<Reference<PMBOK_ProjectProcess>>;
}
export declare const PMBOK_KnowledgeArea = "PMBOK_KnowledgeArea";
export declare function isPMBOK_KnowledgeArea(item: unknown): item is PMBOK_KnowledgeArea;
export interface PMBOK_LessonsLearnedRegister extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_LessonsLearnedRegister';
    entries: Array<PMBOK_LogEntry>;
    name: string;
}
export declare const PMBOK_LessonsLearnedRegister = "PMBOK_LessonsLearnedRegister";
export declare function isPMBOK_LessonsLearnedRegister(item: unknown): item is PMBOK_LessonsLearnedRegister;
export interface PMBOK_LogEntry extends AstNode {
    readonly $container: PMBOK_AssumptionLog | PMBOK_ChangeLog | PMBOK_IssueLog | PMBOK_LessonsLearnedRegister;
    readonly $type: 'PMBOK_LogEntry';
    date?: string;
    description?: string;
    id: string;
    status?: string;
}
export declare const PMBOK_LogEntry = "PMBOK_LogEntry";
export declare function isPMBOK_LogEntry(item: unknown): item is PMBOK_LogEntry;
export interface PMBOK_MakeOrBuyDecisions extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_MakeOrBuyDecisions';
    description?: string;
    name: string;
}
export declare const PMBOK_MakeOrBuyDecisions = "PMBOK_MakeOrBuyDecisions";
export declare function isPMBOK_MakeOrBuyDecisions(item: unknown): item is PMBOK_MakeOrBuyDecisions;
export interface PMBOK_MilestoneList extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_MilestoneList';
    description?: string;
    name: string;
}
export declare const PMBOK_MilestoneList = "PMBOK_MilestoneList";
export declare function isPMBOK_MilestoneList(item: unknown): item is PMBOK_MilestoneList;
export interface PMBOK_OrganizationalProcessAssets extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_OrganizationalProcessAssets';
    description?: string;
    name: string;
}
export declare const PMBOK_OrganizationalProcessAssets = "PMBOK_OrganizationalProcessAssets";
export declare function isPMBOK_OrganizationalProcessAssets(item: unknown): item is PMBOK_OrganizationalProcessAssets;
export interface PMBOK_Output extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_Output';
    description?: string;
    name: string;
}
export declare const PMBOK_Output = "PMBOK_Output";
export declare function isPMBOK_Output(item: unknown): item is PMBOK_Output;
export interface PMBOK_PerformanceMeasurementBaseline extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_PerformanceMeasurementBaseline';
    costBaselineRef?: Reference<PMBOK_CostBaseline>;
    name: string;
    scheduleBaselineRef?: Reference<PMBOK_ScheduleBaseline>;
    scopeBaselineRef?: Reference<PMBOK_ScopeBaseline>;
}
export declare const PMBOK_PerformanceMeasurementBaseline = "PMBOK_PerformanceMeasurementBaseline";
export declare function isPMBOK_PerformanceMeasurementBaseline(item: unknown): item is PMBOK_PerformanceMeasurementBaseline;
export interface PMBOK_ProcessGroup extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_ProcessGroup';
    description?: string;
    name: string;
    processes: Array<Reference<PMBOK_ProjectProcess>>;
}
export declare const PMBOK_ProcessGroup = "PMBOK_ProcessGroup";
export declare function isPMBOK_ProcessGroup(item: unknown): item is PMBOK_ProcessGroup;
export interface PMBOK_ProcurementManagementPlan extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_ProcurementManagementPlan';
    description?: string;
    name: string;
}
export declare const PMBOK_ProcurementManagementPlan = "PMBOK_ProcurementManagementPlan";
export declare function isPMBOK_ProcurementManagementPlan(item: unknown): item is PMBOK_ProcurementManagementPlan;
export interface PMBOK_ProcurementStatementOfWork extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_ProcurementStatementOfWork';
    description?: string;
    name: string;
}
export declare const PMBOK_ProcurementStatementOfWork = "PMBOK_ProcurementStatementOfWork";
export declare function isPMBOK_ProcurementStatementOfWork(item: unknown): item is PMBOK_ProcurementStatementOfWork;
export interface PMBOK_Project extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_Project';
    assumptions?: string;
    charter?: Reference<PMBOK_ProjectCharter>;
    constraints?: string;
    description?: string;
    lifecycleModel?: string;
    managementPlan?: PMBOK_ProjectManagementPlan;
    name: string;
    riskRegister?: Reference<PMBOK_RiskRegister>;
    stakeholderRegister?: Reference<PMBOK_StakeholderRegister>;
}
export declare const PMBOK_Project = "PMBOK_Project";
export declare function isPMBOK_Project(item: unknown): item is PMBOK_Project;
export interface PMBOK_ProjectCalendar extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_ProjectCalendar';
    description?: string;
    name: string;
}
export declare const PMBOK_ProjectCalendar = "PMBOK_ProjectCalendar";
export declare function isPMBOK_ProjectCalendar(item: unknown): item is PMBOK_ProjectCalendar;
export interface PMBOK_ProjectCharter extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_ProjectCharter';
    exitCriteria?: string;
    highLevelRequirements?: string;
    managerRef?: Reference<PMBOK_StakeholderItem>;
    name: string;
    objectives?: string;
    purpose?: string;
    sponsorRef?: Reference<PMBOK_StakeholderItem>;
    successCriteria?: string;
}
export declare const PMBOK_ProjectCharter = "PMBOK_ProjectCharter";
export declare function isPMBOK_ProjectCharter(item: unknown): item is PMBOK_ProjectCharter;
export interface PMBOK_ProjectCommunications extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_ProjectCommunications';
    description?: string;
    format?: string;
    name: string;
    type?: string;
}
export declare const PMBOK_ProjectCommunications = "PMBOK_ProjectCommunications";
export declare function isPMBOK_ProjectCommunications(item: unknown): item is PMBOK_ProjectCommunications;
export interface PMBOK_ProjectFundingRequirements extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_ProjectFundingRequirements';
    description?: string;
    name: string;
}
export declare const PMBOK_ProjectFundingRequirements = "PMBOK_ProjectFundingRequirements";
export declare function isPMBOK_ProjectFundingRequirements(item: unknown): item is PMBOK_ProjectFundingRequirements;
export interface PMBOK_ProjectManagementPlan extends AstNode {
    readonly $container: ArchiverseModel | PMBOK_Project;
    readonly $type: 'PMBOK_ProjectManagementPlan';
    changeManagementPlan?: Reference<PMBOK_ChangeManagementPlan>;
    communicationsManagementPlan?: Reference<PMBOK_CommunicationsManagementPlan>;
    configurationManagementPlan?: Reference<PMBOK_ConfigurationManagementPlan>;
    costBaseline?: Reference<PMBOK_CostBaseline>;
    costManagementPlan?: Reference<PMBOK_CostManagementPlan>;
    name: string;
    performanceMeasurementBaseline?: Reference<PMBOK_PerformanceMeasurementBaseline>;
    procurementManagementPlan?: Reference<PMBOK_ProcurementManagementPlan>;
    qualityManagementPlan?: Reference<PMBOK_QualityManagementPlan>;
    requirementsManagementPlan?: Reference<PMBOK_RequirementsManagementPlan>;
    resourceManagementPlan?: Reference<PMBOK_ResourceManagementPlan>;
    riskManagementPlan?: Reference<PMBOK_RiskManagementPlan>;
    scheduleBaseline?: Reference<PMBOK_ScheduleBaseline>;
    scheduleManagementPlan?: Reference<PMBOK_ScheduleManagementPlan>;
    scopeBaseline?: Reference<PMBOK_ScopeBaseline>;
    scopeManagementPlan?: Reference<PMBOK_ScopeManagementPlan>;
    stakeholderEngagementPlan?: Reference<PMBOK_StakeholderEngagementPlan>;
}
export declare const PMBOK_ProjectManagementPlan = "PMBOK_ProjectManagementPlan";
export declare function isPMBOK_ProjectManagementPlan(item: unknown): item is PMBOK_ProjectManagementPlan;
export interface PMBOK_ProjectProcess extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_ProjectProcess';
    area?: Reference<PMBOK_KnowledgeArea>;
    description?: string;
    group?: Reference<PMBOK_ProcessGroup>;
    inputs: Array<PMBOK_ITTO_Reference>;
    name: string;
    outputs: Array<PMBOK_ITTO_Reference>;
    toolsTechniques: Array<PMBOK_ITTO_Reference>;
}
export declare const PMBOK_ProjectProcess = "PMBOK_ProjectProcess";
export declare function isPMBOK_ProjectProcess(item: unknown): item is PMBOK_ProjectProcess;
export interface PMBOK_ProjectSchedule extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_ProjectSchedule';
    description?: string;
    name: string;
}
export declare const PMBOK_ProjectSchedule = "PMBOK_ProjectSchedule";
export declare function isPMBOK_ProjectSchedule(item: unknown): item is PMBOK_ProjectSchedule;
export interface PMBOK_ProjectScheduleNetworkDiagram extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_ProjectScheduleNetworkDiagram';
    description?: string;
    name: string;
}
export declare const PMBOK_ProjectScheduleNetworkDiagram = "PMBOK_ProjectScheduleNetworkDiagram";
export declare function isPMBOK_ProjectScheduleNetworkDiagram(item: unknown): item is PMBOK_ProjectScheduleNetworkDiagram;
export interface PMBOK_ProjectScopeStatement extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_ProjectScopeStatement';
    acceptanceCriteria?: string;
    description?: string;
    exclusions?: string;
    name: string;
}
export declare const PMBOK_ProjectScopeStatement = "PMBOK_ProjectScopeStatement";
export declare function isPMBOK_ProjectScopeStatement(item: unknown): item is PMBOK_ProjectScopeStatement;
export interface PMBOK_QualityControlMeasurements extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_QualityControlMeasurements';
    description?: string;
    name: string;
}
export declare const PMBOK_QualityControlMeasurements = "PMBOK_QualityControlMeasurements";
export declare function isPMBOK_QualityControlMeasurements(item: unknown): item is PMBOK_QualityControlMeasurements;
export interface PMBOK_QualityManagementPlan extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_QualityManagementPlan';
    description?: string;
    name: string;
}
export declare const PMBOK_QualityManagementPlan = "PMBOK_QualityManagementPlan";
export declare function isPMBOK_QualityManagementPlan(item: unknown): item is PMBOK_QualityManagementPlan;
export interface PMBOK_QualityMetrics extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_QualityMetrics';
    description?: string;
    name: string;
}
export declare const PMBOK_QualityMetrics = "PMBOK_QualityMetrics";
export declare function isPMBOK_QualityMetrics(item: unknown): item is PMBOK_QualityMetrics;
export interface PMBOK_QualityReport extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_QualityReport';
    description?: string;
    name: string;
}
export declare const PMBOK_QualityReport = "PMBOK_QualityReport";
export declare function isPMBOK_QualityReport(item: unknown): item is PMBOK_QualityReport;
export interface PMBOK_RequirementsDocumentation extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_RequirementsDocumentation';
    description?: string;
    name: string;
}
export declare const PMBOK_RequirementsDocumentation = "PMBOK_RequirementsDocumentation";
export declare function isPMBOK_RequirementsDocumentation(item: unknown): item is PMBOK_RequirementsDocumentation;
export interface PMBOK_RequirementsManagementPlan extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_RequirementsManagementPlan';
    description?: string;
    name: string;
}
export declare const PMBOK_RequirementsManagementPlan = "PMBOK_RequirementsManagementPlan";
export declare function isPMBOK_RequirementsManagementPlan(item: unknown): item is PMBOK_RequirementsManagementPlan;
export interface PMBOK_RequirementsTraceabilityMatrix extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_RequirementsTraceabilityMatrix';
    description?: string;
    name: string;
}
export declare const PMBOK_RequirementsTraceabilityMatrix = "PMBOK_RequirementsTraceabilityMatrix";
export declare function isPMBOK_RequirementsTraceabilityMatrix(item: unknown): item is PMBOK_RequirementsTraceabilityMatrix;
export interface PMBOK_ResourceAssignments extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_ResourceAssignments';
    description?: string;
    name: string;
}
export declare const PMBOK_ResourceAssignments = "PMBOK_ResourceAssignments";
export declare function isPMBOK_ResourceAssignments(item: unknown): item is PMBOK_ResourceAssignments;
export interface PMBOK_ResourceBreakdownStructure extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_ResourceBreakdownStructure';
    description?: string;
    name: string;
}
export declare const PMBOK_ResourceBreakdownStructure = "PMBOK_ResourceBreakdownStructure";
export declare function isPMBOK_ResourceBreakdownStructure(item: unknown): item is PMBOK_ResourceBreakdownStructure;
export interface PMBOK_ResourceCalendar extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_ResourceCalendar';
    description?: string;
    name: string;
}
export declare const PMBOK_ResourceCalendar = "PMBOK_ResourceCalendar";
export declare function isPMBOK_ResourceCalendar(item: unknown): item is PMBOK_ResourceCalendar;
export interface PMBOK_ResourceManagementPlan extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_ResourceManagementPlan';
    description?: string;
    name: string;
}
export declare const PMBOK_ResourceManagementPlan = "PMBOK_ResourceManagementPlan";
export declare function isPMBOK_ResourceManagementPlan(item: unknown): item is PMBOK_ResourceManagementPlan;
export interface PMBOK_ResourceRequirements extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_ResourceRequirements';
    description?: string;
    name: string;
}
export declare const PMBOK_ResourceRequirements = "PMBOK_ResourceRequirements";
export declare function isPMBOK_ResourceRequirements(item: unknown): item is PMBOK_ResourceRequirements;
export interface PMBOK_RiskItem extends AstNode {
    readonly $container: PMBOK_RiskRegister;
    readonly $type: 'PMBOK_RiskItem';
    category?: string;
    description?: string;
    id: string;
    impact?: string;
    ownerRef?: Reference<PMBOK_StakeholderItem>;
    probability?: string;
    response?: string;
    status?: string;
    trigger?: string;
}
export declare const PMBOK_RiskItem = "PMBOK_RiskItem";
export declare function isPMBOK_RiskItem(item: unknown): item is PMBOK_RiskItem;
export interface PMBOK_RiskManagementPlan extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_RiskManagementPlan';
    description?: string;
    name: string;
}
export declare const PMBOK_RiskManagementPlan = "PMBOK_RiskManagementPlan";
export declare function isPMBOK_RiskManagementPlan(item: unknown): item is PMBOK_RiskManagementPlan;
export interface PMBOK_RiskRegister extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_RiskRegister';
    name: string;
    risks: Array<PMBOK_RiskItem>;
}
export declare const PMBOK_RiskRegister = "PMBOK_RiskRegister";
export declare function isPMBOK_RiskRegister(item: unknown): item is PMBOK_RiskRegister;
export interface PMBOK_RiskReport extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_RiskReport';
    description?: string;
    name: string;
}
export declare const PMBOK_RiskReport = "PMBOK_RiskReport";
export declare function isPMBOK_RiskReport(item: unknown): item is PMBOK_RiskReport;
export interface PMBOK_ScheduleBaseline extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_ScheduleBaseline';
    name: string;
    version?: string;
}
export declare const PMBOK_ScheduleBaseline = "PMBOK_ScheduleBaseline";
export declare function isPMBOK_ScheduleBaseline(item: unknown): item is PMBOK_ScheduleBaseline;
export interface PMBOK_ScheduleData extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_ScheduleData';
    description?: string;
    name: string;
}
export declare const PMBOK_ScheduleData = "PMBOK_ScheduleData";
export declare function isPMBOK_ScheduleData(item: unknown): item is PMBOK_ScheduleData;
export interface PMBOK_ScheduleManagementPlan extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_ScheduleManagementPlan';
    description?: string;
    name: string;
}
export declare const PMBOK_ScheduleManagementPlan = "PMBOK_ScheduleManagementPlan";
export declare function isPMBOK_ScheduleManagementPlan(item: unknown): item is PMBOK_ScheduleManagementPlan;
export interface PMBOK_ScopeBaseline extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_ScopeBaseline';
    name: string;
    scopeStatement?: Reference<PMBOK_ProjectScopeStatement>;
    wbs?: Reference<PMBOK_WBS>;
    wbsDictionary?: Reference<PMBOK_WBS_Dictionary>;
}
export declare const PMBOK_ScopeBaseline = "PMBOK_ScopeBaseline";
export declare function isPMBOK_ScopeBaseline(item: unknown): item is PMBOK_ScopeBaseline;
export interface PMBOK_ScopeManagementPlan extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_ScopeManagementPlan';
    description?: string;
    name: string;
}
export declare const PMBOK_ScopeManagementPlan = "PMBOK_ScopeManagementPlan";
export declare function isPMBOK_ScopeManagementPlan(item: unknown): item is PMBOK_ScopeManagementPlan;
export interface PMBOK_SourceSelectionCriteria extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_SourceSelectionCriteria';
    description?: string;
    name: string;
}
export declare const PMBOK_SourceSelectionCriteria = "PMBOK_SourceSelectionCriteria";
export declare function isPMBOK_SourceSelectionCriteria(item: unknown): item is PMBOK_SourceSelectionCriteria;
export interface PMBOK_StakeholderEngagementPlan extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_StakeholderEngagementPlan';
    description?: string;
    name: string;
}
export declare const PMBOK_StakeholderEngagementPlan = "PMBOK_StakeholderEngagementPlan";
export declare function isPMBOK_StakeholderEngagementPlan(item: unknown): item is PMBOK_StakeholderEngagementPlan;
export interface PMBOK_StakeholderItem extends AstNode {
    readonly $container: PMBOK_StakeholderRegister;
    readonly $type: 'PMBOK_StakeholderItem';
    assessment?: string;
    category?: string;
    engagementStrategy?: string;
    id: string;
    influence?: string;
    interest?: string;
    name?: string;
    role?: string;
}
export declare const PMBOK_StakeholderItem = "PMBOK_StakeholderItem";
export declare function isPMBOK_StakeholderItem(item: unknown): item is PMBOK_StakeholderItem;
export interface PMBOK_StakeholderRegister extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_StakeholderRegister';
    name: string;
    stakeholders: Array<PMBOK_StakeholderItem>;
}
export declare const PMBOK_StakeholderRegister = "PMBOK_StakeholderRegister";
export declare function isPMBOK_StakeholderRegister(item: unknown): item is PMBOK_StakeholderRegister;
export interface PMBOK_TeamCharter extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_TeamCharter';
    description?: string;
    name: string;
}
export declare const PMBOK_TeamCharter = "PMBOK_TeamCharter";
export declare function isPMBOK_TeamCharter(item: unknown): item is PMBOK_TeamCharter;
export interface PMBOK_TestAndEvaluationDocuments extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_TestAndEvaluationDocuments';
    description?: string;
    name: string;
}
export declare const PMBOK_TestAndEvaluationDocuments = "PMBOK_TestAndEvaluationDocuments";
export declare function isPMBOK_TestAndEvaluationDocuments(item: unknown): item is PMBOK_TestAndEvaluationDocuments;
export interface PMBOK_ToolTechnique extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_ToolTechnique';
    description?: string;
    name: string;
}
export declare const PMBOK_ToolTechnique = "PMBOK_ToolTechnique";
export declare function isPMBOK_ToolTechnique(item: unknown): item is PMBOK_ToolTechnique;
export interface PMBOK_WBS extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_WBS';
    description?: string;
    name: string;
}
export declare const PMBOK_WBS = "PMBOK_WBS";
export declare function isPMBOK_WBS(item: unknown): item is PMBOK_WBS;
export interface PMBOK_WBS_Dictionary extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PMBOK_WBS_Dictionary';
    description?: string;
    name: string;
}
export declare const PMBOK_WBS_Dictionary = "PMBOK_WBS_Dictionary";
export declare function isPMBOK_WBS_Dictionary(item: unknown): item is PMBOK_WBS_Dictionary;
export interface PRINCE2_Activity extends AstNode {
    readonly $container: ArchiverseModel | PRINCE2_ClosingProject | PRINCE2_ControllingStage | PRINCE2_Directing | PRINCE2_Initiating | PRINCE2_ManagingProductDelivery | PRINCE2_ManagingStageBoundary | PRINCE2_StartingUp;
    readonly $type: 'PRINCE2_Activity';
    description?: string;
    inputs: Array<PRINCE2_Ref>;
    name: string;
    outputs: Array<PRINCE2_Ref>;
    responsibleRoles: Array<PRINCE2_Ref>;
}
export declare const PRINCE2_Activity = "PRINCE2_Activity";
export declare function isPRINCE2_Activity(item: unknown): item is PRINCE2_Activity;
export interface PRINCE2_BenefitsManagementApproach extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PRINCE2_BenefitsManagementApproach';
    approvers: Array<PRINCE2_Ref>;
    composition?: string;
    description?: string;
    format?: string;
    name: string;
    owner?: PRINCE2_Ref;
    purpose?: string;
    qualityCriteria?: string;
    state?: string;
}
export declare const PRINCE2_BenefitsManagementApproach = "PRINCE2_BenefitsManagementApproach";
export declare function isPRINCE2_BenefitsManagementApproach(item: unknown): item is PRINCE2_BenefitsManagementApproach;
export interface PRINCE2_BusinessCase extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PRINCE2_BusinessCase';
    approvers: Array<PRINCE2_Ref>;
    businessOptions?: string;
    composition?: string;
    costs?: string;
    description?: string;
    expectedBenefits?: string;
    expectedDisbenefits?: string;
    format?: string;
    investmentAppraisal?: string;
    majorRisks?: string;
    name: string;
    owner?: PRINCE2_Ref;
    purpose?: string;
    qualityCriteria?: string;
    reasons?: string;
    state?: string;
    timescale?: string;
}
export declare const PRINCE2_BusinessCase = "PRINCE2_BusinessCase";
export declare function isPRINCE2_BusinessCase(item: unknown): item is PRINCE2_BusinessCase;
export interface PRINCE2_ChangeControlApproach extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PRINCE2_ChangeControlApproach';
    approvers: Array<PRINCE2_Ref>;
    composition?: string;
    description?: string;
    format?: string;
    name: string;
    owner?: PRINCE2_Ref;
    purpose?: string;
    qualityCriteria?: string;
    state?: string;
}
export declare const PRINCE2_ChangeControlApproach = "PRINCE2_ChangeControlApproach";
export declare function isPRINCE2_ChangeControlApproach(item: unknown): item is PRINCE2_ChangeControlApproach;
export interface PRINCE2_CheckpointReport extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PRINCE2_CheckpointReport';
    approvers: Array<PRINCE2_Ref>;
    composition?: string;
    description?: string;
    format?: string;
    name: string;
    owner?: PRINCE2_Ref;
    purpose?: string;
    qualityCriteria?: string;
    state?: string;
}
export declare const PRINCE2_CheckpointReport = "PRINCE2_CheckpointReport";
export declare function isPRINCE2_CheckpointReport(item: unknown): item is PRINCE2_CheckpointReport;
export interface PRINCE2_ClosingProject extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PRINCE2_ClosingProject';
    activities: Array<PRINCE2_Activity>;
    description?: string;
    inputs: Array<PRINCE2_Ref>;
    name: string;
    outputs: Array<PRINCE2_Ref>;
    purpose?: string;
}
export declare const PRINCE2_ClosingProject = "PRINCE2_ClosingProject";
export declare function isPRINCE2_ClosingProject(item: unknown): item is PRINCE2_ClosingProject;
export interface PRINCE2_CommunicationManagementApproach extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PRINCE2_CommunicationManagementApproach';
    approvers: Array<PRINCE2_Ref>;
    composition?: string;
    description?: string;
    format?: string;
    name: string;
    owner?: PRINCE2_Ref;
    purpose?: string;
    qualityCriteria?: string;
    state?: string;
}
export declare const PRINCE2_CommunicationManagementApproach = "PRINCE2_CommunicationManagementApproach";
export declare function isPRINCE2_CommunicationManagementApproach(item: unknown): item is PRINCE2_CommunicationManagementApproach;
export interface PRINCE2_ConfigurationItemRecord extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PRINCE2_ConfigurationItemRecord';
    approvers: Array<PRINCE2_Ref>;
    composition?: string;
    description?: string;
    format?: string;
    name: string;
    owner?: PRINCE2_Ref;
    purpose?: string;
    qualityCriteria?: string;
    state?: string;
}
export declare const PRINCE2_ConfigurationItemRecord = "PRINCE2_ConfigurationItemRecord";
export declare function isPRINCE2_ConfigurationItemRecord(item: unknown): item is PRINCE2_ConfigurationItemRecord;
export interface PRINCE2_ControllingStage extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PRINCE2_ControllingStage';
    activities: Array<PRINCE2_Activity>;
    description?: string;
    inputs: Array<PRINCE2_Ref>;
    name: string;
    outputs: Array<PRINCE2_Ref>;
    purpose?: string;
}
export declare const PRINCE2_ControllingStage = "PRINCE2_ControllingStage";
export declare function isPRINCE2_ControllingStage(item: unknown): item is PRINCE2_ControllingStage;
export interface PRINCE2_DailyLog extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PRINCE2_DailyLog';
    approvers: Array<PRINCE2_Ref>;
    composition?: string;
    description?: string;
    format?: string;
    name: string;
    owner?: PRINCE2_Ref;
    purpose?: string;
    qualityCriteria?: string;
    state?: string;
}
export declare const PRINCE2_DailyLog = "PRINCE2_DailyLog";
export declare function isPRINCE2_DailyLog(item: unknown): item is PRINCE2_DailyLog;
export interface PRINCE2_Directing extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PRINCE2_Directing';
    activities: Array<PRINCE2_Activity>;
    description?: string;
    inputs: Array<PRINCE2_Ref>;
    name: string;
    outputs: Array<PRINCE2_Ref>;
    purpose?: string;
}
export declare const PRINCE2_Directing = "PRINCE2_Directing";
export declare function isPRINCE2_Directing(item: unknown): item is PRINCE2_Directing;
export interface PRINCE2_EndProjectReport extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PRINCE2_EndProjectReport';
    approvers: Array<PRINCE2_Ref>;
    composition?: string;
    description?: string;
    format?: string;
    name: string;
    owner?: PRINCE2_Ref;
    purpose?: string;
    qualityCriteria?: string;
    state?: string;
}
export declare const PRINCE2_EndProjectReport = "PRINCE2_EndProjectReport";
export declare function isPRINCE2_EndProjectReport(item: unknown): item is PRINCE2_EndProjectReport;
export interface PRINCE2_EndStageReport extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PRINCE2_EndStageReport';
    approvers: Array<PRINCE2_Ref>;
    composition?: string;
    description?: string;
    format?: string;
    name: string;
    owner?: PRINCE2_Ref;
    purpose?: string;
    qualityCriteria?: string;
    state?: string;
}
export declare const PRINCE2_EndStageReport = "PRINCE2_EndStageReport";
export declare function isPRINCE2_EndStageReport(item: unknown): item is PRINCE2_EndStageReport;
export interface PRINCE2_ExceptionPlan extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PRINCE2_ExceptionPlan';
    approvers: Array<PRINCE2_Ref>;
    composition?: string;
    description?: string;
    format?: string;
    name: string;
    owner?: PRINCE2_Ref;
    purpose?: string;
    qualityCriteria?: string;
    state?: string;
}
export declare const PRINCE2_ExceptionPlan = "PRINCE2_ExceptionPlan";
export declare function isPRINCE2_ExceptionPlan(item: unknown): item is PRINCE2_ExceptionPlan;
export interface PRINCE2_ExceptionReport extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PRINCE2_ExceptionReport';
    approvers: Array<PRINCE2_Ref>;
    composition?: string;
    description?: string;
    format?: string;
    name: string;
    owner?: PRINCE2_Ref;
    purpose?: string;
    qualityCriteria?: string;
    state?: string;
}
export declare const PRINCE2_ExceptionReport = "PRINCE2_ExceptionReport";
export declare function isPRINCE2_ExceptionReport(item: unknown): item is PRINCE2_ExceptionReport;
export interface PRINCE2_HighlightReport extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PRINCE2_HighlightReport';
    approvers: Array<PRINCE2_Ref>;
    composition?: string;
    description?: string;
    format?: string;
    name: string;
    owner?: PRINCE2_Ref;
    purpose?: string;
    qualityCriteria?: string;
    state?: string;
}
export declare const PRINCE2_HighlightReport = "PRINCE2_HighlightReport";
export declare function isPRINCE2_HighlightReport(item: unknown): item is PRINCE2_HighlightReport;
export interface PRINCE2_Initiating extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PRINCE2_Initiating';
    activities: Array<PRINCE2_Activity>;
    description?: string;
    inputs: Array<PRINCE2_Ref>;
    name: string;
    outputs: Array<PRINCE2_Ref>;
    purpose?: string;
}
export declare const PRINCE2_Initiating = "PRINCE2_Initiating";
export declare function isPRINCE2_Initiating(item: unknown): item is PRINCE2_Initiating;
export interface PRINCE2_IssueRegister extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PRINCE2_IssueRegister';
    approvers: Array<PRINCE2_Ref>;
    composition?: string;
    description?: string;
    format?: string;
    name: string;
    owner?: PRINCE2_Ref;
    purpose?: string;
    qualityCriteria?: string;
    state?: string;
}
export declare const PRINCE2_IssueRegister = "PRINCE2_IssueRegister";
export declare function isPRINCE2_IssueRegister(item: unknown): item is PRINCE2_IssueRegister;
export interface PRINCE2_IssueReport extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PRINCE2_IssueReport';
    approvers: Array<PRINCE2_Ref>;
    composition?: string;
    description?: string;
    format?: string;
    name: string;
    owner?: PRINCE2_Ref;
    purpose?: string;
    qualityCriteria?: string;
    state?: string;
}
export declare const PRINCE2_IssueReport = "PRINCE2_IssueReport";
export declare function isPRINCE2_IssueReport(item: unknown): item is PRINCE2_IssueReport;
export interface PRINCE2_LessonsLog extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PRINCE2_LessonsLog';
    approvers: Array<PRINCE2_Ref>;
    composition?: string;
    description?: string;
    format?: string;
    name: string;
    owner?: PRINCE2_Ref;
    purpose?: string;
    qualityCriteria?: string;
    state?: string;
}
export declare const PRINCE2_LessonsLog = "PRINCE2_LessonsLog";
export declare function isPRINCE2_LessonsLog(item: unknown): item is PRINCE2_LessonsLog;
export interface PRINCE2_LessonsReport extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PRINCE2_LessonsReport';
    approvers: Array<PRINCE2_Ref>;
    composition?: string;
    description?: string;
    format?: string;
    name: string;
    owner?: PRINCE2_Ref;
    purpose?: string;
    qualityCriteria?: string;
    state?: string;
}
export declare const PRINCE2_LessonsReport = "PRINCE2_LessonsReport";
export declare function isPRINCE2_LessonsReport(item: unknown): item is PRINCE2_LessonsReport;
export interface PRINCE2_ManagingProductDelivery extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PRINCE2_ManagingProductDelivery';
    activities: Array<PRINCE2_Activity>;
    description?: string;
    inputs: Array<PRINCE2_Ref>;
    name: string;
    outputs: Array<PRINCE2_Ref>;
    purpose?: string;
}
export declare const PRINCE2_ManagingProductDelivery = "PRINCE2_ManagingProductDelivery";
export declare function isPRINCE2_ManagingProductDelivery(item: unknown): item is PRINCE2_ManagingProductDelivery;
export interface PRINCE2_ManagingStageBoundary extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PRINCE2_ManagingStageBoundary';
    activities: Array<PRINCE2_Activity>;
    description?: string;
    inputs: Array<PRINCE2_Ref>;
    name: string;
    outputs: Array<PRINCE2_Ref>;
    purpose?: string;
}
export declare const PRINCE2_ManagingStageBoundary = "PRINCE2_ManagingStageBoundary";
export declare function isPRINCE2_ManagingStageBoundary(item: unknown): item is PRINCE2_ManagingStageBoundary;
export interface PRINCE2_PID extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PRINCE2_PID';
    approvers: Array<PRINCE2_Ref>;
    businessCaseRef?: Reference<PRINCE2_BusinessCase>;
    composition?: string;
    description?: string;
    format?: string;
    name: string;
    owner?: PRINCE2_Ref;
    projectPlanRef?: Reference<PRINCE2_ProjectPlan>;
    purpose?: string;
    qualityCriteria?: string;
    state?: string;
}
export declare const PRINCE2_PID = "PRINCE2_PID";
export declare function isPRINCE2_PID(item: unknown): item is PRINCE2_PID;
export interface PRINCE2_Plan extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PRINCE2_Plan';
    approvers: Array<PRINCE2_Ref>;
    composition?: string;
    description?: string;
    format?: string;
    name: string;
    planType?: 'Exception' | 'Project' | 'Stage' | 'Team';
    purpose?: string;
    qualityCriteria?: string;
    state?: string;
}
export declare const PRINCE2_Plan = "PRINCE2_Plan";
export declare function isPRINCE2_Plan(item: unknown): item is PRINCE2_Plan;
export interface PRINCE2_PlanOwnership extends AstNode {
    readonly $type: 'PRINCE2_PlanOwnership';
    assignmentDate?: string;
    ownerRef: Reference<PRINCE2_Role>;
    planRef: Reference<PRINCE2_Plan>;
}
export declare const PRINCE2_PlanOwnership = "PRINCE2_PlanOwnership";
export declare function isPRINCE2_PlanOwnership(item: unknown): item is PRINCE2_PlanOwnership;
export interface PRINCE2_Principle extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PRINCE2_Principle';
    description?: string;
    name: string;
}
export declare const PRINCE2_Principle = "PRINCE2_Principle";
export declare function isPRINCE2_Principle(item: unknown): item is PRINCE2_Principle;
export interface PRINCE2_ProductDescription extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PRINCE2_ProductDescription';
    approvers: Array<PRINCE2_Ref>;
    composition?: string;
    description?: string;
    format?: string;
    name: string;
    owner?: PRINCE2_Ref;
    purpose?: string;
    qualityCriteria?: string;
    state?: string;
}
export declare const PRINCE2_ProductDescription = "PRINCE2_ProductDescription";
export declare function isPRINCE2_ProductDescription(item: unknown): item is PRINCE2_ProductDescription;
export interface PRINCE2_ProductStatusAccount extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PRINCE2_ProductStatusAccount';
    approvers: Array<PRINCE2_Ref>;
    composition?: string;
    description?: string;
    format?: string;
    name: string;
    owner?: PRINCE2_Ref;
    purpose?: string;
    qualityCriteria?: string;
    state?: string;
}
export declare const PRINCE2_ProductStatusAccount = "PRINCE2_ProductStatusAccount";
export declare function isPRINCE2_ProductStatusAccount(item: unknown): item is PRINCE2_ProductStatusAccount;
export interface PRINCE2_ProjectBrief extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PRINCE2_ProjectBrief';
    approvers: Array<PRINCE2_Ref>;
    composition?: string;
    description?: string;
    format?: string;
    name: string;
    owner?: PRINCE2_Ref;
    purpose?: string;
    qualityCriteria?: string;
    state?: string;
}
export declare const PRINCE2_ProjectBrief = "PRINCE2_ProjectBrief";
export declare function isPRINCE2_ProjectBrief(item: unknown): item is PRINCE2_ProjectBrief;
export interface PRINCE2_ProjectPlan extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PRINCE2_ProjectPlan';
    approvers: Array<PRINCE2_Ref>;
    composition?: string;
    description?: string;
    format?: string;
    name: string;
    owner?: PRINCE2_Ref;
    purpose?: string;
    qualityCriteria?: string;
    state?: string;
}
export declare const PRINCE2_ProjectPlan = "PRINCE2_ProjectPlan";
export declare function isPRINCE2_ProjectPlan(item: unknown): item is PRINCE2_ProjectPlan;
export interface PRINCE2_ProjectProductDescription extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PRINCE2_ProjectProductDescription';
    acceptanceCriteria?: string;
    acceptanceMethod?: string;
    acceptanceResponsibilities?: string;
    approvers: Array<PRINCE2_Ref>;
    composition?: string;
    compositionDetails?: string;
    customerQualityExpectations?: string;
    derivation?: string;
    description?: string;
    developmentSkills?: string;
    format?: string;
    name: string;
    overallPurpose?: string;
    owner?: PRINCE2_Ref;
    projectLevelQualityTolerances?: string;
    purpose?: string;
    qualityCriteria?: string;
    state?: string;
}
export declare const PRINCE2_ProjectProductDescription = "PRINCE2_ProjectProductDescription";
export declare function isPRINCE2_ProjectProductDescription(item: unknown): item is PRINCE2_ProjectProductDescription;
export interface PRINCE2_QualityManagementApproach extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PRINCE2_QualityManagementApproach';
    approvers: Array<PRINCE2_Ref>;
    composition?: string;
    description?: string;
    format?: string;
    name: string;
    owner?: PRINCE2_Ref;
    purpose?: string;
    qualityCriteria?: string;
    state?: string;
}
export declare const PRINCE2_QualityManagementApproach = "PRINCE2_QualityManagementApproach";
export declare function isPRINCE2_QualityManagementApproach(item: unknown): item is PRINCE2_QualityManagementApproach;
export interface PRINCE2_QualityRegister extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PRINCE2_QualityRegister';
    approvers: Array<PRINCE2_Ref>;
    composition?: string;
    description?: string;
    format?: string;
    name: string;
    owner?: PRINCE2_Ref;
    purpose?: string;
    qualityCriteria?: string;
    state?: string;
}
export declare const PRINCE2_QualityRegister = "PRINCE2_QualityRegister";
export declare function isPRINCE2_QualityRegister(item: unknown): item is PRINCE2_QualityRegister;
export interface PRINCE2_Ref extends AstNode {
    readonly $container: PRINCE2_Activity | PRINCE2_BenefitsManagementApproach | PRINCE2_BusinessCase | PRINCE2_ChangeControlApproach | PRINCE2_CheckpointReport | PRINCE2_ClosingProject | PRINCE2_CommunicationManagementApproach | PRINCE2_ConfigurationItemRecord | PRINCE2_ControllingStage | PRINCE2_DailyLog | PRINCE2_Directing | PRINCE2_EndProjectReport | PRINCE2_EndStageReport | PRINCE2_ExceptionPlan | PRINCE2_ExceptionReport | PRINCE2_HighlightReport | PRINCE2_Initiating | PRINCE2_IssueRegister | PRINCE2_IssueReport | PRINCE2_LessonsLog | PRINCE2_LessonsReport | PRINCE2_ManagingProductDelivery | PRINCE2_ManagingStageBoundary | PRINCE2_PID | PRINCE2_Plan | PRINCE2_ProductDescription | PRINCE2_ProductStatusAccount | PRINCE2_ProjectBrief | PRINCE2_ProjectPlan | PRINCE2_ProjectProductDescription | PRINCE2_QualityManagementApproach | PRINCE2_QualityRegister | PRINCE2_RiskManagementApproach | PRINCE2_RiskRegister | PRINCE2_RiskReport | PRINCE2_Role | PRINCE2_StagePlan | PRINCE2_StartingUp | PRINCE2_TeamPlan | PRINCE2_Theme | PRINCE2_WorkPackage;
    readonly $type: 'PRINCE2_Ref';
    ref: Reference<PRINCE2_Referenceable>;
}
export declare const PRINCE2_Ref = "PRINCE2_Ref";
export declare function isPRINCE2_Ref(item: unknown): item is PRINCE2_Ref;
export interface PRINCE2_RiskManagementApproach extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PRINCE2_RiskManagementApproach';
    approvers: Array<PRINCE2_Ref>;
    composition?: string;
    description?: string;
    format?: string;
    name: string;
    owner?: PRINCE2_Ref;
    purpose?: string;
    qualityCriteria?: string;
    state?: string;
}
export declare const PRINCE2_RiskManagementApproach = "PRINCE2_RiskManagementApproach";
export declare function isPRINCE2_RiskManagementApproach(item: unknown): item is PRINCE2_RiskManagementApproach;
export interface PRINCE2_RiskRegister extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PRINCE2_RiskRegister';
    approvers: Array<PRINCE2_Ref>;
    composition?: string;
    description?: string;
    format?: string;
    name: string;
    owner?: PRINCE2_Ref;
    purpose?: string;
    qualityCriteria?: string;
    state?: string;
}
export declare const PRINCE2_RiskRegister = "PRINCE2_RiskRegister";
export declare function isPRINCE2_RiskRegister(item: unknown): item is PRINCE2_RiskRegister;
export interface PRINCE2_RiskReport extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PRINCE2_RiskReport';
    approvers: Array<PRINCE2_Ref>;
    composition?: string;
    description?: string;
    format?: string;
    name: string;
    owner?: PRINCE2_Ref;
    purpose?: string;
    qualityCriteria?: string;
    state?: string;
}
export declare const PRINCE2_RiskReport = "PRINCE2_RiskReport";
export declare function isPRINCE2_RiskReport(item: unknown): item is PRINCE2_RiskReport;
export interface PRINCE2_Role extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PRINCE2_Role';
    description?: string;
    name: string;
    reportsToRef?: PRINCE2_Ref;
    responsibilities?: string;
    responsibleForProducts: Array<PRINCE2_Ref>;
    roleType?: 'ChangeAuthority' | 'Executive' | 'ProjectAssurance' | 'ProjectBoard' | 'ProjectManager' | 'ProjectSupport' | 'SeniorSupplier' | 'SeniorUser' | 'TeamManager';
}
export declare const PRINCE2_Role = "PRINCE2_Role";
export declare function isPRINCE2_Role(item: unknown): item is PRINCE2_Role;
export interface PRINCE2_StagePlan extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PRINCE2_StagePlan';
    approvers: Array<PRINCE2_Ref>;
    composition?: string;
    description?: string;
    format?: string;
    name: string;
    owner?: PRINCE2_Ref;
    purpose?: string;
    qualityCriteria?: string;
    state?: string;
}
export declare const PRINCE2_StagePlan = "PRINCE2_StagePlan";
export declare function isPRINCE2_StagePlan(item: unknown): item is PRINCE2_StagePlan;
export interface PRINCE2_StartingUp extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PRINCE2_StartingUp';
    activities: Array<PRINCE2_Activity>;
    description?: string;
    inputs: Array<PRINCE2_Ref>;
    name: string;
    outputs: Array<PRINCE2_Ref>;
    purpose?: string;
}
export declare const PRINCE2_StartingUp = "PRINCE2_StartingUp";
export declare function isPRINCE2_StartingUp(item: unknown): item is PRINCE2_StartingUp;
export interface PRINCE2_Tailoring extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PRINCE2_Tailoring';
    description?: string;
    name: string;
    projectRef?: QualifiedName;
}
export declare const PRINCE2_Tailoring = "PRINCE2_Tailoring";
export declare function isPRINCE2_Tailoring(item: unknown): item is PRINCE2_Tailoring;
export interface PRINCE2_TeamPlan extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PRINCE2_TeamPlan';
    approvers: Array<PRINCE2_Ref>;
    composition?: string;
    description?: string;
    format?: string;
    name: string;
    owner?: PRINCE2_Ref;
    purpose?: string;
    qualityCriteria?: string;
    state?: string;
}
export declare const PRINCE2_TeamPlan = "PRINCE2_TeamPlan";
export declare function isPRINCE2_TeamPlan(item: unknown): item is PRINCE2_TeamPlan;
export interface PRINCE2_Theme extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PRINCE2_Theme';
    description?: string;
    managementProducts: Array<PRINCE2_Ref>;
    name: string;
    purpose?: string;
}
export declare const PRINCE2_Theme = "PRINCE2_Theme";
export declare function isPRINCE2_Theme(item: unknown): item is PRINCE2_Theme;
export interface PRINCE2_WorkPackage extends AstNode {
    readonly $container: ArchiverseModel;
    readonly $type: 'PRINCE2_WorkPackage';
    approvers: Array<PRINCE2_Ref>;
    composition?: string;
    description?: string;
    format?: string;
    name: string;
    owner?: PRINCE2_Ref;
    purpose?: string;
    qualityCriteria?: string;
    state?: string;
}
export declare const PRINCE2_WorkPackage = "PRINCE2_WorkPackage";
export declare function isPRINCE2_WorkPackage(item: unknown): item is PRINCE2_WorkPackage;
export interface RealizationRelationship extends AstNode {
    readonly $container: ArchimateModel;
    readonly $type: 'RealizationRelationship';
    from: ArchimateRef;
    to: ArchimateRef;
}
export declare const RealizationRelationship = "RealizationRelationship";
export declare function isRealizationRelationship(item: unknown): item is RealizationRelationship;
export interface SAP_Association extends AstNode {
    readonly $container: SAP_BusinessObjectNode;
    readonly $type: 'SAP_Association';
    cardinality?: SAP_Cardinality;
    mappings: Array<SAP_FieldMapping>;
    name: string;
    toNode: Reference<SAP_BusinessObjectNode>;
}
export declare const SAP_Association = "SAP_Association";
export declare function isSAP_Association(item: unknown): item is SAP_Association;
export interface SAP_BusinessObject extends AstNode {
    readonly $container: ArchiverseModel | SAP_Model;
    readonly $type: 'SAP_BusinessObject';
    description?: string;
    module?: SAP_Module;
    name: string;
    nodes: Array<SAP_BusinessObjectNode>;
    technicalName?: string;
}
export declare const SAP_BusinessObject = "SAP_BusinessObject";
export declare function isSAP_BusinessObject(item: unknown): item is SAP_BusinessObject;
export interface SAP_BusinessObjectNode extends AstNode {
    readonly $container: SAP_BusinessObject;
    readonly $type: 'SAP_BusinessObjectNode';
    associations: Array<SAP_Association>;
    cardinality?: SAP_Cardinality;
    fields: Array<SAP_Field>;
    name: string;
}
export declare const SAP_BusinessObjectNode = "SAP_BusinessObjectNode";
export declare function isSAP_BusinessObjectNode(item: unknown): item is SAP_BusinessObjectNode;
export interface SAP_BusinessProcess extends AstNode {
    readonly $container: ArchiverseModel | SAP_Model;
    readonly $type: 'SAP_BusinessProcess';
    deploymentUnit?: string;
    description?: string;
    name: string;
    processComponent?: string;
    steps: Array<SAP_ProcessStep>;
}
export declare const SAP_BusinessProcess = "SAP_BusinessProcess";
export declare function isSAP_BusinessProcess(item: unknown): item is SAP_BusinessProcess;
export interface SAP_Field extends AstNode {
    readonly $container: SAP_BusinessObjectNode;
    readonly $type: 'SAP_Field';
    description?: string;
    fieldType: SAP_FieldType;
    isKey: boolean;
    length?: number;
    mandatory: boolean;
    name: string;
    searchHelp?: string;
    valueHelp?: Reference<SAP_ValueHelp>;
}
export declare const SAP_Field = "SAP_Field";
export declare function isSAP_Field(item: unknown): item is SAP_Field;
export interface SAP_FieldMapping extends AstNode {
    readonly $container: SAP_Association;
    readonly $type: 'SAP_FieldMapping';
    sourceField: Reference<SAP_Field>;
    targetField: Reference<SAP_Field>;
}
export declare const SAP_FieldMapping = "SAP_FieldMapping";
export declare function isSAP_FieldMapping(item: unknown): item is SAP_FieldMapping;
export interface SAP_Message extends AstNode {
    readonly $container: ArchiverseModel | SAP_Model;
    readonly $type: 'SAP_Message';
    description?: string;
    name: string;
    namespace?: string;
    typeDefinition?: string;
}
export declare const SAP_Message = "SAP_Message";
export declare function isSAP_Message(item: unknown): item is SAP_Message;
export interface SAP_Model extends AstNode {
    readonly $type: 'SAP_Model';
    elements: Array<SAP_Element>;
}
export declare const SAP_Model = "SAP_Model";
export declare function isSAP_Model(item: unknown): item is SAP_Model;
export interface SAP_Operation extends AstNode {
    readonly $container: SAP_Service;
    readonly $type: 'SAP_Operation';
    description?: string;
    error?: Reference<SAP_Message>;
    input?: Reference<SAP_Message>;
    name: string;
    output?: Reference<SAP_Message>;
}
export declare const SAP_Operation = "SAP_Operation";
export declare function isSAP_Operation(item: unknown): item is SAP_Operation;
export interface SAP_ProcessStep extends AstNode {
    readonly $container: SAP_BusinessProcess;
    readonly $type: 'SAP_ProcessStep';
    businessObject?: Reference<SAP_BusinessObject>;
    description?: string;
    name: string;
    predecessor?: Reference<SAP_ProcessStep>;
    service?: Reference<SAP_Service>;
    stepType?: SAP_StepType;
}
export declare const SAP_ProcessStep = "SAP_ProcessStep";
export declare function isSAP_ProcessStep(item: unknown): item is SAP_ProcessStep;
export interface SAP_Service extends AstNode {
    readonly $container: ArchiverseModel | SAP_Model;
    readonly $type: 'SAP_Service';
    description?: string;
    name: string;
    namespace?: string;
    operations: Array<SAP_Operation>;
}
export declare const SAP_Service = "SAP_Service";
export declare function isSAP_Service(item: unknown): item is SAP_Service;
export interface SAP_Table extends AstNode {
    readonly $container: ArchiverseModel | SAP_Model;
    readonly $type: 'SAP_Table';
    deliveryClass?: SAP_DeliveryClass;
    description?: string;
    fields: Array<SAP_TableField>;
    keys: Array<SAP_TableKey>;
    name: string;
    technicalName?: string;
}
export declare const SAP_Table = "SAP_Table";
export declare function isSAP_Table(item: unknown): item is SAP_Table;
export interface SAP_TableField extends AstNode {
    readonly $container: SAP_Table;
    readonly $type: 'SAP_TableField';
    dataElement?: string;
    description?: string;
    isKey: boolean;
    length?: number;
    name: string;
    notNull: boolean;
    type?: SAP_DataType;
}
export declare const SAP_TableField = "SAP_TableField";
export declare function isSAP_TableField(item: unknown): item is SAP_TableField;
export interface SAP_TableKey extends AstNode {
    readonly $container: SAP_Table;
    readonly $type: 'SAP_TableKey';
    fields: Array<Reference<SAP_TableField>>;
    name: string;
}
export declare const SAP_TableKey = "SAP_TableKey";
export declare function isSAP_TableKey(item: unknown): item is SAP_TableKey;
export interface SAP_ValueHelp extends AstNode {
    readonly $container: SAP_Model;
    readonly $type: 'SAP_ValueHelp';
    description?: string;
    entity?: string;
    fields: Array<Reference<SAP_Field>>;
    name: string;
    sourceType?: SAP_ValueHelpSourceType;
}
export declare const SAP_ValueHelp = "SAP_ValueHelp";
export declare function isSAP_ValueHelp(item: unknown): item is SAP_ValueHelp;
export interface SBVR_BusinessRule extends AstNode {
    readonly $container: ArchiverseModel | SBVR_Model;
    readonly $type: 'SBVR_BusinessRule';
    definition?: string;
    description?: string;
    formulation?: string;
    modality?: SBVR_Modality;
    name: string;
    reference?: Reference<SBVR_FactType>;
    ruleType?: SBVR_RuleType;
}
export declare const SBVR_BusinessRule = "SBVR_BusinessRule";
export declare function isSBVR_BusinessRule(item: unknown): item is SBVR_BusinessRule;
export interface SBVR_BusinessVocabulary extends AstNode {
    readonly $container: ArchiverseModel | SBVR_Model;
    readonly $type: 'SBVR_BusinessVocabulary';
    concepts: Array<SBVR_Concept>;
    description?: string;
    factTypes: Array<SBVR_FactType>;
    name: string;
    objectTypes: Array<SBVR_ObjectType>;
}
export declare const SBVR_BusinessVocabulary = "SBVR_BusinessVocabulary";
export declare function isSBVR_BusinessVocabulary(item: unknown): item is SBVR_BusinessVocabulary;
export interface SBVR_Characteristic extends AstNode {
    readonly $container: SBVR_ObjectType;
    readonly $type: 'SBVR_Characteristic';
    description?: string;
    fact: Reference<SBVR_FactType>;
    name: string;
}
export declare const SBVR_Characteristic = "SBVR_Characteristic";
export declare function isSBVR_Characteristic(item: unknown): item is SBVR_Characteristic;
export interface SBVR_Concept extends AstNode {
    readonly $container: ArchiverseModel | SBVR_BusinessVocabulary | SBVR_Model;
    readonly $type: 'SBVR_Concept';
    conceptType?: SBVR_ConceptType;
    definition?: string;
    description?: string;
    examples: Array<string>;
    name: string;
    synonyms: Array<string>;
}
export declare const SBVR_Concept = "SBVR_Concept";
export declare function isSBVR_Concept(item: unknown): item is SBVR_Concept;
export interface SBVR_FactType extends AstNode {
    readonly $container: ArchiverseModel | SBVR_BusinessVocabulary | SBVR_Model;
    readonly $type: 'SBVR_FactType';
    definition?: string;
    description?: string;
    examples: Array<string>;
    name: string;
    roles: Array<SBVR_FactTypeRole>;
}
export declare const SBVR_FactType = "SBVR_FactType";
export declare function isSBVR_FactType(item: unknown): item is SBVR_FactType;
export interface SBVR_FactTypeRole extends AstNode {
    readonly $container: SBVR_FactType;
    readonly $type: 'SBVR_FactTypeRole';
    concept: Reference<SBVR_Concept>;
    description?: string;
    name: string;
}
export declare const SBVR_FactTypeRole = "SBVR_FactTypeRole";
export declare function isSBVR_FactTypeRole(item: unknown): item is SBVR_FactTypeRole;
export interface SBVR_Model extends AstNode {
    readonly $type: 'SBVR_Model';
    elements: Array<SBVR_Element>;
}
export declare const SBVR_Model = "SBVR_Model";
export declare function isSBVR_Model(item: unknown): item is SBVR_Model;
export interface SBVR_ObjectType extends AstNode {
    readonly $container: ArchiverseModel | SBVR_BusinessVocabulary | SBVR_Model;
    readonly $type: 'SBVR_ObjectType';
    characteristics: Array<SBVR_Characteristic>;
    definition?: string;
    description?: string;
    general?: Reference<SBVR_Concept>;
    name: string;
}
export declare const SBVR_ObjectType = "SBVR_ObjectType";
export declare function isSBVR_ObjectType(item: unknown): item is SBVR_ObjectType;
export interface ServingRelationship extends AstNode {
    readonly $container: ArchimateModel;
    readonly $type: 'ServingRelationship';
    from: ArchimateRef;
    to: ArchimateRef;
}
export declare const ServingRelationship = "ServingRelationship";
export declare function isServingRelationship(item: unknown): item is ServingRelationship;
export interface SpecializationRelationship extends AstNode {
    readonly $container: ArchimateModel;
    readonly $type: 'SpecializationRelationship';
    from: ArchimateRef;
    to: ArchimateRef;
}
export declare const SpecializationRelationship = "SpecializationRelationship";
export declare function isSpecializationRelationship(item: unknown): item is SpecializationRelationship;
export interface TOGAF_ADMPhase extends AstNode {
    readonly $container: ArchiverseModel | TOGAF_Model;
    readonly $type: 'TOGAF_ADMPhase';
    description?: string;
    inputs: Array<string>;
    name: string;
    objectives: Array<string>;
    outputs: Array<string>;
    phaseType?: TOGAF_ADMPhaseType;
    steps: Array<TOGAF_ADMStep>;
}
export declare const TOGAF_ADMPhase = "TOGAF_ADMPhase";
export declare function isTOGAF_ADMPhase(item: unknown): item is TOGAF_ADMPhase;
export interface TOGAF_ADMStep extends AstNode {
    readonly $container: TOGAF_ADMPhase;
    readonly $type: 'TOGAF_ADMStep';
    activities: Array<string>;
    description?: string;
    name: string;
    stepNumber?: number;
}
export declare const TOGAF_ADMStep = "TOGAF_ADMStep";
export declare function isTOGAF_ADMStep(item: unknown): item is TOGAF_ADMStep;
export interface TOGAF_Architecture extends AstNode {
    readonly $container: ArchiverseModel | TOGAF_Model;
    readonly $type: 'TOGAF_Architecture';
    architectureType?: TOGAF_ArchitectureType;
    buildingBlocks: Array<TOGAF_ArchitectureBuilding>;
    description?: string;
    name: string;
    principles: Array<TOGAF_ArchitecturePrinciple>;
    requirements: Array<TOGAF_ArchitectureRequirement>;
    version?: string;
    viewpoints: Array<TOGAF_ArchitectureViewpoint>;
}
export declare const TOGAF_Architecture = "TOGAF_Architecture";
export declare function isTOGAF_Architecture(item: unknown): item is TOGAF_Architecture;
export interface TOGAF_ArchitectureBuilding extends AstNode {
    readonly $container: ArchiverseModel | TOGAF_Architecture | TOGAF_Model;
    readonly $type: 'TOGAF_ArchitectureBuilding';
    capabilities: Array<string>;
    description?: string;
    functions: Array<string>;
    name: string;
    relationships: Array<TOGAF_ArchitectureRelationship>;
    type?: TOGAF_BuildingBlockType;
}
export declare const TOGAF_ArchitectureBuilding = "TOGAF_ArchitectureBuilding";
export declare function isTOGAF_ArchitectureBuilding(item: unknown): item is TOGAF_ArchitectureBuilding;
export interface TOGAF_ArchitectureGap extends AstNode {
    readonly $container: TOGAF_Model;
    readonly $type: 'TOGAF_ArchitectureGap';
    analysis?: string;
    baselineComponent?: string;
    description?: string;
    gapType?: TOGAF_GapType;
    name: string;
    targetComponent?: string;
}
export declare const TOGAF_ArchitectureGap = "TOGAF_ArchitectureGap";
export declare function isTOGAF_ArchitectureGap(item: unknown): item is TOGAF_ArchitectureGap;
export interface TOGAF_ArchitecturePrinciple extends AstNode {
    readonly $container: ArchiverseModel | TOGAF_Architecture | TOGAF_Model;
    readonly $type: 'TOGAF_ArchitecturePrinciple';
    description?: string;
    domain?: TOGAF_ArchitectureType;
    implications: Array<string>;
    keyMetrics: Array<string>;
    name: string;
    rationale?: string;
}
export declare const TOGAF_ArchitecturePrinciple = "TOGAF_ArchitecturePrinciple";
export declare function isTOGAF_ArchitecturePrinciple(item: unknown): item is TOGAF_ArchitecturePrinciple;
export interface TOGAF_ArchitectureRelationship extends AstNode {
    readonly $container: TOGAF_ArchitectureBuilding;
    readonly $type: 'TOGAF_ArchitectureRelationship';
    description?: string;
    relationType?: TOGAF_RelationshipType;
    source: Reference<TOGAF_ArchitectureBuilding>;
    target: Reference<TOGAF_ArchitectureBuilding>;
}
export declare const TOGAF_ArchitectureRelationship = "TOGAF_ArchitectureRelationship";
export declare function isTOGAF_ArchitectureRelationship(item: unknown): item is TOGAF_ArchitectureRelationship;
export interface TOGAF_ArchitectureRequirement extends AstNode {
    readonly $container: ArchiverseModel | TOGAF_Architecture | TOGAF_Model;
    readonly $type: 'TOGAF_ArchitectureRequirement';
    description?: string;
    name: string;
    priority?: TOGAF_PriorityLevel;
    rationale?: string;
    source?: Reference<TOGAF_Stakeholder>;
    statement?: string;
}
export declare const TOGAF_ArchitectureRequirement = "TOGAF_ArchitectureRequirement";
export declare function isTOGAF_ArchitectureRequirement(item: unknown): item is TOGAF_ArchitectureRequirement;
export interface TOGAF_ArchitectureViewpoint extends AstNode {
    readonly $container: ArchiverseModel | TOGAF_Architecture | TOGAF_Model;
    readonly $type: 'TOGAF_ArchitectureViewpoint';
    concerns: Array<string>;
    description?: string;
    framework?: string;
    name: string;
    purpose?: string;
    stakeholders: Array<Reference<TOGAF_Stakeholder>>;
}
export declare const TOGAF_ArchitectureViewpoint = "TOGAF_ArchitectureViewpoint";
export declare function isTOGAF_ArchitectureViewpoint(item: unknown): item is TOGAF_ArchitectureViewpoint;
export interface TOGAF_ArchitectureVision extends AstNode {
    readonly $container: ArchiverseModel | TOGAF_Model;
    readonly $type: 'TOGAF_ArchitectureVision';
    concernStatements: Array<string>;
    description?: string;
    name: string;
    objectives: Array<string>;
    stakeholders: Array<Reference<TOGAF_Stakeholder>>;
    targetState?: string;
}
export declare const TOGAF_ArchitectureVision = "TOGAF_ArchitectureVision";
export declare function isTOGAF_ArchitectureVision(item: unknown): item is TOGAF_ArchitectureVision;
export interface TOGAF_Implementation extends AstNode {
    readonly $container: TOGAF_Model;
    readonly $type: 'TOGAF_Implementation';
    buildingBlocks: Array<Reference<TOGAF_ArchitectureBuilding>>;
    description?: string;
    migrationApproach?: string;
    name: string;
    workPackages: Array<Reference<TOGAF_WorkPackage>>;
}
export declare const TOGAF_Implementation = "TOGAF_Implementation";
export declare function isTOGAF_Implementation(item: unknown): item is TOGAF_Implementation;
export interface TOGAF_Model extends AstNode {
    readonly $type: 'TOGAF_Model';
    elements: Array<TOGAF_Element>;
}
export declare const TOGAF_Model = "TOGAF_Model";
export declare function isTOGAF_Model(item: unknown): item is TOGAF_Model;
export interface TOGAF_Stakeholder extends AstNode {
    readonly $container: ArchiverseModel | TOGAF_Model;
    readonly $type: 'TOGAF_Stakeholder';
    class?: TOGAF_StakeholderClass;
    concerns: Array<string>;
    description?: string;
    name: string;
    role?: string;
    viewpoints: Array<Reference<TOGAF_ArchitectureViewpoint>>;
}
export declare const TOGAF_Stakeholder = "TOGAF_Stakeholder";
export declare function isTOGAF_Stakeholder(item: unknown): item is TOGAF_Stakeholder;
export interface TOGAF_WorkPackage extends AstNode {
    readonly $container: TOGAF_Model;
    readonly $type: 'TOGAF_WorkPackage';
    deliverables: Array<string>;
    description?: string;
    issues: Array<string>;
    name: string;
    priority?: TOGAF_PriorityLevel;
    resources: Array<string>;
    risks: Array<string>;
}
export declare const TOGAF_WorkPackage = "TOGAF_WorkPackage";
export declare function isTOGAF_WorkPackage(item: unknown): item is TOGAF_WorkPackage;
export interface TriggeringRelationship extends AstNode {
    readonly $container: ArchimateModel;
    readonly $type: 'TriggeringRelationship';
    from: ArchimateRef;
    to: ArchimateRef;
}
export declare const TriggeringRelationship = "TriggeringRelationship";
export declare function isTriggeringRelationship(item: unknown): item is TriggeringRelationship;
export interface UMLActivityDiagram extends AstNode {
    readonly $container: ArchiverseModel | UMLModel;
    readonly $type: 'UMLActivityDiagram';
    description?: string;
    flows: Array<UMLActivityFlow>;
    name: string;
    nodes: Array<UMLActivityNode>;
}
export declare const UMLActivityDiagram = "UMLActivityDiagram";
export declare function isUMLActivityDiagram(item: unknown): item is UMLActivityDiagram;
export interface UMLActivityFlow extends AstNode {
    readonly $container: UMLActivityDiagram;
    readonly $type: 'UMLActivityFlow';
    description?: string;
    from: Reference<UMLActivityNode>;
    guard?: string;
    label?: string;
    to: Reference<UMLActivityNode>;
}
export declare const UMLActivityFlow = "UMLActivityFlow";
export declare function isUMLActivityFlow(item: unknown): item is UMLActivityFlow;
export interface UMLActivityNode extends AstNode {
    readonly $container: UMLActivityDiagram;
    readonly $type: 'UMLActivityNode';
    action?: string;
    description?: string;
    guard?: string;
    name: string;
    nodeType: UMLActivityNodeType;
}
export declare const UMLActivityNode = "UMLActivityNode";
export declare function isUMLActivityNode(item: unknown): item is UMLActivityNode;
export interface UMLAttribute extends AstNode {
    readonly $container: UMLClass;
    readonly $type: 'UMLAttribute';
    defaultValue?: string;
    description?: string;
    name: string;
    nullable: boolean;
    readonly: boolean;
    type: UMLAttributeType;
    unique: boolean;
    visibility?: UMLVisibility;
}
export declare const UMLAttribute = "UMLAttribute";
export declare function isUMLAttribute(item: unknown): item is UMLAttribute;
export interface UMLClass extends AstNode {
    readonly $container: UMLClassDiagram;
    readonly $type: 'UMLClass';
    attributes: Array<UMLAttribute>;
    description?: string;
    extends?: Reference<UMLClass>;
    implements: Array<Reference<UMLInterface>>;
    isAbstract: boolean;
    methods: Array<UMLMethod>;
    name: string;
}
export declare const UMLClass = "UMLClass";
export declare function isUMLClass(item: unknown): item is UMLClass;
export interface UMLClassDiagram extends AstNode {
    readonly $container: ArchiverseModel | UMLModel;
    readonly $type: 'UMLClassDiagram';
    description?: string;
    elements: Array<UMLClass | UMLEnum | UMLInterface | UMLRelationship>;
    name: string;
    namespace?: string;
}
export declare const UMLClassDiagram = "UMLClassDiagram";
export declare function isUMLClassDiagram(item: unknown): item is UMLClassDiagram;
export interface UMLComponent extends AstNode {
    readonly $container: UMLComponentDiagram;
    readonly $type: 'UMLComponent';
    description?: string;
    name: string;
    provides: Array<Reference<UMLComponentInterface>>;
    requires: Array<Reference<UMLComponentInterface>>;
}
export declare const UMLComponent = "UMLComponent";
export declare function isUMLComponent(item: unknown): item is UMLComponent;
export interface UMLComponentDependency extends AstNode {
    readonly $container: UMLComponentDiagram;
    readonly $type: 'UMLComponentDependency';
    description?: string;
    from: Reference<UMLComponent>;
    label?: string;
    to: Reference<UMLComponent>;
}
export declare const UMLComponentDependency = "UMLComponentDependency";
export declare function isUMLComponentDependency(item: unknown): item is UMLComponentDependency;
export interface UMLComponentDiagram extends AstNode {
    readonly $container: ArchiverseModel | UMLModel;
    readonly $type: 'UMLComponentDiagram';
    components: Array<UMLComponent>;
    dependencies: Array<UMLComponentDependency>;
    description?: string;
    interfaces: Array<UMLComponentInterface>;
    name: string;
}
export declare const UMLComponentDiagram = "UMLComponentDiagram";
export declare function isUMLComponentDiagram(item: unknown): item is UMLComponentDiagram;
export interface UMLComponentInterface extends AstNode {
    readonly $container: UMLComponentDiagram;
    readonly $type: 'UMLComponentInterface';
    description?: string;
    name: string;
    operations: Array<UMLComponentOperation>;
}
export declare const UMLComponentInterface = "UMLComponentInterface";
export declare function isUMLComponentInterface(item: unknown): item is UMLComponentInterface;
export interface UMLComponentOperation extends AstNode {
    readonly $container: UMLComponentInterface;
    readonly $type: 'UMLComponentOperation';
    description?: string;
    name: string;
    parameters: Array<UMLParameter>;
    returnType?: UMLAttributeType;
}
export declare const UMLComponentOperation = "UMLComponentOperation";
export declare function isUMLComponentOperation(item: unknown): item is UMLComponentOperation;
export interface UMLEnum extends AstNode {
    readonly $container: UMLClassDiagram;
    readonly $type: 'UMLEnum';
    description?: string;
    name: string;
    values: Array<UMLEnumValue>;
}
export declare const UMLEnum = "UMLEnum";
export declare function isUMLEnum(item: unknown): item is UMLEnum;
export interface UMLEnumValue extends AstNode {
    readonly $container: UMLEnum;
    readonly $type: 'UMLEnumValue';
    description?: string;
    name: string;
}
export declare const UMLEnumValue = "UMLEnumValue";
export declare function isUMLEnumValue(item: unknown): item is UMLEnumValue;
export interface UMLInterface extends AstNode {
    readonly $container: UMLClassDiagram;
    readonly $type: 'UMLInterface';
    description?: string;
    extends: Array<Reference<UMLInterface>>;
    methods: Array<UMLMethod>;
    name: string;
}
export declare const UMLInterface = "UMLInterface";
export declare function isUMLInterface(item: unknown): item is UMLInterface;
export interface UMLLifeline extends AstNode {
    readonly $container: UMLSequenceDiagram;
    readonly $type: 'UMLLifeline';
    description?: string;
    name: string;
    represents?: Reference<UMLClass>;
}
export declare const UMLLifeline = "UMLLifeline";
export declare function isUMLLifeline(item: unknown): item is UMLLifeline;
export interface UMLMessage extends AstNode {
    readonly $container: UMLSequenceDiagram;
    readonly $type: 'UMLMessage';
    description?: string;
    from: Reference<UMLLifeline>;
    messageType?: UMLMessageType;
    method?: Reference<UMLMethod>;
    name: string;
    to: Reference<UMLLifeline>;
}
export declare const UMLMessage = "UMLMessage";
export declare function isUMLMessage(item: unknown): item is UMLMessage;
export interface UMLMethod extends AstNode {
    readonly $container: UMLClass | UMLInterface;
    readonly $type: 'UMLMethod';
    description?: string;
    isAbstract: boolean;
    isStatic: boolean;
    name: string;
    parameters: Array<UMLParameter>;
    returnType?: UMLAttributeType;
    visibility?: UMLVisibility;
}
export declare const UMLMethod = "UMLMethod";
export declare function isUMLMethod(item: unknown): item is UMLMethod;
export interface UMLModel extends AstNode {
    readonly $type: 'UMLModel';
    elements: Array<UMLElement>;
}
export declare const UMLModel = "UMLModel";
export declare function isUMLModel(item: unknown): item is UMLModel;
export interface UMLParameter extends AstNode {
    readonly $container: UMLComponentOperation | UMLMethod;
    readonly $type: 'UMLParameter';
    name: string;
    type: UMLAttributeType;
}
export declare const UMLParameter = "UMLParameter";
export declare function isUMLParameter(item: unknown): item is UMLParameter;
export interface UMLRelationship extends AstNode {
    readonly $container: UMLClassDiagram;
    readonly $type: 'UMLRelationship';
    description?: string;
    name?: string;
    source: Reference<UMLClass>;
    sourceMultiplicity?: UMLMultiplicity;
    sourceRole?: string;
    target: Reference<UMLClass>;
    targetMultiplicity?: UMLMultiplicity;
    targetRole?: string;
    type: UMLRelationshipType;
}
export declare const UMLRelationship = "UMLRelationship";
export declare function isUMLRelationship(item: unknown): item is UMLRelationship;
export interface UMLSequenceDiagram extends AstNode {
    readonly $container: ArchiverseModel | UMLModel;
    readonly $type: 'UMLSequenceDiagram';
    description?: string;
    lifelines: Array<UMLLifeline>;
    messages: Array<UMLMessage>;
    name: string;
}
export declare const UMLSequenceDiagram = "UMLSequenceDiagram";
export declare function isUMLSequenceDiagram(item: unknown): item is UMLSequenceDiagram;
export interface UMLState extends AstNode {
    readonly $container: UMLStateDiagram;
    readonly $type: 'UMLState';
    description?: string;
    entryAction?: string;
    exitAction?: string;
    isFinal: boolean;
    isInitial: boolean;
    name: string;
}
export declare const UMLState = "UMLState";
export declare function isUMLState(item: unknown): item is UMLState;
export interface UMLStateDiagram extends AstNode {
    readonly $container: ArchiverseModel | UMLModel;
    readonly $type: 'UMLStateDiagram';
    description?: string;
    name: string;
    states: Array<UMLState>;
    targetClass?: Reference<UMLClass>;
    transitions: Array<UMLTransition>;
}
export declare const UMLStateDiagram = "UMLStateDiagram";
export declare function isUMLStateDiagram(item: unknown): item is UMLStateDiagram;
export interface UMLTransition extends AstNode {
    readonly $container: UMLStateDiagram;
    readonly $type: 'UMLTransition';
    action?: string;
    description?: string;
    event?: string;
    from: Reference<UMLState>;
    guard?: string;
    to: Reference<UMLState>;
}
export declare const UMLTransition = "UMLTransition";
export declare function isUMLTransition(item: unknown): item is UMLTransition;
export interface VDML_Activity extends AstNode {
    readonly $container: ArchiverseModel | VDML_Capability | VDML_Model;
    readonly $type: 'VDML_Activity';
    deliveredValue?: VDML_DeliveredValue;
    description?: string;
    duration?: number;
    inputs: Array<Reference<VDML_Store>>;
    name: string;
    outputs: Array<Reference<VDML_Store>>;
}
export declare const VDML_Activity = "VDML_Activity";
export declare function isVDML_Activity(item: unknown): item is VDML_Activity;
export interface VDML_BusinessNetwork extends AstNode {
    readonly $container: ArchiverseModel | VDML_Model;
    readonly $type: 'VDML_BusinessNetwork';
    communities: Array<VDML_Community>;
    description?: string;
    name: string;
    participants: Array<VDML_Participant>;
    valuePropositions: Array<VDML_ValueProposition>;
}
export declare const VDML_BusinessNetwork = "VDML_BusinessNetwork";
export declare function isVDML_BusinessNetwork(item: unknown): item is VDML_BusinessNetwork;
export interface VDML_Capability extends AstNode {
    readonly $container: ArchiverseModel | VDML_Community | VDML_Model;
    readonly $type: 'VDML_Capability';
    activities: Array<VDML_Activity>;
    description?: string;
    level?: number;
    name: string;
    resources: Array<VDML_Resource>;
}
export declare const VDML_Capability = "VDML_Capability";
export declare function isVDML_Capability(item: unknown): item is VDML_Capability;
export interface VDML_Collaboration extends AstNode {
    readonly $container: VDML_Model;
    readonly $type: 'VDML_Collaboration';
    activities: Array<Reference<VDML_Activity>>;
    description?: string;
    name: string;
    participants: Array<Reference<VDML_Participant>>;
}
export declare const VDML_Collaboration = "VDML_Collaboration";
export declare function isVDML_Collaboration(item: unknown): item is VDML_Collaboration;
export interface VDML_Community extends AstNode {
    readonly $container: ArchiverseModel | VDML_BusinessNetwork;
    readonly $type: 'VDML_Community';
    capabilities: Array<VDML_Capability>;
    description?: string;
    name: string;
    roles: Array<VDML_Role>;
}
export declare const VDML_Community = "VDML_Community";
export declare function isVDML_Community(item: unknown): item is VDML_Community;
export interface VDML_DeliveredValue extends AstNode {
    readonly $container: VDML_Activity;
    readonly $type: 'VDML_DeliveredValue';
    formula?: string;
    valuation?: string;
}
export declare const VDML_DeliveredValue = "VDML_DeliveredValue";
export declare function isVDML_DeliveredValue(item: unknown): item is VDML_DeliveredValue;
export interface VDML_Model extends AstNode {
    readonly $type: 'VDML_Model';
    elements: Array<VDML_Element>;
}
export declare const VDML_Model = "VDML_Model";
export declare function isVDML_Model(item: unknown): item is VDML_Model;
export interface VDML_Participant extends AstNode {
    readonly $container: ArchiverseModel | VDML_BusinessNetwork;
    readonly $type: 'VDML_Participant';
    capabilities: Array<Reference<VDML_Capability>>;
    description?: string;
    name: string;
    roles: Array<Reference<VDML_Role>>;
    type?: VDML_ParticipantType;
}
export declare const VDML_Participant = "VDML_Participant";
export declare function isVDML_Participant(item: unknown): item is VDML_Participant;
export interface VDML_Resource extends AstNode {
    readonly $container: VDML_Capability;
    readonly $type: 'VDML_Resource';
    description?: string;
    name: string;
    quantity?: number;
    unit?: string;
}
export declare const VDML_Resource = "VDML_Resource";
export declare function isVDML_Resource(item: unknown): item is VDML_Resource;
export interface VDML_Role extends AstNode {
    readonly $container: ArchiverseModel | VDML_Community | VDML_Model;
    readonly $type: 'VDML_Role';
    community?: Reference<VDML_Community>;
    description?: string;
    name: string;
    responsibilities: Array<string>;
}
export declare const VDML_Role = "VDML_Role";
export declare function isVDML_Role(item: unknown): item is VDML_Role;
export interface VDML_Store extends AstNode {
    readonly $container: ArchiverseModel | VDML_Model;
    readonly $type: 'VDML_Store';
    description?: string;
    name: string;
    owner?: Reference<VDML_Role>;
    storeType?: VDML_StoreType;
}
export declare const VDML_Store = "VDML_Store";
export declare function isVDML_Store(item: unknown): item is VDML_Store;
export interface VDML_ValueComponent extends AstNode {
    readonly $container: VDML_ValueProposition;
    readonly $type: 'VDML_ValueComponent';
    description?: string;
    formula?: string;
    name: string;
    valuation?: string;
}
export declare const VDML_ValueComponent = "VDML_ValueComponent";
export declare function isVDML_ValueComponent(item: unknown): item is VDML_ValueComponent;
export interface VDML_ValueProposition extends AstNode {
    readonly $container: ArchiverseModel | VDML_BusinessNetwork | VDML_Model;
    readonly $type: 'VDML_ValueProposition';
    description?: string;
    name: string;
    source?: Reference<VDML_Role>;
    target?: Reference<VDML_Role>;
    valueComponents: Array<VDML_ValueComponent>;
}
export declare const VDML_ValueProposition = "VDML_ValueProposition";
export declare function isVDML_ValueProposition(item: unknown): item is VDML_ValueProposition;
export interface XES_Arc extends AstNode {
    readonly $container: XES_ProcessModel;
    readonly $type: 'XES_Arc';
    attributes: Array<XES_Attribute>;
    source?: Reference<XES_Place>;
    sourceTransition?: Reference<XES_Transition>;
    target?: Reference<XES_Place>;
    targetTransition?: Reference<XES_Transition>;
    weight?: number;
}
export declare const XES_Arc = "XES_Arc";
export declare function isXES_Arc(item: unknown): item is XES_Arc;
export interface XES_BooleanAttribute extends AstNode {
    readonly $container: XES_Arc | XES_Event | XES_GlobalAttributes | XES_Place | XES_Trace | XES_Transition | XES_VariantActivity | XES_VariantEdge;
    readonly $type: 'XES_BooleanAttribute';
    key: string;
    value: boolean;
}
export declare const XES_BooleanAttribute = "XES_BooleanAttribute";
export declare function isXES_BooleanAttribute(item: unknown): item is XES_BooleanAttribute;
export interface XES_Classifier extends AstNode {
    readonly $container: XES_Log;
    readonly $type: 'XES_Classifier';
    keys: Array<string>;
    name: string;
}
export declare const XES_Classifier = "XES_Classifier";
export declare function isXES_Classifier(item: unknown): item is XES_Classifier;
export interface XES_DateAttribute extends AstNode {
    readonly $container: XES_Arc | XES_Event | XES_GlobalAttributes | XES_Place | XES_Trace | XES_Transition | XES_VariantActivity | XES_VariantEdge;
    readonly $type: 'XES_DateAttribute';
    key: string;
    value: string;
}
export declare const XES_DateAttribute = "XES_DateAttribute";
export declare function isXES_DateAttribute(item: unknown): item is XES_DateAttribute;
export interface XES_Event extends AstNode {
    readonly $container: XES_Trace;
    readonly $type: 'XES_Event';
    attributes: Array<XES_Attribute>;
    name: string;
}
export declare const XES_Event = "XES_Event";
export declare function isXES_Event(item: unknown): item is XES_Event;
export interface XES_Extension extends AstNode {
    readonly $container: XES_Log;
    readonly $type: 'XES_Extension';
    name: string;
    prefix: string;
    uri: string;
}
export declare const XES_Extension = "XES_Extension";
export declare function isXES_Extension(item: unknown): item is XES_Extension;
export interface XES_FloatAttribute extends AstNode {
    readonly $container: XES_Arc | XES_Event | XES_GlobalAttributes | XES_Place | XES_Trace | XES_Transition | XES_VariantActivity | XES_VariantEdge;
    readonly $type: 'XES_FloatAttribute';
    key: string;
    value: number;
}
export declare const XES_FloatAttribute = "XES_FloatAttribute";
export declare function isXES_FloatAttribute(item: unknown): item is XES_FloatAttribute;
export interface XES_GlobalAttributes extends AstNode {
    readonly $container: XES_Log;
    readonly $type: 'XES_GlobalAttributes';
    attributes: Array<XES_Attribute>;
    scope: XES_Scope;
}
export declare const XES_GlobalAttributes = "XES_GlobalAttributes";
export declare function isXES_GlobalAttributes(item: unknown): item is XES_GlobalAttributes;
export interface XES_IDAttribute extends AstNode {
    readonly $container: XES_Arc | XES_Event | XES_GlobalAttributes | XES_Place | XES_Trace | XES_Transition | XES_VariantActivity | XES_VariantEdge;
    readonly $type: 'XES_IDAttribute';
    key: string;
    value: string;
}
export declare const XES_IDAttribute = "XES_IDAttribute";
export declare function isXES_IDAttribute(item: unknown): item is XES_IDAttribute;
export interface XES_IntAttribute extends AstNode {
    readonly $container: XES_Arc | XES_Event | XES_GlobalAttributes | XES_Place | XES_Trace | XES_Transition | XES_VariantActivity | XES_VariantEdge;
    readonly $type: 'XES_IntAttribute';
    key: string;
    value: number;
}
export declare const XES_IntAttribute = "XES_IntAttribute";
export declare function isXES_IntAttribute(item: unknown): item is XES_IntAttribute;
export interface XES_Log extends AstNode {
    readonly $container: ArchiverseModel | XES_Model;
    readonly $type: 'XES_Log';
    classifiers: Array<XES_Classifier>;
    description?: string;
    extensions: Array<XES_Extension>;
    globals: Array<XES_GlobalAttributes>;
    name: string;
    source?: string;
    traces: Array<XES_Trace>;
    version?: string;
}
export declare const XES_Log = "XES_Log";
export declare function isXES_Log(item: unknown): item is XES_Log;
export interface XES_Model extends AstNode {
    readonly $type: 'XES_Model';
    elements: Array<XES_Element>;
}
export declare const XES_Model = "XES_Model";
export declare function isXES_Model(item: unknown): item is XES_Model;
export interface XES_Place extends AstNode {
    readonly $container: XES_ProcessModel;
    readonly $type: 'XES_Place';
    attributes: Array<XES_Attribute>;
    isFinal: boolean;
    isInitial: boolean;
    name: string;
    tokens?: number;
}
export declare const XES_Place = "XES_Place";
export declare function isXES_Place(item: unknown): item is XES_Place;
export interface XES_ProcessModel extends AstNode {
    readonly $container: ArchiverseModel | XES_Model;
    readonly $type: 'XES_ProcessModel';
    algorithm?: string;
    arcs: Array<XES_Arc>;
    description?: string;
    fitness?: number;
    generalization?: number;
    name: string;
    places: Array<XES_Place>;
    precision?: number;
    simplicity?: number;
    threshold?: number;
    transitions: Array<XES_Transition>;
}
export declare const XES_ProcessModel = "XES_ProcessModel";
export declare function isXES_ProcessModel(item: unknown): item is XES_ProcessModel;
export interface XES_ProcessVariant extends AstNode {
    readonly $container: ArchiverseModel | XES_Model;
    readonly $type: 'XES_ProcessVariant';
    activities: Array<XES_VariantActivity>;
    coverage?: number;
    description?: string;
    edges: Array<XES_VariantEdge>;
    frequency?: number;
    name: string;
}
export declare const XES_ProcessVariant = "XES_ProcessVariant";
export declare function isXES_ProcessVariant(item: unknown): item is XES_ProcessVariant;
export interface XES_StringAttribute extends AstNode {
    readonly $container: XES_Arc | XES_Event | XES_GlobalAttributes | XES_Place | XES_Trace | XES_Transition | XES_VariantActivity | XES_VariantEdge;
    readonly $type: 'XES_StringAttribute';
    key: string;
    value: string;
}
export declare const XES_StringAttribute = "XES_StringAttribute";
export declare function isXES_StringAttribute(item: unknown): item is XES_StringAttribute;
export interface XES_Trace extends AstNode {
    readonly $container: XES_Log;
    readonly $type: 'XES_Trace';
    attributes: Array<XES_Attribute>;
    events: Array<XES_Event>;
    name: string;
}
export declare const XES_Trace = "XES_Trace";
export declare function isXES_Trace(item: unknown): item is XES_Trace;
export interface XES_Transition extends AstNode {
    readonly $container: XES_ProcessModel;
    readonly $type: 'XES_Transition';
    activity?: string;
    attributes: Array<XES_Attribute>;
    frequency?: number;
    invisible: boolean;
    name: string;
}
export declare const XES_Transition = "XES_Transition";
export declare function isXES_Transition(item: unknown): item is XES_Transition;
export interface XES_VariantActivity extends AstNode {
    readonly $container: XES_ProcessVariant;
    readonly $type: 'XES_VariantActivity';
    attributes: Array<XES_Attribute>;
    frequency?: number;
    label?: string;
    name: string;
}
export declare const XES_VariantActivity = "XES_VariantActivity";
export declare function isXES_VariantActivity(item: unknown): item is XES_VariantActivity;
export interface XES_VariantEdge extends AstNode {
    readonly $container: XES_ProcessVariant;
    readonly $type: 'XES_VariantEdge';
    attributes: Array<XES_Attribute>;
    frequency?: number;
    from: Reference<XES_VariantActivity>;
    probability?: number;
    to: Reference<XES_VariantActivity>;
}
export declare const XES_VariantEdge = "XES_VariantEdge";
export declare function isXES_VariantEdge(item: unknown): item is XES_VariantEdge;
export type ArchiverseAstType = {
    AccessRelationship: AccessRelationship;
    AggregationRelationship: AggregationRelationship;
    ArchimateElement: ArchimateElement;
    ArchimateModel: ArchimateModel;
    ArchimateRef: ArchimateRef;
    ArchimateRelationship: ArchimateRelationship;
    Archimate_Application_Collaboration: Archimate_Application_Collaboration;
    Archimate_Application_Component: Archimate_Application_Component;
    Archimate_Application_Function: Archimate_Application_Function;
    Archimate_Application_Interaction: Archimate_Application_Interaction;
    Archimate_Application_Interface: Archimate_Application_Interface;
    Archimate_Application_Service: Archimate_Application_Service;
    Archimate_Artifact: Archimate_Artifact;
    Archimate_Assessment: Archimate_Assessment;
    Archimate_Business_Actor: Archimate_Business_Actor;
    Archimate_Business_Collaboration: Archimate_Business_Collaboration;
    Archimate_Business_Event: Archimate_Business_Event;
    Archimate_Business_Function: Archimate_Business_Function;
    Archimate_Business_Interaction: Archimate_Business_Interaction;
    Archimate_Business_Interface: Archimate_Business_Interface;
    Archimate_Business_Object: Archimate_Business_Object;
    Archimate_Business_Process: Archimate_Business_Process;
    Archimate_Business_Role: Archimate_Business_Role;
    Archimate_Business_Service: Archimate_Business_Service;
    Archimate_Capability: Archimate_Capability;
    Archimate_CommunicationNetwork: Archimate_CommunicationNetwork;
    Archimate_Constraint: Archimate_Constraint;
    Archimate_Contract: Archimate_Contract;
    Archimate_CourseOfAction: Archimate_CourseOfAction;
    Archimate_Data_Object: Archimate_Data_Object;
    Archimate_Deliverable: Archimate_Deliverable;
    Archimate_Device: Archimate_Device;
    Archimate_Driver: Archimate_Driver;
    Archimate_Gap: Archimate_Gap;
    Archimate_Goal: Archimate_Goal;
    Archimate_ImplementationEvent: Archimate_ImplementationEvent;
    Archimate_Meaning: Archimate_Meaning;
    Archimate_Node: Archimate_Node;
    Archimate_Outcome: Archimate_Outcome;
    Archimate_Path: Archimate_Path;
    Archimate_Plateau: Archimate_Plateau;
    Archimate_Principle: Archimate_Principle;
    Archimate_Product: Archimate_Product;
    Archimate_Representation: Archimate_Representation;
    Archimate_Requirement: Archimate_Requirement;
    Archimate_Resource: Archimate_Resource;
    Archimate_Stakeholder: Archimate_Stakeholder;
    Archimate_SystemSoftware: Archimate_SystemSoftware;
    Archimate_Technology_Collaboration: Archimate_Technology_Collaboration;
    Archimate_Technology_Event: Archimate_Technology_Event;
    Archimate_Technology_Function: Archimate_Technology_Function;
    Archimate_Technology_Interaction: Archimate_Technology_Interaction;
    Archimate_Technology_Interface: Archimate_Technology_Interface;
    Archimate_Technology_Process: Archimate_Technology_Process;
    Archimate_Technology_Service: Archimate_Technology_Service;
    Archimate_Value: Archimate_Value;
    Archimate_ValueStream: Archimate_ValueStream;
    Archimate_WorkPackage: Archimate_WorkPackage;
    ArchiverseModel: ArchiverseModel;
    AssignmentRelationship: AssignmentRelationship;
    AssociationRelationship: AssociationRelationship;
    BPC_AreaPath: BPC_AreaPath;
    BPC_BusinessOutcomeCategory: BPC_BusinessOutcomeCategory;
    BPC_BusinessProcessCatalog: BPC_BusinessProcessCatalog;
    BPC_BusinessProcessItem: BPC_BusinessProcessItem;
    BPC_ConfigurationDeliverable: BPC_ConfigurationDeliverable;
    BPC_Description: BPC_Description;
    BPC_Effort: BPC_Effort;
    BPC_EndToEndProcess: BPC_EndToEndProcess;
    BPC_Priority: BPC_Priority;
    BPC_Process: BPC_Process;
    BPC_ProcessArea: BPC_ProcessArea;
    BPC_Risk: BPC_Risk;
    BPC_Scenario: BPC_Scenario;
    BPC_TimeCriticality: BPC_TimeCriticality;
    BPC_ValueArea: BPC_ValueArea;
    BPMN_Bpmn_Model: BPMN_Bpmn_Model;
    BPMN_Element: BPMN_Element;
    BPMN_Event: BPMN_Event;
    BPMN_EventType: BPMN_EventType;
    BPMN_Flow_Node: BPMN_Flow_Node;
    BPMN_Gateway: BPMN_Gateway;
    BPMN_GatewayType: BPMN_GatewayType;
    BPMN_Task: BPMN_Task;
    BPMN_TaskType: BPMN_TaskType;
    BusinessProcessCatalogImplementation: BusinessProcessCatalogImplementation;
    BusinessProcessImplementation: BusinessProcessImplementation;
    CMMI_Artifact: CMMI_Artifact;
    CMMI_Assessment: CMMI_Assessment;
    CMMI_CapabilityLevel: CMMI_CapabilityLevel;
    CMMI_Element: CMMI_Element;
    CMMI_Goal: CMMI_Goal;
    CMMI_MaturityLevel: CMMI_MaturityLevel;
    CMMI_MaturityRating: CMMI_MaturityRating;
    CMMI_Model: CMMI_Model;
    CMMI_Practice: CMMI_Practice;
    CMMI_Process: CMMI_Process;
    CMMI_ProcessArea: CMMI_ProcessArea;
    CMMI_WorkProduct: CMMI_WorkProduct;
    CMMN_Case: CMMN_Case;
    CMMN_CaseFileItem: CMMN_CaseFileItem;
    CMMN_Element: CMMN_Element;
    CMMN_EventListener: CMMN_EventListener;
    CMMN_Milestone: CMMN_Milestone;
    CMMN_Model: CMMN_Model;
    CMMN_PlanFragment: CMMN_PlanFragment;
    CMMN_PlanningTable: CMMN_PlanningTable;
    CMMN_Sentry: CMMN_Sentry;
    CMMN_Stage: CMMN_Stage;
    CMMN_Task: CMMN_Task;
    CompositionRelationship: CompositionRelationship;
    D365BC_Codeunit: D365BC_Codeunit;
    D365BC_Element: D365BC_Element;
    D365BC_Field: D365BC_Field;
    D365BC_FieldRelation: D365BC_FieldRelation;
    D365BC_Key: D365BC_Key;
    D365BC_Method: D365BC_Method;
    D365BC_Model: D365BC_Model;
    D365BC_Page: D365BC_Page;
    D365BC_PageAction: D365BC_PageAction;
    D365BC_PageLayoutElement: D365BC_PageLayoutElement;
    D365BC_Parameter: D365BC_Parameter;
    D365BC_Table: D365BC_Table;
    D365BC_TableRelation: D365BC_TableRelation;
    D365FO_AOTPackage: D365FO_AOTPackage;
    D365FO_BusinessLogic: D365FO_BusinessLogic;
    D365FO_Class: D365FO_Class;
    D365FO_DataEntity: D365FO_DataEntity;
    D365FO_DataModel: D365FO_DataModel;
    D365FO_Description: D365FO_Description;
    D365FO_EntityField: D365FO_EntityField;
    D365FO_Enum: D365FO_Enum;
    D365FO_EnumValue: D365FO_EnumValue;
    D365FO_Integration: D365FO_Integration;
    D365FO_Label: D365FO_Label;
    D365FO_Method: D365FO_Method;
    D365FO_MethodParameter: D365FO_MethodParameter;
    D365FO_Model: D365FO_Model;
    D365FO_ModelStore: D365FO_ModelStore;
    D365FO_ModelStoreElement: D365FO_ModelStoreElement;
    D365FO_Publisher: D365FO_Publisher;
    D365FO_Table: D365FO_Table;
    D365FO_TableField: D365FO_TableField;
    D365FO_TableRelation: D365FO_TableRelation;
    D365FO_Version: D365FO_Version;
    DMN_BusinessKnowledgeModel: DMN_BusinessKnowledgeModel;
    DMN_Decision: DMN_Decision;
    DMN_DecisionRequirementsDiagram: DMN_DecisionRequirementsDiagram;
    DMN_DecisionTable: DMN_DecisionTable;
    DMN_Element: DMN_Element;
    DMN_Expression: DMN_Expression;
    DMN_InformationRequirement: DMN_InformationRequirement;
    DMN_InputData: DMN_InputData;
    DMN_KnowledgeSource: DMN_KnowledgeSource;
    DMN_Model: DMN_Model;
    FlowRelationship: FlowRelationship;
    InfluenceRelationship: InfluenceRelationship;
    ModelElement: ModelElement;
    PMBOK_ActivityAttributes: PMBOK_ActivityAttributes;
    PMBOK_ActivityList: PMBOK_ActivityList;
    PMBOK_Agreements: PMBOK_Agreements;
    PMBOK_AssumptionLog: PMBOK_AssumptionLog;
    PMBOK_BasisOfEstimates: PMBOK_BasisOfEstimates;
    PMBOK_BidDocuments: PMBOK_BidDocuments;
    PMBOK_ChangeLog: PMBOK_ChangeLog;
    PMBOK_ChangeManagementPlan: PMBOK_ChangeManagementPlan;
    PMBOK_ChangeRequest: PMBOK_ChangeRequest;
    PMBOK_CommunicationsManagementPlan: PMBOK_CommunicationsManagementPlan;
    PMBOK_ConfigurationManagementPlan: PMBOK_ConfigurationManagementPlan;
    PMBOK_CostBaseline: PMBOK_CostBaseline;
    PMBOK_CostEstimates: PMBOK_CostEstimates;
    PMBOK_CostManagementPlan: PMBOK_CostManagementPlan;
    PMBOK_Deliverable: PMBOK_Deliverable;
    PMBOK_DurationEstimates: PMBOK_DurationEstimates;
    PMBOK_EnterpriseEnvironmentalFactors: PMBOK_EnterpriseEnvironmentalFactors;
    PMBOK_FinalReport: PMBOK_FinalReport;
    PMBOK_ITTO_Element: PMBOK_ITTO_Element;
    PMBOK_ITTO_Reference: PMBOK_ITTO_Reference;
    PMBOK_Input: PMBOK_Input;
    PMBOK_IssueLog: PMBOK_IssueLog;
    PMBOK_KnowledgeArea: PMBOK_KnowledgeArea;
    PMBOK_LessonsLearnedRegister: PMBOK_LessonsLearnedRegister;
    PMBOK_LogEntry: PMBOK_LogEntry;
    PMBOK_MakeOrBuyDecisions: PMBOK_MakeOrBuyDecisions;
    PMBOK_MilestoneList: PMBOK_MilestoneList;
    PMBOK_OrganizationalProcessAssets: PMBOK_OrganizationalProcessAssets;
    PMBOK_Output: PMBOK_Output;
    PMBOK_PerformanceMeasurementBaseline: PMBOK_PerformanceMeasurementBaseline;
    PMBOK_ProcessGroup: PMBOK_ProcessGroup;
    PMBOK_ProcurementManagementPlan: PMBOK_ProcurementManagementPlan;
    PMBOK_ProcurementStatementOfWork: PMBOK_ProcurementStatementOfWork;
    PMBOK_Project: PMBOK_Project;
    PMBOK_ProjectCalendar: PMBOK_ProjectCalendar;
    PMBOK_ProjectCharter: PMBOK_ProjectCharter;
    PMBOK_ProjectCommunications: PMBOK_ProjectCommunications;
    PMBOK_ProjectFundingRequirements: PMBOK_ProjectFundingRequirements;
    PMBOK_ProjectManagementPlan: PMBOK_ProjectManagementPlan;
    PMBOK_ProjectProcess: PMBOK_ProjectProcess;
    PMBOK_ProjectSchedule: PMBOK_ProjectSchedule;
    PMBOK_ProjectScheduleNetworkDiagram: PMBOK_ProjectScheduleNetworkDiagram;
    PMBOK_ProjectScopeStatement: PMBOK_ProjectScopeStatement;
    PMBOK_QualityControlMeasurements: PMBOK_QualityControlMeasurements;
    PMBOK_QualityManagementPlan: PMBOK_QualityManagementPlan;
    PMBOK_QualityMetrics: PMBOK_QualityMetrics;
    PMBOK_QualityReport: PMBOK_QualityReport;
    PMBOK_RequirementsDocumentation: PMBOK_RequirementsDocumentation;
    PMBOK_RequirementsManagementPlan: PMBOK_RequirementsManagementPlan;
    PMBOK_RequirementsTraceabilityMatrix: PMBOK_RequirementsTraceabilityMatrix;
    PMBOK_ResourceAssignments: PMBOK_ResourceAssignments;
    PMBOK_ResourceBreakdownStructure: PMBOK_ResourceBreakdownStructure;
    PMBOK_ResourceCalendar: PMBOK_ResourceCalendar;
    PMBOK_ResourceManagementPlan: PMBOK_ResourceManagementPlan;
    PMBOK_ResourceRequirements: PMBOK_ResourceRequirements;
    PMBOK_RiskItem: PMBOK_RiskItem;
    PMBOK_RiskManagementPlan: PMBOK_RiskManagementPlan;
    PMBOK_RiskRegister: PMBOK_RiskRegister;
    PMBOK_RiskReport: PMBOK_RiskReport;
    PMBOK_ScheduleBaseline: PMBOK_ScheduleBaseline;
    PMBOK_ScheduleData: PMBOK_ScheduleData;
    PMBOK_ScheduleManagementPlan: PMBOK_ScheduleManagementPlan;
    PMBOK_ScopeBaseline: PMBOK_ScopeBaseline;
    PMBOK_ScopeManagementPlan: PMBOK_ScopeManagementPlan;
    PMBOK_SourceSelectionCriteria: PMBOK_SourceSelectionCriteria;
    PMBOK_StakeholderEngagementPlan: PMBOK_StakeholderEngagementPlan;
    PMBOK_StakeholderItem: PMBOK_StakeholderItem;
    PMBOK_StakeholderRegister: PMBOK_StakeholderRegister;
    PMBOK_TeamCharter: PMBOK_TeamCharter;
    PMBOK_TestAndEvaluationDocuments: PMBOK_TestAndEvaluationDocuments;
    PMBOK_ToolTechnique: PMBOK_ToolTechnique;
    PMBOK_WBS: PMBOK_WBS;
    PMBOK_WBS_Dictionary: PMBOK_WBS_Dictionary;
    PRINCE2_Activity: PRINCE2_Activity;
    PRINCE2_AnyManagementProduct: PRINCE2_AnyManagementProduct;
    PRINCE2_AnyProcess: PRINCE2_AnyProcess;
    PRINCE2_BenefitsManagementApproach: PRINCE2_BenefitsManagementApproach;
    PRINCE2_BusinessCase: PRINCE2_BusinessCase;
    PRINCE2_ChangeControlApproach: PRINCE2_ChangeControlApproach;
    PRINCE2_CheckpointReport: PRINCE2_CheckpointReport;
    PRINCE2_ClosingProject: PRINCE2_ClosingProject;
    PRINCE2_CommunicationManagementApproach: PRINCE2_CommunicationManagementApproach;
    PRINCE2_ConfigurationItemRecord: PRINCE2_ConfigurationItemRecord;
    PRINCE2_ControllingStage: PRINCE2_ControllingStage;
    PRINCE2_DailyLog: PRINCE2_DailyLog;
    PRINCE2_Directing: PRINCE2_Directing;
    PRINCE2_EndProjectReport: PRINCE2_EndProjectReport;
    PRINCE2_EndStageReport: PRINCE2_EndStageReport;
    PRINCE2_ExceptionPlan: PRINCE2_ExceptionPlan;
    PRINCE2_ExceptionReport: PRINCE2_ExceptionReport;
    PRINCE2_HighlightReport: PRINCE2_HighlightReport;
    PRINCE2_Initiating: PRINCE2_Initiating;
    PRINCE2_IssueRegister: PRINCE2_IssueRegister;
    PRINCE2_IssueReport: PRINCE2_IssueReport;
    PRINCE2_LessonsLog: PRINCE2_LessonsLog;
    PRINCE2_LessonsReport: PRINCE2_LessonsReport;
    PRINCE2_ManagingProductDelivery: PRINCE2_ManagingProductDelivery;
    PRINCE2_ManagingStageBoundary: PRINCE2_ManagingStageBoundary;
    PRINCE2_PID: PRINCE2_PID;
    PRINCE2_Plan: PRINCE2_Plan;
    PRINCE2_PlanOwnership: PRINCE2_PlanOwnership;
    PRINCE2_Principle: PRINCE2_Principle;
    PRINCE2_ProductDescription: PRINCE2_ProductDescription;
    PRINCE2_ProductStatusAccount: PRINCE2_ProductStatusAccount;
    PRINCE2_ProjectBrief: PRINCE2_ProjectBrief;
    PRINCE2_ProjectPlan: PRINCE2_ProjectPlan;
    PRINCE2_ProjectProductDescription: PRINCE2_ProjectProductDescription;
    PRINCE2_QualityManagementApproach: PRINCE2_QualityManagementApproach;
    PRINCE2_QualityRegister: PRINCE2_QualityRegister;
    PRINCE2_Ref: PRINCE2_Ref;
    PRINCE2_Referenceable: PRINCE2_Referenceable;
    PRINCE2_RiskManagementApproach: PRINCE2_RiskManagementApproach;
    PRINCE2_RiskRegister: PRINCE2_RiskRegister;
    PRINCE2_RiskReport: PRINCE2_RiskReport;
    PRINCE2_Role: PRINCE2_Role;
    PRINCE2_StagePlan: PRINCE2_StagePlan;
    PRINCE2_StartingUp: PRINCE2_StartingUp;
    PRINCE2_Tailoring: PRINCE2_Tailoring;
    PRINCE2_TeamPlan: PRINCE2_TeamPlan;
    PRINCE2_Theme: PRINCE2_Theme;
    PRINCE2_WorkPackage: PRINCE2_WorkPackage;
    RealizationRelationship: RealizationRelationship;
    SAP_Association: SAP_Association;
    SAP_BusinessObject: SAP_BusinessObject;
    SAP_BusinessObjectNode: SAP_BusinessObjectNode;
    SAP_BusinessProcess: SAP_BusinessProcess;
    SAP_Element: SAP_Element;
    SAP_Field: SAP_Field;
    SAP_FieldMapping: SAP_FieldMapping;
    SAP_Message: SAP_Message;
    SAP_Model: SAP_Model;
    SAP_Operation: SAP_Operation;
    SAP_ProcessStep: SAP_ProcessStep;
    SAP_Service: SAP_Service;
    SAP_Table: SAP_Table;
    SAP_TableField: SAP_TableField;
    SAP_TableKey: SAP_TableKey;
    SAP_ValueHelp: SAP_ValueHelp;
    SBVR_BusinessRule: SBVR_BusinessRule;
    SBVR_BusinessVocabulary: SBVR_BusinessVocabulary;
    SBVR_Characteristic: SBVR_Characteristic;
    SBVR_Concept: SBVR_Concept;
    SBVR_Element: SBVR_Element;
    SBVR_FactType: SBVR_FactType;
    SBVR_FactTypeRole: SBVR_FactTypeRole;
    SBVR_Model: SBVR_Model;
    SBVR_ObjectType: SBVR_ObjectType;
    ServingRelationship: ServingRelationship;
    SpecializationRelationship: SpecializationRelationship;
    TOGAF_ADMPhase: TOGAF_ADMPhase;
    TOGAF_ADMStep: TOGAF_ADMStep;
    TOGAF_Architecture: TOGAF_Architecture;
    TOGAF_ArchitectureBuilding: TOGAF_ArchitectureBuilding;
    TOGAF_ArchitectureGap: TOGAF_ArchitectureGap;
    TOGAF_ArchitecturePrinciple: TOGAF_ArchitecturePrinciple;
    TOGAF_ArchitectureRelationship: TOGAF_ArchitectureRelationship;
    TOGAF_ArchitectureRequirement: TOGAF_ArchitectureRequirement;
    TOGAF_ArchitectureViewpoint: TOGAF_ArchitectureViewpoint;
    TOGAF_ArchitectureVision: TOGAF_ArchitectureVision;
    TOGAF_Element: TOGAF_Element;
    TOGAF_Implementation: TOGAF_Implementation;
    TOGAF_Model: TOGAF_Model;
    TOGAF_Stakeholder: TOGAF_Stakeholder;
    TOGAF_WorkPackage: TOGAF_WorkPackage;
    TriggeringRelationship: TriggeringRelationship;
    UMLActivityDiagram: UMLActivityDiagram;
    UMLActivityFlow: UMLActivityFlow;
    UMLActivityNode: UMLActivityNode;
    UMLAttribute: UMLAttribute;
    UMLClass: UMLClass;
    UMLClassDiagram: UMLClassDiagram;
    UMLComponent: UMLComponent;
    UMLComponentDependency: UMLComponentDependency;
    UMLComponentDiagram: UMLComponentDiagram;
    UMLComponentInterface: UMLComponentInterface;
    UMLComponentOperation: UMLComponentOperation;
    UMLElement: UMLElement;
    UMLEnum: UMLEnum;
    UMLEnumValue: UMLEnumValue;
    UMLInterface: UMLInterface;
    UMLLifeline: UMLLifeline;
    UMLMessage: UMLMessage;
    UMLMethod: UMLMethod;
    UMLModel: UMLModel;
    UMLParameter: UMLParameter;
    UMLRelationship: UMLRelationship;
    UMLSequenceDiagram: UMLSequenceDiagram;
    UMLState: UMLState;
    UMLStateDiagram: UMLStateDiagram;
    UMLTransition: UMLTransition;
    VDML_Activity: VDML_Activity;
    VDML_BusinessNetwork: VDML_BusinessNetwork;
    VDML_Capability: VDML_Capability;
    VDML_Collaboration: VDML_Collaboration;
    VDML_Community: VDML_Community;
    VDML_DeliveredValue: VDML_DeliveredValue;
    VDML_Element: VDML_Element;
    VDML_Model: VDML_Model;
    VDML_Participant: VDML_Participant;
    VDML_Resource: VDML_Resource;
    VDML_Role: VDML_Role;
    VDML_Store: VDML_Store;
    VDML_ValueComponent: VDML_ValueComponent;
    VDML_ValueProposition: VDML_ValueProposition;
    XES_Arc: XES_Arc;
    XES_Attribute: XES_Attribute;
    XES_BooleanAttribute: XES_BooleanAttribute;
    XES_Classifier: XES_Classifier;
    XES_DateAttribute: XES_DateAttribute;
    XES_Element: XES_Element;
    XES_Event: XES_Event;
    XES_Extension: XES_Extension;
    XES_FloatAttribute: XES_FloatAttribute;
    XES_GlobalAttributes: XES_GlobalAttributes;
    XES_IDAttribute: XES_IDAttribute;
    XES_IntAttribute: XES_IntAttribute;
    XES_Log: XES_Log;
    XES_Model: XES_Model;
    XES_Place: XES_Place;
    XES_ProcessModel: XES_ProcessModel;
    XES_ProcessVariant: XES_ProcessVariant;
    XES_StringAttribute: XES_StringAttribute;
    XES_Trace: XES_Trace;
    XES_Transition: XES_Transition;
    XES_VariantActivity: XES_VariantActivity;
    XES_VariantEdge: XES_VariantEdge;
};
export declare class ArchiverseAstReflection extends AbstractAstReflection {
    getAllTypes(): string[];
    protected computeIsSubtype(subtype: string, supertype: string): boolean;
    getReferenceType(refInfo: ReferenceInfo): string;
    getTypeMetaData(type: string): TypeMetaData;
}
export declare const reflection: ArchiverseAstReflection;
//# sourceMappingURL=ast.d.ts.map