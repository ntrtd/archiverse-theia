/******************************************************************************
 * This file was generated by langium-cli 3.4.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/
import { AbstractAstReflection } from 'langium';
export const ArchiverseTerminals = {
    ID: /[_a-zA-Z][\w_]*/,
    WS: /\s+/,
    ML_COMMENT: /\/\*[\s\S]*?\*\//,
    SL_COMMENT: /\/\/[^\n\r]*/,
    INT: /[0-9]+/,
    STRING: /"(\\.|[^"\\])*"|'(\\.|[^'\\])*'/,
    FLOAT: /-?[0-9]+(\.[0-9]+)?/,
    BOOLEAN: /(true|false)/,
};
export const ArchimateElement = 'ArchimateElement';
export function isArchimateElement(item) {
    return reflection.isInstance(item, ArchimateElement);
}
export const ArchimateRelationship = 'ArchimateRelationship';
export function isArchimateRelationship(item) {
    return reflection.isInstance(item, ArchimateRelationship);
}
export const BPC_BusinessProcessItem = 'BPC_BusinessProcessItem';
export function isBPC_BusinessProcessItem(item) {
    return reflection.isInstance(item, BPC_BusinessProcessItem);
}
export const BPMN_Element = 'BPMN_Element';
export function isBPMN_Element(item) {
    return reflection.isInstance(item, BPMN_Element);
}
export const BPMN_Flow_Node = 'BPMN_Flow_Node';
export function isBPMN_Flow_Node(item) {
    return reflection.isInstance(item, BPMN_Flow_Node);
}
export function isCMMI_Category(item) {
    return item === 'CMMI_PROCESS_MANAGEMENT' || item === 'CMMI_PROJECT_MANAGEMENT' || item === 'CMMI_ENGINEERING' || item === 'CMMI_SUPPORT';
}
export const CMMI_Element = 'CMMI_Element';
export function isCMMI_Element(item) {
    return reflection.isInstance(item, CMMI_Element);
}
export function isCMMIArtifactType(item) {
    return item === 'CMMI_DOCUMENT' || item === 'CMMI_MODEL' || item === 'CMMI_TEMPLATE' || item === 'CMMI_CHECKLIST' || item === 'CMMI_TOOL';
}
export function isCMMIAssessmentType(item) {
    return item === 'CMMI_SCAMPI_A' || item === 'CMMI_SCAMPI_B' || item === 'CMMI_SCAMPI_C' || item === 'CMMI_INTERNAL';
}
export function isCMMIGoalType(item) {
    return item === 'CMMI_SPECIFIC' || item === 'CMMI_GENERIC';
}
export function isCMMIMaturityLevel(item) {
    return item === 'CMMI_INITIAL' || item === 'CMMI_MANAGED' || item === 'CMMI_DEFINED' || item === 'CMMI_QUANTITATIVELY_MANAGED' || item === 'CMMI_OPTIMIZING';
}
export function isCMMIPracticeType(item) {
    return item === 'CMMI_SPECIFIC' || item === 'CMMI_GENERIC';
}
export function isCMMIRatingValue(item) {
    return item === 'CMMI_FULLY_IMPLEMENTED' || item === 'CMMI_LARGELY_IMPLEMENTED' || item === 'CMMI_PARTIALLY_IMPLEMENTED' || item === 'CMMI_NOT_IMPLEMENTED';
}
export const CMMN_Element = 'CMMN_Element';
export function isCMMN_Element(item) {
    return reflection.isInstance(item, CMMN_Element);
}
export function isCMMN_EventType(item) {
    return item === 'CMMN_USER' || item === 'CMMN_TIMER' || item === 'CMMN_MESSAGE' || item === 'CMMN_SIGNAL' || item === 'CMMN_FILE';
}
export function isCMMN_Multiplicity(item) {
    return item === 'CMMN_ZERO_ONE' || item === 'CMMN_ONE_ONE' || item === 'CMMN_ZERO_UNBOUNDED' || item === 'CMMN_ONE_UNBOUNDED';
}
export function isCMMN_TaskType(item) {
    return item === 'CMMN_HUMAN' || item === 'CMMN_PROCESS' || item === 'CMMN_CASE' || item === 'CMMN_DECISION';
}
export function isD365BC_ActionCategory(item) {
    return item === 'new' || item === 'process' || item === 'report' || item === 'navigate';
}
export function isD365BC_ActionType(item) {
    return item === 'action' || item === 'group' || item === 'separator';
}
export function isD365BC_DataClassification(item) {
    return item === 'customer-content' || item === 'end-user-identifiable-information' || item === 'account-data' || item === 'organization-identifiable-information' || item === 'system-metadata' || item === 'to-be-classified';
}
export function isD365BC_DataType(item) {
    return item === 'integer' || item === 'decimal' || item === 'text' || item === 'code' || item === 'boolean' || item === 'date' || item === 'time' || item === 'datetime' || item === 'record' || item === 'array' || item === 'dictionary' || item === 'variant' || item === 'enum' || item === 'interface';
}
export const D365BC_Element = 'D365BC_Element';
export function isD365BC_Element(item) {
    return reflection.isInstance(item, D365BC_Element);
}
export function isD365BC_FieldType(item) {
    return item === 'integer' || item === 'decimal' || item === 'text' || item === 'code' || item === 'boolean' || item === 'date' || item === 'time' || item === 'datetime' || item === 'guid' || item === 'blob' || item === 'option' || item === 'record-id' || item === 'table-filter';
}
export function isD365BC_PageElementType(item) {
    return item === 'area' || item === 'group' || item === 'field' || item === 'part' || item === 'system-part' || item === 'chart-part';
}
export function isD365BC_PageType(item) {
    return item === 'card' || item === 'list' || item === 'worksheet' || item === 'document' || item === 'role-center' || item === 'list-part' || item === 'api';
}
export function isD365BC_TableType(item) {
    return item === 'normal' || item === 'temporary' || item === 'virtual';
}
export const D365FO_BusinessLogic = 'D365FO_BusinessLogic';
export function isD365FO_BusinessLogic(item) {
    return reflection.isInstance(item, D365FO_BusinessLogic);
}
export function isD365FO_ClassType(item) {
    return item === 'Regular' || item === 'Abstract' || item === 'Singleton' || item === 'Final';
}
export const D365FO_DataModel = 'D365FO_DataModel';
export function isD365FO_DataModel(item) {
    return reflection.isInstance(item, D365FO_DataModel);
}
export function isD365FO_DataType(item) {
    return item === 'string' || item === 'int' || item === 'real' || item === 'boolean' || item === 'datetime' || item === 'guid';
}
export function isD365FO_DeleteAction(item) {
    return item === 'cascade' || item === 'restricted' || item === 'none';
}
export const D365FO_Integration = 'D365FO_Integration';
export function isD365FO_Integration(item) {
    return reflection.isInstance(item, D365FO_Integration);
}
export function isD365FO_MethodScopeType(item) {
    return item === 'instance' || item === 'static';
}
export function isD365FO_MethodVisibility(item) {
    return item === 'public' || item === 'protected' || item === 'private';
}
export function isD365FO_ModelLayer(item) {
    return item === 'SYS' || item === 'GLS' || item === 'FPK' || item === 'SLN' || item === 'ISV' || item === 'VAR' || item === 'USR' || item === 'CUS';
}
export const D365FO_ModelStoreElement = 'D365FO_ModelStoreElement';
export function isD365FO_ModelStoreElement(item) {
    return reflection.isInstance(item, D365FO_ModelStoreElement);
}
export function isD365FO_RelationCardinality(item) {
    return item === 'ZeroOne' || item === 'ZeroMany';
}
export function isD365FO_TableGroup(item) {
    return item === 'Main' || item === 'Group' || item === 'Transaction' || item === 'Parameter' || item === 'Setup';
}
export const DMN_Element = 'DMN_Element';
export function isDMN_Element(item) {
    return reflection.isInstance(item, DMN_Element);
}
export function isDMN_ExpressionLanguage(item) {
    return item === 'DMN_FEEL' || item === 'DMN_PMML' || item === 'DMN_JAVA' || item === 'DMN_JAVASCRIPT';
}
export function isDMN_HitPolicy(item) {
    return item === 'DMN_UNIQUE' || item === 'DMN_FIRST' || item === 'DMN_PRIORITY' || item === 'DMN_ANY' || item === 'DMN_COLLECT' || item === 'DMN_RULE_ORDER' || item === 'DMN_OUTPUT_ORDER';
}
export const ModelElement = 'ModelElement';
export function isModelElement(item) {
    return reflection.isInstance(item, ModelElement);
}
export const PMBOK_ITTO_Element = 'PMBOK_ITTO_Element';
export function isPMBOK_ITTO_Element(item) {
    return reflection.isInstance(item, PMBOK_ITTO_Element);
}
export const PRINCE2_AnyManagementProduct = 'PRINCE2_AnyManagementProduct';
export function isPRINCE2_AnyManagementProduct(item) {
    return reflection.isInstance(item, PRINCE2_AnyManagementProduct);
}
export const PRINCE2_AnyProcess = 'PRINCE2_AnyProcess';
export function isPRINCE2_AnyProcess(item) {
    return reflection.isInstance(item, PRINCE2_AnyProcess);
}
export const PRINCE2_Referenceable = 'PRINCE2_Referenceable';
export function isPRINCE2_Referenceable(item) {
    return reflection.isInstance(item, PRINCE2_Referenceable);
}
export function isQualifiedName(item) {
    return typeof item === 'string';
}
export function isSAP_Cardinality(item) {
    return item === '1..1' || item === '0..1' || item === '1..n' || item === '0..n';
}
export function isSAP_DataType(item) {
    return item === 'CHAR' || item === 'NUMC' || item === 'DEC' || item === 'INT1' || item === 'INT2' || item === 'INT4' || item === 'INT8' || item === 'FLTP' || item === 'DATS' || item === 'TIMS' || item === 'CURR' || item === 'QUAN' || item === 'CLNT';
}
export function isSAP_DeliveryClass(item) {
    return item === 'A' || item === 'C' || item === 'E' || item === 'G' || item === 'L' || item === 'S' || item === 'W';
}
export const SAP_Element = 'SAP_Element';
export function isSAP_Element(item) {
    return reflection.isInstance(item, SAP_Element);
}
export function isSAP_FieldType(item) {
    return item === 'SAP_STRING' || item === 'SAP_INTEGER' || item === 'SAP_DECIMAL' || item === 'SAP_DATE' || item === 'SAP_TIME' || item === 'SAP_TIMESTAMP' || item === 'SAP_BOOLEAN' || item === 'SAP_BINARY' || item === 'SAP_QUANTITY' || item === 'SAP_AMOUNT' || item === 'SAP_CURRENCY' || item === 'SAP_NUMC';
}
export function isSAP_Module(item) {
    return item === 'FI' || item === 'CO' || item === 'MM' || item === 'SD' || item === 'PP' || item === 'PM' || item === 'QM' || item === 'HR' || item === 'CRM' || item === 'SRM' || item === 'SCM' || item === 'PLM';
}
export function isSAP_StepType(item) {
    return item === 'API' || item === 'USER_INTERACTION' || item === 'AUTOMATED' || item === 'BATCH' || item === 'INTEGRATION';
}
export function isSAP_ValueHelpSourceType(item) {
    return item === 'FIXED_VALUES' || item === 'TABLE' || item === 'CDS_VIEW' || item === 'CUSTOM_LOGIC';
}
export function isSBVR_ConceptType(item) {
    return item === 'SBVR_NOUN_CONCEPT' || item === 'SBVR_INDIVIDUAL_CONCEPT' || item === 'SBVR_VERB_CONCEPT' || item === 'SBVR_ROLE' || item === 'SBVR_REFERENCE_SCHEME';
}
export const SBVR_Element = 'SBVR_Element';
export function isSBVR_Element(item) {
    return reflection.isInstance(item, SBVR_Element);
}
export function isSBVR_Modality(item) {
    return item === 'SBVR_NECESSITY' || item === 'SBVR_OBLIGATION' || item === 'SBVR_PERMISSION' || item === 'SBVR_POSSIBILITY';
}
export function isSBVR_RuleType(item) {
    return item === 'SBVR_STRUCTURAL' || item === 'SBVR_OPERATIONAL' || item === 'SBVR_DERIVATION';
}
export function isTOGAF_ADMPhaseType(item) {
    return item === 'TOGAF_PRELIMINARY' || item === 'TOGAF_ARCHITECTURE_VISION' || item === 'TOGAF_BUSINESS_ARCHITECTURE' || item === 'TOGAF_INFORMATION_SYSTEMS_ARCHITECTURE' || item === 'TOGAF_TECHNOLOGY_ARCHITECTURE' || item === 'TOGAF_OPPORTUNITIES_AND_SOLUTIONS' || item === 'TOGAF_MIGRATION_PLANNING' || item === 'TOGAF_IMPLEMENTATION_GOVERNANCE' || item === 'TOGAF_ARCHITECTURE_CHANGE_MANAGEMENT' || item === 'TOGAF_REQUIREMENTS_MANAGEMENT';
}
export function isTOGAF_ArchitectureType(item) {
    return item === 'TOGAF_BUSINESS' || item === 'TOGAF_DATA' || item === 'TOGAF_APPLICATION' || item === 'TOGAF_TECHNOLOGY' || item === 'TOGAF_SECURITY' || item === 'TOGAF_INTEGRATION';
}
export function isTOGAF_BuildingBlockType(item) {
    return item === 'TOGAF_BUSINESS' || item === 'TOGAF_DATA' || item === 'TOGAF_APPLICATION' || item === 'TOGAF_TECHNOLOGY';
}
export const TOGAF_Element = 'TOGAF_Element';
export function isTOGAF_Element(item) {
    return reflection.isInstance(item, TOGAF_Element);
}
export function isTOGAF_GapType(item) {
    return item === 'TOGAF_BUSINESS' || item === 'TOGAF_DATA' || item === 'TOGAF_APPLICATION' || item === 'TOGAF_TECHNOLOGY';
}
export function isTOGAF_PriorityLevel(item) {
    return item === 'TOGAF_LOW' || item === 'TOGAF_MEDIUM' || item === 'TOGAF_HIGH' || item === 'TOGAF_CRITICAL';
}
export function isTOGAF_RelationshipType(item) {
    return item === 'TOGAF_COMPOSITION' || item === 'TOGAF_AGGREGATION' || item === 'TOGAF_ASSIGNMENT' || item === 'TOGAF_REALIZATION' || item === 'TOGAF_SERVING' || item === 'TOGAF_ACCESS' || item === 'TOGAF_INFLUENCE' || item === 'TOGAF_ASSOCIATION' || item === 'TOGAF_TRIGGERING';
}
export function isTOGAF_StakeholderClass(item) {
    return item === 'TOGAF_CORPORATE' || item === 'TOGAF_PROGRAM' || item === 'TOGAF_PROJECT' || item === 'TOGAF_OPERATIONS' || item === 'TOGAF_USER' || item === 'TOGAF_REGULATOR';
}
export function isUMLActivityNodeType(item) {
    return item === 'action' || item === 'decision' || item === 'merge' || item === 'fork' || item === 'join' || item === 'initial' || item === 'final' || item === 'activity-final';
}
export function isUMLAttributeType(item) {
    return item === 'String' || item === 'Integer' || item === 'Double' || item === 'Boolean' || item === 'Date' || item === 'Time' || item === 'DateTime' || item === 'Object' || item === 'Void' || item === 'Byte' || item === 'Long';
}
export const UMLElement = 'UMLElement';
export function isUMLElement(item) {
    return reflection.isInstance(item, UMLElement);
}
export function isUMLMessageType(item) {
    return item === 'synchronous' || item === 'asynchronous' || item === 'reply' || item === 'create' || item === 'destroy';
}
export function isUMLMultiplicity(item) {
    return item === '0..1' || item === '1..1' || item === '0..*' || item === '1..*' || item === '*';
}
export function isUMLRelationshipType(item) {
    return item === 'association' || item === 'inheritance' || item === 'implementation' || item === 'aggregation' || item === 'composition' || item === 'dependency';
}
export function isUMLVisibility(item) {
    return item === '+' || item === '-' || item === '#' || item === '~';
}
export const VDML_Element = 'VDML_Element';
export function isVDML_Element(item) {
    return reflection.isInstance(item, VDML_Element);
}
export function isVDML_ParticipantType(item) {
    return item === 'VDML_ORGANIZATION' || item === 'VDML_PERSON' || item === 'VDML_SYSTEM';
}
export function isVDML_StoreType(item) {
    return item === 'VDML_RESOURCE' || item === 'VDML_INFORMATION' || item === 'VDML_CAPABILITY';
}
export const XES_Attribute = 'XES_Attribute';
export function isXES_Attribute(item) {
    return reflection.isInstance(item, XES_Attribute);
}
export function isXES_ConceptAttributes(item) {
    return item === 'concept:name' || item === 'concept:instance';
}
export function isXES_CostAttributes(item) {
    return item === 'cost:total' || item === 'cost:currency' || item === 'cost:driver';
}
export const XES_Element = 'XES_Element';
export function isXES_Element(item) {
    return reflection.isInstance(item, XES_Element);
}
export function isXES_IdentityAttributes(item) {
    return item === 'identity:id';
}
export function isXES_LifecycleAttributes(item) {
    return item === 'lifecycle:model' || item === 'lifecycle:transition';
}
export function isXES_OrganizationalAttributes(item) {
    return item === 'org:resource' || item === 'org:role' || item === 'org:group';
}
export function isXES_Scope(item) {
    return item === 'trace' || item === 'event';
}
export function isXES_SemanticAttributes(item) {
    return item === 'semantic:modelReference';
}
export function isXES_StandardExtension(item) {
    return item === 'concept' || item === 'lifecycle' || item === 'organizational' || item === 'time' || item === 'semantic' || item === 'identity' || item === 'cost' || item === 'resource';
}
export function isXES_TimeAttributes(item) {
    return item === 'time:timestamp' || item === 'time:duration';
}
export const AccessRelationship = 'AccessRelationship';
export function isAccessRelationship(item) {
    return reflection.isInstance(item, AccessRelationship);
}
export const AggregationRelationship = 'AggregationRelationship';
export function isAggregationRelationship(item) {
    return reflection.isInstance(item, AggregationRelationship);
}
export const Archimate_Application_Collaboration = 'Archimate_Application_Collaboration';
export function isArchimate_Application_Collaboration(item) {
    return reflection.isInstance(item, Archimate_Application_Collaboration);
}
export const Archimate_Application_Component = 'Archimate_Application_Component';
export function isArchimate_Application_Component(item) {
    return reflection.isInstance(item, Archimate_Application_Component);
}
export const Archimate_Application_Function = 'Archimate_Application_Function';
export function isArchimate_Application_Function(item) {
    return reflection.isInstance(item, Archimate_Application_Function);
}
export const Archimate_Application_Interaction = 'Archimate_Application_Interaction';
export function isArchimate_Application_Interaction(item) {
    return reflection.isInstance(item, Archimate_Application_Interaction);
}
export const Archimate_Application_Interface = 'Archimate_Application_Interface';
export function isArchimate_Application_Interface(item) {
    return reflection.isInstance(item, Archimate_Application_Interface);
}
export const Archimate_Application_Service = 'Archimate_Application_Service';
export function isArchimate_Application_Service(item) {
    return reflection.isInstance(item, Archimate_Application_Service);
}
export const Archimate_Artifact = 'Archimate_Artifact';
export function isArchimate_Artifact(item) {
    return reflection.isInstance(item, Archimate_Artifact);
}
export const Archimate_Assessment = 'Archimate_Assessment';
export function isArchimate_Assessment(item) {
    return reflection.isInstance(item, Archimate_Assessment);
}
export const Archimate_Business_Actor = 'Archimate_Business_Actor';
export function isArchimate_Business_Actor(item) {
    return reflection.isInstance(item, Archimate_Business_Actor);
}
export const Archimate_Business_Collaboration = 'Archimate_Business_Collaboration';
export function isArchimate_Business_Collaboration(item) {
    return reflection.isInstance(item, Archimate_Business_Collaboration);
}
export const Archimate_Business_Event = 'Archimate_Business_Event';
export function isArchimate_Business_Event(item) {
    return reflection.isInstance(item, Archimate_Business_Event);
}
export const Archimate_Business_Function = 'Archimate_Business_Function';
export function isArchimate_Business_Function(item) {
    return reflection.isInstance(item, Archimate_Business_Function);
}
export const Archimate_Business_Interaction = 'Archimate_Business_Interaction';
export function isArchimate_Business_Interaction(item) {
    return reflection.isInstance(item, Archimate_Business_Interaction);
}
export const Archimate_Business_Interface = 'Archimate_Business_Interface';
export function isArchimate_Business_Interface(item) {
    return reflection.isInstance(item, Archimate_Business_Interface);
}
export const Archimate_Business_Object = 'Archimate_Business_Object';
export function isArchimate_Business_Object(item) {
    return reflection.isInstance(item, Archimate_Business_Object);
}
export const Archimate_Business_Process = 'Archimate_Business_Process';
export function isArchimate_Business_Process(item) {
    return reflection.isInstance(item, Archimate_Business_Process);
}
export const Archimate_Business_Role = 'Archimate_Business_Role';
export function isArchimate_Business_Role(item) {
    return reflection.isInstance(item, Archimate_Business_Role);
}
export const Archimate_Business_Service = 'Archimate_Business_Service';
export function isArchimate_Business_Service(item) {
    return reflection.isInstance(item, Archimate_Business_Service);
}
export const Archimate_Capability = 'Archimate_Capability';
export function isArchimate_Capability(item) {
    return reflection.isInstance(item, Archimate_Capability);
}
export const Archimate_CommunicationNetwork = 'Archimate_CommunicationNetwork';
export function isArchimate_CommunicationNetwork(item) {
    return reflection.isInstance(item, Archimate_CommunicationNetwork);
}
export const Archimate_Constraint = 'Archimate_Constraint';
export function isArchimate_Constraint(item) {
    return reflection.isInstance(item, Archimate_Constraint);
}
export const Archimate_Contract = 'Archimate_Contract';
export function isArchimate_Contract(item) {
    return reflection.isInstance(item, Archimate_Contract);
}
export const Archimate_CourseOfAction = 'Archimate_CourseOfAction';
export function isArchimate_CourseOfAction(item) {
    return reflection.isInstance(item, Archimate_CourseOfAction);
}
export const Archimate_Data_Object = 'Archimate_Data_Object';
export function isArchimate_Data_Object(item) {
    return reflection.isInstance(item, Archimate_Data_Object);
}
export const Archimate_Deliverable = 'Archimate_Deliverable';
export function isArchimate_Deliverable(item) {
    return reflection.isInstance(item, Archimate_Deliverable);
}
export const Archimate_Device = 'Archimate_Device';
export function isArchimate_Device(item) {
    return reflection.isInstance(item, Archimate_Device);
}
export const Archimate_Driver = 'Archimate_Driver';
export function isArchimate_Driver(item) {
    return reflection.isInstance(item, Archimate_Driver);
}
export const Archimate_Gap = 'Archimate_Gap';
export function isArchimate_Gap(item) {
    return reflection.isInstance(item, Archimate_Gap);
}
export const Archimate_Goal = 'Archimate_Goal';
export function isArchimate_Goal(item) {
    return reflection.isInstance(item, Archimate_Goal);
}
export const Archimate_ImplementationEvent = 'Archimate_ImplementationEvent';
export function isArchimate_ImplementationEvent(item) {
    return reflection.isInstance(item, Archimate_ImplementationEvent);
}
export const Archimate_Meaning = 'Archimate_Meaning';
export function isArchimate_Meaning(item) {
    return reflection.isInstance(item, Archimate_Meaning);
}
export const Archimate_Node = 'Archimate_Node';
export function isArchimate_Node(item) {
    return reflection.isInstance(item, Archimate_Node);
}
export const Archimate_Outcome = 'Archimate_Outcome';
export function isArchimate_Outcome(item) {
    return reflection.isInstance(item, Archimate_Outcome);
}
export const Archimate_Path = 'Archimate_Path';
export function isArchimate_Path(item) {
    return reflection.isInstance(item, Archimate_Path);
}
export const Archimate_Plateau = 'Archimate_Plateau';
export function isArchimate_Plateau(item) {
    return reflection.isInstance(item, Archimate_Plateau);
}
export const Archimate_Principle = 'Archimate_Principle';
export function isArchimate_Principle(item) {
    return reflection.isInstance(item, Archimate_Principle);
}
export const Archimate_Product = 'Archimate_Product';
export function isArchimate_Product(item) {
    return reflection.isInstance(item, Archimate_Product);
}
export const Archimate_Representation = 'Archimate_Representation';
export function isArchimate_Representation(item) {
    return reflection.isInstance(item, Archimate_Representation);
}
export const Archimate_Requirement = 'Archimate_Requirement';
export function isArchimate_Requirement(item) {
    return reflection.isInstance(item, Archimate_Requirement);
}
export const Archimate_Resource = 'Archimate_Resource';
export function isArchimate_Resource(item) {
    return reflection.isInstance(item, Archimate_Resource);
}
export const Archimate_Stakeholder = 'Archimate_Stakeholder';
export function isArchimate_Stakeholder(item) {
    return reflection.isInstance(item, Archimate_Stakeholder);
}
export const Archimate_SystemSoftware = 'Archimate_SystemSoftware';
export function isArchimate_SystemSoftware(item) {
    return reflection.isInstance(item, Archimate_SystemSoftware);
}
export const Archimate_Technology_Collaboration = 'Archimate_Technology_Collaboration';
export function isArchimate_Technology_Collaboration(item) {
    return reflection.isInstance(item, Archimate_Technology_Collaboration);
}
export const Archimate_Technology_Event = 'Archimate_Technology_Event';
export function isArchimate_Technology_Event(item) {
    return reflection.isInstance(item, Archimate_Technology_Event);
}
export const Archimate_Technology_Function = 'Archimate_Technology_Function';
export function isArchimate_Technology_Function(item) {
    return reflection.isInstance(item, Archimate_Technology_Function);
}
export const Archimate_Technology_Interaction = 'Archimate_Technology_Interaction';
export function isArchimate_Technology_Interaction(item) {
    return reflection.isInstance(item, Archimate_Technology_Interaction);
}
export const Archimate_Technology_Interface = 'Archimate_Technology_Interface';
export function isArchimate_Technology_Interface(item) {
    return reflection.isInstance(item, Archimate_Technology_Interface);
}
export const Archimate_Technology_Process = 'Archimate_Technology_Process';
export function isArchimate_Technology_Process(item) {
    return reflection.isInstance(item, Archimate_Technology_Process);
}
export const Archimate_Technology_Service = 'Archimate_Technology_Service';
export function isArchimate_Technology_Service(item) {
    return reflection.isInstance(item, Archimate_Technology_Service);
}
export const Archimate_Value = 'Archimate_Value';
export function isArchimate_Value(item) {
    return reflection.isInstance(item, Archimate_Value);
}
export const Archimate_ValueStream = 'Archimate_ValueStream';
export function isArchimate_ValueStream(item) {
    return reflection.isInstance(item, Archimate_ValueStream);
}
export const Archimate_WorkPackage = 'Archimate_WorkPackage';
export function isArchimate_WorkPackage(item) {
    return reflection.isInstance(item, Archimate_WorkPackage);
}
export const ArchimateModel = 'ArchimateModel';
export function isArchimateModel(item) {
    return reflection.isInstance(item, ArchimateModel);
}
export const ArchimateRef = 'ArchimateRef';
export function isArchimateRef(item) {
    return reflection.isInstance(item, ArchimateRef);
}
export const ArchiverseModel = 'ArchiverseModel';
export function isArchiverseModel(item) {
    return reflection.isInstance(item, ArchiverseModel);
}
export const AssignmentRelationship = 'AssignmentRelationship';
export function isAssignmentRelationship(item) {
    return reflection.isInstance(item, AssignmentRelationship);
}
export const AssociationRelationship = 'AssociationRelationship';
export function isAssociationRelationship(item) {
    return reflection.isInstance(item, AssociationRelationship);
}
export const BPC_AreaPath = 'BPC_AreaPath';
export function isBPC_AreaPath(item) {
    return reflection.isInstance(item, BPC_AreaPath);
}
export const BPC_BusinessOutcomeCategory = 'BPC_BusinessOutcomeCategory';
export function isBPC_BusinessOutcomeCategory(item) {
    return reflection.isInstance(item, BPC_BusinessOutcomeCategory);
}
export const BPC_BusinessProcessCatalog = 'BPC_BusinessProcessCatalog';
export function isBPC_BusinessProcessCatalog(item) {
    return reflection.isInstance(item, BPC_BusinessProcessCatalog);
}
export const BPC_ConfigurationDeliverable = 'BPC_ConfigurationDeliverable';
export function isBPC_ConfigurationDeliverable(item) {
    return reflection.isInstance(item, BPC_ConfigurationDeliverable);
}
export const BPC_Description = 'BPC_Description';
export function isBPC_Description(item) {
    return reflection.isInstance(item, BPC_Description);
}
export const BPC_Effort = 'BPC_Effort';
export function isBPC_Effort(item) {
    return reflection.isInstance(item, BPC_Effort);
}
export const BPC_EndToEndProcess = 'BPC_EndToEndProcess';
export function isBPC_EndToEndProcess(item) {
    return reflection.isInstance(item, BPC_EndToEndProcess);
}
export const BPC_Priority = 'BPC_Priority';
export function isBPC_Priority(item) {
    return reflection.isInstance(item, BPC_Priority);
}
export const BPC_Process = 'BPC_Process';
export function isBPC_Process(item) {
    return reflection.isInstance(item, BPC_Process);
}
export const BPC_ProcessArea = 'BPC_ProcessArea';
export function isBPC_ProcessArea(item) {
    return reflection.isInstance(item, BPC_ProcessArea);
}
export const BPC_Risk = 'BPC_Risk';
export function isBPC_Risk(item) {
    return reflection.isInstance(item, BPC_Risk);
}
export const BPC_Scenario = 'BPC_Scenario';
export function isBPC_Scenario(item) {
    return reflection.isInstance(item, BPC_Scenario);
}
export const BPC_TimeCriticality = 'BPC_TimeCriticality';
export function isBPC_TimeCriticality(item) {
    return reflection.isInstance(item, BPC_TimeCriticality);
}
export const BPC_ValueArea = 'BPC_ValueArea';
export function isBPC_ValueArea(item) {
    return reflection.isInstance(item, BPC_ValueArea);
}
export const BPMN_Bpmn_Model = 'BPMN_Bpmn_Model';
export function isBPMN_Bpmn_Model(item) {
    return reflection.isInstance(item, BPMN_Bpmn_Model);
}
export const BPMN_Event = 'BPMN_Event';
export function isBPMN_Event(item) {
    return reflection.isInstance(item, BPMN_Event);
}
export const BPMN_EventType = 'BPMN_EventType';
export function isBPMN_EventType(item) {
    return reflection.isInstance(item, BPMN_EventType);
}
export const BPMN_Gateway = 'BPMN_Gateway';
export function isBPMN_Gateway(item) {
    return reflection.isInstance(item, BPMN_Gateway);
}
export const BPMN_GatewayType = 'BPMN_GatewayType';
export function isBPMN_GatewayType(item) {
    return reflection.isInstance(item, BPMN_GatewayType);
}
export const BPMN_Task = 'BPMN_Task';
export function isBPMN_Task(item) {
    return reflection.isInstance(item, BPMN_Task);
}
export const BPMN_TaskType = 'BPMN_TaskType';
export function isBPMN_TaskType(item) {
    return reflection.isInstance(item, BPMN_TaskType);
}
export const BusinessProcessCatalogImplementation = 'BusinessProcessCatalogImplementation';
export function isBusinessProcessCatalogImplementation(item) {
    return reflection.isInstance(item, BusinessProcessCatalogImplementation);
}
export const BusinessProcessImplementation = 'BusinessProcessImplementation';
export function isBusinessProcessImplementation(item) {
    return reflection.isInstance(item, BusinessProcessImplementation);
}
export const CMMI_Artifact = 'CMMI_Artifact';
export function isCMMI_Artifact(item) {
    return reflection.isInstance(item, CMMI_Artifact);
}
export const CMMI_Assessment = 'CMMI_Assessment';
export function isCMMI_Assessment(item) {
    return reflection.isInstance(item, CMMI_Assessment);
}
export const CMMI_CapabilityLevel = 'CMMI_CapabilityLevel';
export function isCMMI_CapabilityLevel(item) {
    return reflection.isInstance(item, CMMI_CapabilityLevel);
}
export const CMMI_Goal = 'CMMI_Goal';
export function isCMMI_Goal(item) {
    return reflection.isInstance(item, CMMI_Goal);
}
export const CMMI_MaturityLevel = 'CMMI_MaturityLevel';
export function isCMMI_MaturityLevel(item) {
    return reflection.isInstance(item, CMMI_MaturityLevel);
}
export const CMMI_MaturityRating = 'CMMI_MaturityRating';
export function isCMMI_MaturityRating(item) {
    return reflection.isInstance(item, CMMI_MaturityRating);
}
export const CMMI_Model = 'CMMI_Model';
export function isCMMI_Model(item) {
    return reflection.isInstance(item, CMMI_Model);
}
export const CMMI_Practice = 'CMMI_Practice';
export function isCMMI_Practice(item) {
    return reflection.isInstance(item, CMMI_Practice);
}
export const CMMI_Process = 'CMMI_Process';
export function isCMMI_Process(item) {
    return reflection.isInstance(item, CMMI_Process);
}
export const CMMI_ProcessArea = 'CMMI_ProcessArea';
export function isCMMI_ProcessArea(item) {
    return reflection.isInstance(item, CMMI_ProcessArea);
}
export const CMMI_WorkProduct = 'CMMI_WorkProduct';
export function isCMMI_WorkProduct(item) {
    return reflection.isInstance(item, CMMI_WorkProduct);
}
export const CMMN_Case = 'CMMN_Case';
export function isCMMN_Case(item) {
    return reflection.isInstance(item, CMMN_Case);
}
export const CMMN_CaseFileItem = 'CMMN_CaseFileItem';
export function isCMMN_CaseFileItem(item) {
    return reflection.isInstance(item, CMMN_CaseFileItem);
}
export const CMMN_EventListener = 'CMMN_EventListener';
export function isCMMN_EventListener(item) {
    return reflection.isInstance(item, CMMN_EventListener);
}
export const CMMN_Milestone = 'CMMN_Milestone';
export function isCMMN_Milestone(item) {
    return reflection.isInstance(item, CMMN_Milestone);
}
export const CMMN_Model = 'CMMN_Model';
export function isCMMN_Model(item) {
    return reflection.isInstance(item, CMMN_Model);
}
export const CMMN_PlanFragment = 'CMMN_PlanFragment';
export function isCMMN_PlanFragment(item) {
    return reflection.isInstance(item, CMMN_PlanFragment);
}
export const CMMN_PlanningTable = 'CMMN_PlanningTable';
export function isCMMN_PlanningTable(item) {
    return reflection.isInstance(item, CMMN_PlanningTable);
}
export const CMMN_Sentry = 'CMMN_Sentry';
export function isCMMN_Sentry(item) {
    return reflection.isInstance(item, CMMN_Sentry);
}
export const CMMN_Stage = 'CMMN_Stage';
export function isCMMN_Stage(item) {
    return reflection.isInstance(item, CMMN_Stage);
}
export const CMMN_Task = 'CMMN_Task';
export function isCMMN_Task(item) {
    return reflection.isInstance(item, CMMN_Task);
}
export const CompositionRelationship = 'CompositionRelationship';
export function isCompositionRelationship(item) {
    return reflection.isInstance(item, CompositionRelationship);
}
export const D365BC_Codeunit = 'D365BC_Codeunit';
export function isD365BC_Codeunit(item) {
    return reflection.isInstance(item, D365BC_Codeunit);
}
export const D365BC_Field = 'D365BC_Field';
export function isD365BC_Field(item) {
    return reflection.isInstance(item, D365BC_Field);
}
export const D365BC_FieldRelation = 'D365BC_FieldRelation';
export function isD365BC_FieldRelation(item) {
    return reflection.isInstance(item, D365BC_FieldRelation);
}
export const D365BC_Key = 'D365BC_Key';
export function isD365BC_Key(item) {
    return reflection.isInstance(item, D365BC_Key);
}
export const D365BC_Method = 'D365BC_Method';
export function isD365BC_Method(item) {
    return reflection.isInstance(item, D365BC_Method);
}
export const D365BC_Model = 'D365BC_Model';
export function isD365BC_Model(item) {
    return reflection.isInstance(item, D365BC_Model);
}
export const D365BC_Page = 'D365BC_Page';
export function isD365BC_Page(item) {
    return reflection.isInstance(item, D365BC_Page);
}
export const D365BC_PageAction = 'D365BC_PageAction';
export function isD365BC_PageAction(item) {
    return reflection.isInstance(item, D365BC_PageAction);
}
export const D365BC_PageLayoutElement = 'D365BC_PageLayoutElement';
export function isD365BC_PageLayoutElement(item) {
    return reflection.isInstance(item, D365BC_PageLayoutElement);
}
export const D365BC_Parameter = 'D365BC_Parameter';
export function isD365BC_Parameter(item) {
    return reflection.isInstance(item, D365BC_Parameter);
}
export const D365BC_Table = 'D365BC_Table';
export function isD365BC_Table(item) {
    return reflection.isInstance(item, D365BC_Table);
}
export const D365BC_TableRelation = 'D365BC_TableRelation';
export function isD365BC_TableRelation(item) {
    return reflection.isInstance(item, D365BC_TableRelation);
}
export const D365FO_AOTPackage = 'D365FO_AOTPackage';
export function isD365FO_AOTPackage(item) {
    return reflection.isInstance(item, D365FO_AOTPackage);
}
export const D365FO_Class = 'D365FO_Class';
export function isD365FO_Class(item) {
    return reflection.isInstance(item, D365FO_Class);
}
export const D365FO_DataEntity = 'D365FO_DataEntity';
export function isD365FO_DataEntity(item) {
    return reflection.isInstance(item, D365FO_DataEntity);
}
export const D365FO_Description = 'D365FO_Description';
export function isD365FO_Description(item) {
    return reflection.isInstance(item, D365FO_Description);
}
export const D365FO_EntityField = 'D365FO_EntityField';
export function isD365FO_EntityField(item) {
    return reflection.isInstance(item, D365FO_EntityField);
}
export const D365FO_Enum = 'D365FO_Enum';
export function isD365FO_Enum(item) {
    return reflection.isInstance(item, D365FO_Enum);
}
export const D365FO_EnumValue = 'D365FO_EnumValue';
export function isD365FO_EnumValue(item) {
    return reflection.isInstance(item, D365FO_EnumValue);
}
export const D365FO_Label = 'D365FO_Label';
export function isD365FO_Label(item) {
    return reflection.isInstance(item, D365FO_Label);
}
export const D365FO_Method = 'D365FO_Method';
export function isD365FO_Method(item) {
    return reflection.isInstance(item, D365FO_Method);
}
export const D365FO_MethodParameter = 'D365FO_MethodParameter';
export function isD365FO_MethodParameter(item) {
    return reflection.isInstance(item, D365FO_MethodParameter);
}
export const D365FO_Model = 'D365FO_Model';
export function isD365FO_Model(item) {
    return reflection.isInstance(item, D365FO_Model);
}
export const D365FO_ModelStore = 'D365FO_ModelStore';
export function isD365FO_ModelStore(item) {
    return reflection.isInstance(item, D365FO_ModelStore);
}
export const D365FO_Publisher = 'D365FO_Publisher';
export function isD365FO_Publisher(item) {
    return reflection.isInstance(item, D365FO_Publisher);
}
export const D365FO_Table = 'D365FO_Table';
export function isD365FO_Table(item) {
    return reflection.isInstance(item, D365FO_Table);
}
export const D365FO_TableField = 'D365FO_TableField';
export function isD365FO_TableField(item) {
    return reflection.isInstance(item, D365FO_TableField);
}
export const D365FO_TableRelation = 'D365FO_TableRelation';
export function isD365FO_TableRelation(item) {
    return reflection.isInstance(item, D365FO_TableRelation);
}
export const D365FO_Version = 'D365FO_Version';
export function isD365FO_Version(item) {
    return reflection.isInstance(item, D365FO_Version);
}
export const DMN_BusinessKnowledgeModel = 'DMN_BusinessKnowledgeModel';
export function isDMN_BusinessKnowledgeModel(item) {
    return reflection.isInstance(item, DMN_BusinessKnowledgeModel);
}
export const DMN_Decision = 'DMN_Decision';
export function isDMN_Decision(item) {
    return reflection.isInstance(item, DMN_Decision);
}
export const DMN_DecisionRequirementsDiagram = 'DMN_DecisionRequirementsDiagram';
export function isDMN_DecisionRequirementsDiagram(item) {
    return reflection.isInstance(item, DMN_DecisionRequirementsDiagram);
}
export const DMN_DecisionTable = 'DMN_DecisionTable';
export function isDMN_DecisionTable(item) {
    return reflection.isInstance(item, DMN_DecisionTable);
}
export const DMN_Expression = 'DMN_Expression';
export function isDMN_Expression(item) {
    return reflection.isInstance(item, DMN_Expression);
}
export const DMN_InformationRequirement = 'DMN_InformationRequirement';
export function isDMN_InformationRequirement(item) {
    return reflection.isInstance(item, DMN_InformationRequirement);
}
export const DMN_InputData = 'DMN_InputData';
export function isDMN_InputData(item) {
    return reflection.isInstance(item, DMN_InputData);
}
export const DMN_KnowledgeSource = 'DMN_KnowledgeSource';
export function isDMN_KnowledgeSource(item) {
    return reflection.isInstance(item, DMN_KnowledgeSource);
}
export const DMN_Model = 'DMN_Model';
export function isDMN_Model(item) {
    return reflection.isInstance(item, DMN_Model);
}
export const FlowRelationship = 'FlowRelationship';
export function isFlowRelationship(item) {
    return reflection.isInstance(item, FlowRelationship);
}
export const InfluenceRelationship = 'InfluenceRelationship';
export function isInfluenceRelationship(item) {
    return reflection.isInstance(item, InfluenceRelationship);
}
export const PMBOK_ActivityAttributes = 'PMBOK_ActivityAttributes';
export function isPMBOK_ActivityAttributes(item) {
    return reflection.isInstance(item, PMBOK_ActivityAttributes);
}
export const PMBOK_ActivityList = 'PMBOK_ActivityList';
export function isPMBOK_ActivityList(item) {
    return reflection.isInstance(item, PMBOK_ActivityList);
}
export const PMBOK_Agreements = 'PMBOK_Agreements';
export function isPMBOK_Agreements(item) {
    return reflection.isInstance(item, PMBOK_Agreements);
}
export const PMBOK_AssumptionLog = 'PMBOK_AssumptionLog';
export function isPMBOK_AssumptionLog(item) {
    return reflection.isInstance(item, PMBOK_AssumptionLog);
}
export const PMBOK_BasisOfEstimates = 'PMBOK_BasisOfEstimates';
export function isPMBOK_BasisOfEstimates(item) {
    return reflection.isInstance(item, PMBOK_BasisOfEstimates);
}
export const PMBOK_BidDocuments = 'PMBOK_BidDocuments';
export function isPMBOK_BidDocuments(item) {
    return reflection.isInstance(item, PMBOK_BidDocuments);
}
export const PMBOK_ChangeLog = 'PMBOK_ChangeLog';
export function isPMBOK_ChangeLog(item) {
    return reflection.isInstance(item, PMBOK_ChangeLog);
}
export const PMBOK_ChangeManagementPlan = 'PMBOK_ChangeManagementPlan';
export function isPMBOK_ChangeManagementPlan(item) {
    return reflection.isInstance(item, PMBOK_ChangeManagementPlan);
}
export const PMBOK_ChangeRequest = 'PMBOK_ChangeRequest';
export function isPMBOK_ChangeRequest(item) {
    return reflection.isInstance(item, PMBOK_ChangeRequest);
}
export const PMBOK_CommunicationsManagementPlan = 'PMBOK_CommunicationsManagementPlan';
export function isPMBOK_CommunicationsManagementPlan(item) {
    return reflection.isInstance(item, PMBOK_CommunicationsManagementPlan);
}
export const PMBOK_ConfigurationManagementPlan = 'PMBOK_ConfigurationManagementPlan';
export function isPMBOK_ConfigurationManagementPlan(item) {
    return reflection.isInstance(item, PMBOK_ConfigurationManagementPlan);
}
export const PMBOK_CostBaseline = 'PMBOK_CostBaseline';
export function isPMBOK_CostBaseline(item) {
    return reflection.isInstance(item, PMBOK_CostBaseline);
}
export const PMBOK_CostEstimates = 'PMBOK_CostEstimates';
export function isPMBOK_CostEstimates(item) {
    return reflection.isInstance(item, PMBOK_CostEstimates);
}
export const PMBOK_CostManagementPlan = 'PMBOK_CostManagementPlan';
export function isPMBOK_CostManagementPlan(item) {
    return reflection.isInstance(item, PMBOK_CostManagementPlan);
}
export const PMBOK_Deliverable = 'PMBOK_Deliverable';
export function isPMBOK_Deliverable(item) {
    return reflection.isInstance(item, PMBOK_Deliverable);
}
export const PMBOK_DurationEstimates = 'PMBOK_DurationEstimates';
export function isPMBOK_DurationEstimates(item) {
    return reflection.isInstance(item, PMBOK_DurationEstimates);
}
export const PMBOK_EnterpriseEnvironmentalFactors = 'PMBOK_EnterpriseEnvironmentalFactors';
export function isPMBOK_EnterpriseEnvironmentalFactors(item) {
    return reflection.isInstance(item, PMBOK_EnterpriseEnvironmentalFactors);
}
export const PMBOK_FinalReport = 'PMBOK_FinalReport';
export function isPMBOK_FinalReport(item) {
    return reflection.isInstance(item, PMBOK_FinalReport);
}
export const PMBOK_Input = 'PMBOK_Input';
export function isPMBOK_Input(item) {
    return reflection.isInstance(item, PMBOK_Input);
}
export const PMBOK_IssueLog = 'PMBOK_IssueLog';
export function isPMBOK_IssueLog(item) {
    return reflection.isInstance(item, PMBOK_IssueLog);
}
export const PMBOK_ITTO_Reference = 'PMBOK_ITTO_Reference';
export function isPMBOK_ITTO_Reference(item) {
    return reflection.isInstance(item, PMBOK_ITTO_Reference);
}
export const PMBOK_KnowledgeArea = 'PMBOK_KnowledgeArea';
export function isPMBOK_KnowledgeArea(item) {
    return reflection.isInstance(item, PMBOK_KnowledgeArea);
}
export const PMBOK_LessonsLearnedRegister = 'PMBOK_LessonsLearnedRegister';
export function isPMBOK_LessonsLearnedRegister(item) {
    return reflection.isInstance(item, PMBOK_LessonsLearnedRegister);
}
export const PMBOK_LogEntry = 'PMBOK_LogEntry';
export function isPMBOK_LogEntry(item) {
    return reflection.isInstance(item, PMBOK_LogEntry);
}
export const PMBOK_MakeOrBuyDecisions = 'PMBOK_MakeOrBuyDecisions';
export function isPMBOK_MakeOrBuyDecisions(item) {
    return reflection.isInstance(item, PMBOK_MakeOrBuyDecisions);
}
export const PMBOK_MilestoneList = 'PMBOK_MilestoneList';
export function isPMBOK_MilestoneList(item) {
    return reflection.isInstance(item, PMBOK_MilestoneList);
}
export const PMBOK_OrganizationalProcessAssets = 'PMBOK_OrganizationalProcessAssets';
export function isPMBOK_OrganizationalProcessAssets(item) {
    return reflection.isInstance(item, PMBOK_OrganizationalProcessAssets);
}
export const PMBOK_Output = 'PMBOK_Output';
export function isPMBOK_Output(item) {
    return reflection.isInstance(item, PMBOK_Output);
}
export const PMBOK_PerformanceMeasurementBaseline = 'PMBOK_PerformanceMeasurementBaseline';
export function isPMBOK_PerformanceMeasurementBaseline(item) {
    return reflection.isInstance(item, PMBOK_PerformanceMeasurementBaseline);
}
export const PMBOK_ProcessGroup = 'PMBOK_ProcessGroup';
export function isPMBOK_ProcessGroup(item) {
    return reflection.isInstance(item, PMBOK_ProcessGroup);
}
export const PMBOK_ProcurementManagementPlan = 'PMBOK_ProcurementManagementPlan';
export function isPMBOK_ProcurementManagementPlan(item) {
    return reflection.isInstance(item, PMBOK_ProcurementManagementPlan);
}
export const PMBOK_ProcurementStatementOfWork = 'PMBOK_ProcurementStatementOfWork';
export function isPMBOK_ProcurementStatementOfWork(item) {
    return reflection.isInstance(item, PMBOK_ProcurementStatementOfWork);
}
export const PMBOK_Project = 'PMBOK_Project';
export function isPMBOK_Project(item) {
    return reflection.isInstance(item, PMBOK_Project);
}
export const PMBOK_ProjectCalendar = 'PMBOK_ProjectCalendar';
export function isPMBOK_ProjectCalendar(item) {
    return reflection.isInstance(item, PMBOK_ProjectCalendar);
}
export const PMBOK_ProjectCharter = 'PMBOK_ProjectCharter';
export function isPMBOK_ProjectCharter(item) {
    return reflection.isInstance(item, PMBOK_ProjectCharter);
}
export const PMBOK_ProjectCommunications = 'PMBOK_ProjectCommunications';
export function isPMBOK_ProjectCommunications(item) {
    return reflection.isInstance(item, PMBOK_ProjectCommunications);
}
export const PMBOK_ProjectFundingRequirements = 'PMBOK_ProjectFundingRequirements';
export function isPMBOK_ProjectFundingRequirements(item) {
    return reflection.isInstance(item, PMBOK_ProjectFundingRequirements);
}
export const PMBOK_ProjectManagementPlan = 'PMBOK_ProjectManagementPlan';
export function isPMBOK_ProjectManagementPlan(item) {
    return reflection.isInstance(item, PMBOK_ProjectManagementPlan);
}
export const PMBOK_ProjectProcess = 'PMBOK_ProjectProcess';
export function isPMBOK_ProjectProcess(item) {
    return reflection.isInstance(item, PMBOK_ProjectProcess);
}
export const PMBOK_ProjectSchedule = 'PMBOK_ProjectSchedule';
export function isPMBOK_ProjectSchedule(item) {
    return reflection.isInstance(item, PMBOK_ProjectSchedule);
}
export const PMBOK_ProjectScheduleNetworkDiagram = 'PMBOK_ProjectScheduleNetworkDiagram';
export function isPMBOK_ProjectScheduleNetworkDiagram(item) {
    return reflection.isInstance(item, PMBOK_ProjectScheduleNetworkDiagram);
}
export const PMBOK_ProjectScopeStatement = 'PMBOK_ProjectScopeStatement';
export function isPMBOK_ProjectScopeStatement(item) {
    return reflection.isInstance(item, PMBOK_ProjectScopeStatement);
}
export const PMBOK_QualityControlMeasurements = 'PMBOK_QualityControlMeasurements';
export function isPMBOK_QualityControlMeasurements(item) {
    return reflection.isInstance(item, PMBOK_QualityControlMeasurements);
}
export const PMBOK_QualityManagementPlan = 'PMBOK_QualityManagementPlan';
export function isPMBOK_QualityManagementPlan(item) {
    return reflection.isInstance(item, PMBOK_QualityManagementPlan);
}
export const PMBOK_QualityMetrics = 'PMBOK_QualityMetrics';
export function isPMBOK_QualityMetrics(item) {
    return reflection.isInstance(item, PMBOK_QualityMetrics);
}
export const PMBOK_QualityReport = 'PMBOK_QualityReport';
export function isPMBOK_QualityReport(item) {
    return reflection.isInstance(item, PMBOK_QualityReport);
}
export const PMBOK_RequirementsDocumentation = 'PMBOK_RequirementsDocumentation';
export function isPMBOK_RequirementsDocumentation(item) {
    return reflection.isInstance(item, PMBOK_RequirementsDocumentation);
}
export const PMBOK_RequirementsManagementPlan = 'PMBOK_RequirementsManagementPlan';
export function isPMBOK_RequirementsManagementPlan(item) {
    return reflection.isInstance(item, PMBOK_RequirementsManagementPlan);
}
export const PMBOK_RequirementsTraceabilityMatrix = 'PMBOK_RequirementsTraceabilityMatrix';
export function isPMBOK_RequirementsTraceabilityMatrix(item) {
    return reflection.isInstance(item, PMBOK_RequirementsTraceabilityMatrix);
}
export const PMBOK_ResourceAssignments = 'PMBOK_ResourceAssignments';
export function isPMBOK_ResourceAssignments(item) {
    return reflection.isInstance(item, PMBOK_ResourceAssignments);
}
export const PMBOK_ResourceBreakdownStructure = 'PMBOK_ResourceBreakdownStructure';
export function isPMBOK_ResourceBreakdownStructure(item) {
    return reflection.isInstance(item, PMBOK_ResourceBreakdownStructure);
}
export const PMBOK_ResourceCalendar = 'PMBOK_ResourceCalendar';
export function isPMBOK_ResourceCalendar(item) {
    return reflection.isInstance(item, PMBOK_ResourceCalendar);
}
export const PMBOK_ResourceManagementPlan = 'PMBOK_ResourceManagementPlan';
export function isPMBOK_ResourceManagementPlan(item) {
    return reflection.isInstance(item, PMBOK_ResourceManagementPlan);
}
export const PMBOK_ResourceRequirements = 'PMBOK_ResourceRequirements';
export function isPMBOK_ResourceRequirements(item) {
    return reflection.isInstance(item, PMBOK_ResourceRequirements);
}
export const PMBOK_RiskItem = 'PMBOK_RiskItem';
export function isPMBOK_RiskItem(item) {
    return reflection.isInstance(item, PMBOK_RiskItem);
}
export const PMBOK_RiskManagementPlan = 'PMBOK_RiskManagementPlan';
export function isPMBOK_RiskManagementPlan(item) {
    return reflection.isInstance(item, PMBOK_RiskManagementPlan);
}
export const PMBOK_RiskRegister = 'PMBOK_RiskRegister';
export function isPMBOK_RiskRegister(item) {
    return reflection.isInstance(item, PMBOK_RiskRegister);
}
export const PMBOK_RiskReport = 'PMBOK_RiskReport';
export function isPMBOK_RiskReport(item) {
    return reflection.isInstance(item, PMBOK_RiskReport);
}
export const PMBOK_ScheduleBaseline = 'PMBOK_ScheduleBaseline';
export function isPMBOK_ScheduleBaseline(item) {
    return reflection.isInstance(item, PMBOK_ScheduleBaseline);
}
export const PMBOK_ScheduleData = 'PMBOK_ScheduleData';
export function isPMBOK_ScheduleData(item) {
    return reflection.isInstance(item, PMBOK_ScheduleData);
}
export const PMBOK_ScheduleManagementPlan = 'PMBOK_ScheduleManagementPlan';
export function isPMBOK_ScheduleManagementPlan(item) {
    return reflection.isInstance(item, PMBOK_ScheduleManagementPlan);
}
export const PMBOK_ScopeBaseline = 'PMBOK_ScopeBaseline';
export function isPMBOK_ScopeBaseline(item) {
    return reflection.isInstance(item, PMBOK_ScopeBaseline);
}
export const PMBOK_ScopeManagementPlan = 'PMBOK_ScopeManagementPlan';
export function isPMBOK_ScopeManagementPlan(item) {
    return reflection.isInstance(item, PMBOK_ScopeManagementPlan);
}
export const PMBOK_SourceSelectionCriteria = 'PMBOK_SourceSelectionCriteria';
export function isPMBOK_SourceSelectionCriteria(item) {
    return reflection.isInstance(item, PMBOK_SourceSelectionCriteria);
}
export const PMBOK_StakeholderEngagementPlan = 'PMBOK_StakeholderEngagementPlan';
export function isPMBOK_StakeholderEngagementPlan(item) {
    return reflection.isInstance(item, PMBOK_StakeholderEngagementPlan);
}
export const PMBOK_StakeholderItem = 'PMBOK_StakeholderItem';
export function isPMBOK_StakeholderItem(item) {
    return reflection.isInstance(item, PMBOK_StakeholderItem);
}
export const PMBOK_StakeholderRegister = 'PMBOK_StakeholderRegister';
export function isPMBOK_StakeholderRegister(item) {
    return reflection.isInstance(item, PMBOK_StakeholderRegister);
}
export const PMBOK_TeamCharter = 'PMBOK_TeamCharter';
export function isPMBOK_TeamCharter(item) {
    return reflection.isInstance(item, PMBOK_TeamCharter);
}
export const PMBOK_TestAndEvaluationDocuments = 'PMBOK_TestAndEvaluationDocuments';
export function isPMBOK_TestAndEvaluationDocuments(item) {
    return reflection.isInstance(item, PMBOK_TestAndEvaluationDocuments);
}
export const PMBOK_ToolTechnique = 'PMBOK_ToolTechnique';
export function isPMBOK_ToolTechnique(item) {
    return reflection.isInstance(item, PMBOK_ToolTechnique);
}
export const PMBOK_WBS = 'PMBOK_WBS';
export function isPMBOK_WBS(item) {
    return reflection.isInstance(item, PMBOK_WBS);
}
export const PMBOK_WBS_Dictionary = 'PMBOK_WBS_Dictionary';
export function isPMBOK_WBS_Dictionary(item) {
    return reflection.isInstance(item, PMBOK_WBS_Dictionary);
}
export const PRINCE2_Activity = 'PRINCE2_Activity';
export function isPRINCE2_Activity(item) {
    return reflection.isInstance(item, PRINCE2_Activity);
}
export const PRINCE2_BenefitsManagementApproach = 'PRINCE2_BenefitsManagementApproach';
export function isPRINCE2_BenefitsManagementApproach(item) {
    return reflection.isInstance(item, PRINCE2_BenefitsManagementApproach);
}
export const PRINCE2_BusinessCase = 'PRINCE2_BusinessCase';
export function isPRINCE2_BusinessCase(item) {
    return reflection.isInstance(item, PRINCE2_BusinessCase);
}
export const PRINCE2_ChangeControlApproach = 'PRINCE2_ChangeControlApproach';
export function isPRINCE2_ChangeControlApproach(item) {
    return reflection.isInstance(item, PRINCE2_ChangeControlApproach);
}
export const PRINCE2_CheckpointReport = 'PRINCE2_CheckpointReport';
export function isPRINCE2_CheckpointReport(item) {
    return reflection.isInstance(item, PRINCE2_CheckpointReport);
}
export const PRINCE2_ClosingProject = 'PRINCE2_ClosingProject';
export function isPRINCE2_ClosingProject(item) {
    return reflection.isInstance(item, PRINCE2_ClosingProject);
}
export const PRINCE2_CommunicationManagementApproach = 'PRINCE2_CommunicationManagementApproach';
export function isPRINCE2_CommunicationManagementApproach(item) {
    return reflection.isInstance(item, PRINCE2_CommunicationManagementApproach);
}
export const PRINCE2_ConfigurationItemRecord = 'PRINCE2_ConfigurationItemRecord';
export function isPRINCE2_ConfigurationItemRecord(item) {
    return reflection.isInstance(item, PRINCE2_ConfigurationItemRecord);
}
export const PRINCE2_ControllingStage = 'PRINCE2_ControllingStage';
export function isPRINCE2_ControllingStage(item) {
    return reflection.isInstance(item, PRINCE2_ControllingStage);
}
export const PRINCE2_DailyLog = 'PRINCE2_DailyLog';
export function isPRINCE2_DailyLog(item) {
    return reflection.isInstance(item, PRINCE2_DailyLog);
}
export const PRINCE2_Directing = 'PRINCE2_Directing';
export function isPRINCE2_Directing(item) {
    return reflection.isInstance(item, PRINCE2_Directing);
}
export const PRINCE2_EndProjectReport = 'PRINCE2_EndProjectReport';
export function isPRINCE2_EndProjectReport(item) {
    return reflection.isInstance(item, PRINCE2_EndProjectReport);
}
export const PRINCE2_EndStageReport = 'PRINCE2_EndStageReport';
export function isPRINCE2_EndStageReport(item) {
    return reflection.isInstance(item, PRINCE2_EndStageReport);
}
export const PRINCE2_ExceptionPlan = 'PRINCE2_ExceptionPlan';
export function isPRINCE2_ExceptionPlan(item) {
    return reflection.isInstance(item, PRINCE2_ExceptionPlan);
}
export const PRINCE2_ExceptionReport = 'PRINCE2_ExceptionReport';
export function isPRINCE2_ExceptionReport(item) {
    return reflection.isInstance(item, PRINCE2_ExceptionReport);
}
export const PRINCE2_HighlightReport = 'PRINCE2_HighlightReport';
export function isPRINCE2_HighlightReport(item) {
    return reflection.isInstance(item, PRINCE2_HighlightReport);
}
export const PRINCE2_Initiating = 'PRINCE2_Initiating';
export function isPRINCE2_Initiating(item) {
    return reflection.isInstance(item, PRINCE2_Initiating);
}
export const PRINCE2_IssueRegister = 'PRINCE2_IssueRegister';
export function isPRINCE2_IssueRegister(item) {
    return reflection.isInstance(item, PRINCE2_IssueRegister);
}
export const PRINCE2_IssueReport = 'PRINCE2_IssueReport';
export function isPRINCE2_IssueReport(item) {
    return reflection.isInstance(item, PRINCE2_IssueReport);
}
export const PRINCE2_LessonsLog = 'PRINCE2_LessonsLog';
export function isPRINCE2_LessonsLog(item) {
    return reflection.isInstance(item, PRINCE2_LessonsLog);
}
export const PRINCE2_LessonsReport = 'PRINCE2_LessonsReport';
export function isPRINCE2_LessonsReport(item) {
    return reflection.isInstance(item, PRINCE2_LessonsReport);
}
export const PRINCE2_ManagingProductDelivery = 'PRINCE2_ManagingProductDelivery';
export function isPRINCE2_ManagingProductDelivery(item) {
    return reflection.isInstance(item, PRINCE2_ManagingProductDelivery);
}
export const PRINCE2_ManagingStageBoundary = 'PRINCE2_ManagingStageBoundary';
export function isPRINCE2_ManagingStageBoundary(item) {
    return reflection.isInstance(item, PRINCE2_ManagingStageBoundary);
}
export const PRINCE2_PID = 'PRINCE2_PID';
export function isPRINCE2_PID(item) {
    return reflection.isInstance(item, PRINCE2_PID);
}
export const PRINCE2_Plan = 'PRINCE2_Plan';
export function isPRINCE2_Plan(item) {
    return reflection.isInstance(item, PRINCE2_Plan);
}
export const PRINCE2_PlanOwnership = 'PRINCE2_PlanOwnership';
export function isPRINCE2_PlanOwnership(item) {
    return reflection.isInstance(item, PRINCE2_PlanOwnership);
}
export const PRINCE2_Principle = 'PRINCE2_Principle';
export function isPRINCE2_Principle(item) {
    return reflection.isInstance(item, PRINCE2_Principle);
}
export const PRINCE2_ProductDescription = 'PRINCE2_ProductDescription';
export function isPRINCE2_ProductDescription(item) {
    return reflection.isInstance(item, PRINCE2_ProductDescription);
}
export const PRINCE2_ProductStatusAccount = 'PRINCE2_ProductStatusAccount';
export function isPRINCE2_ProductStatusAccount(item) {
    return reflection.isInstance(item, PRINCE2_ProductStatusAccount);
}
export const PRINCE2_ProjectBrief = 'PRINCE2_ProjectBrief';
export function isPRINCE2_ProjectBrief(item) {
    return reflection.isInstance(item, PRINCE2_ProjectBrief);
}
export const PRINCE2_ProjectPlan = 'PRINCE2_ProjectPlan';
export function isPRINCE2_ProjectPlan(item) {
    return reflection.isInstance(item, PRINCE2_ProjectPlan);
}
export const PRINCE2_ProjectProductDescription = 'PRINCE2_ProjectProductDescription';
export function isPRINCE2_ProjectProductDescription(item) {
    return reflection.isInstance(item, PRINCE2_ProjectProductDescription);
}
export const PRINCE2_QualityManagementApproach = 'PRINCE2_QualityManagementApproach';
export function isPRINCE2_QualityManagementApproach(item) {
    return reflection.isInstance(item, PRINCE2_QualityManagementApproach);
}
export const PRINCE2_QualityRegister = 'PRINCE2_QualityRegister';
export function isPRINCE2_QualityRegister(item) {
    return reflection.isInstance(item, PRINCE2_QualityRegister);
}
export const PRINCE2_Ref = 'PRINCE2_Ref';
export function isPRINCE2_Ref(item) {
    return reflection.isInstance(item, PRINCE2_Ref);
}
export const PRINCE2_RiskManagementApproach = 'PRINCE2_RiskManagementApproach';
export function isPRINCE2_RiskManagementApproach(item) {
    return reflection.isInstance(item, PRINCE2_RiskManagementApproach);
}
export const PRINCE2_RiskRegister = 'PRINCE2_RiskRegister';
export function isPRINCE2_RiskRegister(item) {
    return reflection.isInstance(item, PRINCE2_RiskRegister);
}
export const PRINCE2_RiskReport = 'PRINCE2_RiskReport';
export function isPRINCE2_RiskReport(item) {
    return reflection.isInstance(item, PRINCE2_RiskReport);
}
export const PRINCE2_Role = 'PRINCE2_Role';
export function isPRINCE2_Role(item) {
    return reflection.isInstance(item, PRINCE2_Role);
}
export const PRINCE2_StagePlan = 'PRINCE2_StagePlan';
export function isPRINCE2_StagePlan(item) {
    return reflection.isInstance(item, PRINCE2_StagePlan);
}
export const PRINCE2_StartingUp = 'PRINCE2_StartingUp';
export function isPRINCE2_StartingUp(item) {
    return reflection.isInstance(item, PRINCE2_StartingUp);
}
export const PRINCE2_Tailoring = 'PRINCE2_Tailoring';
export function isPRINCE2_Tailoring(item) {
    return reflection.isInstance(item, PRINCE2_Tailoring);
}
export const PRINCE2_TeamPlan = 'PRINCE2_TeamPlan';
export function isPRINCE2_TeamPlan(item) {
    return reflection.isInstance(item, PRINCE2_TeamPlan);
}
export const PRINCE2_Theme = 'PRINCE2_Theme';
export function isPRINCE2_Theme(item) {
    return reflection.isInstance(item, PRINCE2_Theme);
}
export const PRINCE2_WorkPackage = 'PRINCE2_WorkPackage';
export function isPRINCE2_WorkPackage(item) {
    return reflection.isInstance(item, PRINCE2_WorkPackage);
}
export const RealizationRelationship = 'RealizationRelationship';
export function isRealizationRelationship(item) {
    return reflection.isInstance(item, RealizationRelationship);
}
export const SAP_Association = 'SAP_Association';
export function isSAP_Association(item) {
    return reflection.isInstance(item, SAP_Association);
}
export const SAP_BusinessObject = 'SAP_BusinessObject';
export function isSAP_BusinessObject(item) {
    return reflection.isInstance(item, SAP_BusinessObject);
}
export const SAP_BusinessObjectNode = 'SAP_BusinessObjectNode';
export function isSAP_BusinessObjectNode(item) {
    return reflection.isInstance(item, SAP_BusinessObjectNode);
}
export const SAP_BusinessProcess = 'SAP_BusinessProcess';
export function isSAP_BusinessProcess(item) {
    return reflection.isInstance(item, SAP_BusinessProcess);
}
export const SAP_Field = 'SAP_Field';
export function isSAP_Field(item) {
    return reflection.isInstance(item, SAP_Field);
}
export const SAP_FieldMapping = 'SAP_FieldMapping';
export function isSAP_FieldMapping(item) {
    return reflection.isInstance(item, SAP_FieldMapping);
}
export const SAP_Message = 'SAP_Message';
export function isSAP_Message(item) {
    return reflection.isInstance(item, SAP_Message);
}
export const SAP_Model = 'SAP_Model';
export function isSAP_Model(item) {
    return reflection.isInstance(item, SAP_Model);
}
export const SAP_Operation = 'SAP_Operation';
export function isSAP_Operation(item) {
    return reflection.isInstance(item, SAP_Operation);
}
export const SAP_ProcessStep = 'SAP_ProcessStep';
export function isSAP_ProcessStep(item) {
    return reflection.isInstance(item, SAP_ProcessStep);
}
export const SAP_Service = 'SAP_Service';
export function isSAP_Service(item) {
    return reflection.isInstance(item, SAP_Service);
}
export const SAP_Table = 'SAP_Table';
export function isSAP_Table(item) {
    return reflection.isInstance(item, SAP_Table);
}
export const SAP_TableField = 'SAP_TableField';
export function isSAP_TableField(item) {
    return reflection.isInstance(item, SAP_TableField);
}
export const SAP_TableKey = 'SAP_TableKey';
export function isSAP_TableKey(item) {
    return reflection.isInstance(item, SAP_TableKey);
}
export const SAP_ValueHelp = 'SAP_ValueHelp';
export function isSAP_ValueHelp(item) {
    return reflection.isInstance(item, SAP_ValueHelp);
}
export const SBVR_BusinessRule = 'SBVR_BusinessRule';
export function isSBVR_BusinessRule(item) {
    return reflection.isInstance(item, SBVR_BusinessRule);
}
export const SBVR_BusinessVocabulary = 'SBVR_BusinessVocabulary';
export function isSBVR_BusinessVocabulary(item) {
    return reflection.isInstance(item, SBVR_BusinessVocabulary);
}
export const SBVR_Characteristic = 'SBVR_Characteristic';
export function isSBVR_Characteristic(item) {
    return reflection.isInstance(item, SBVR_Characteristic);
}
export const SBVR_Concept = 'SBVR_Concept';
export function isSBVR_Concept(item) {
    return reflection.isInstance(item, SBVR_Concept);
}
export const SBVR_FactType = 'SBVR_FactType';
export function isSBVR_FactType(item) {
    return reflection.isInstance(item, SBVR_FactType);
}
export const SBVR_FactTypeRole = 'SBVR_FactTypeRole';
export function isSBVR_FactTypeRole(item) {
    return reflection.isInstance(item, SBVR_FactTypeRole);
}
export const SBVR_Model = 'SBVR_Model';
export function isSBVR_Model(item) {
    return reflection.isInstance(item, SBVR_Model);
}
export const SBVR_ObjectType = 'SBVR_ObjectType';
export function isSBVR_ObjectType(item) {
    return reflection.isInstance(item, SBVR_ObjectType);
}
export const ServingRelationship = 'ServingRelationship';
export function isServingRelationship(item) {
    return reflection.isInstance(item, ServingRelationship);
}
export const SpecializationRelationship = 'SpecializationRelationship';
export function isSpecializationRelationship(item) {
    return reflection.isInstance(item, SpecializationRelationship);
}
export const TOGAF_ADMPhase = 'TOGAF_ADMPhase';
export function isTOGAF_ADMPhase(item) {
    return reflection.isInstance(item, TOGAF_ADMPhase);
}
export const TOGAF_ADMStep = 'TOGAF_ADMStep';
export function isTOGAF_ADMStep(item) {
    return reflection.isInstance(item, TOGAF_ADMStep);
}
export const TOGAF_Architecture = 'TOGAF_Architecture';
export function isTOGAF_Architecture(item) {
    return reflection.isInstance(item, TOGAF_Architecture);
}
export const TOGAF_ArchitectureBuilding = 'TOGAF_ArchitectureBuilding';
export function isTOGAF_ArchitectureBuilding(item) {
    return reflection.isInstance(item, TOGAF_ArchitectureBuilding);
}
export const TOGAF_ArchitectureGap = 'TOGAF_ArchitectureGap';
export function isTOGAF_ArchitectureGap(item) {
    return reflection.isInstance(item, TOGAF_ArchitectureGap);
}
export const TOGAF_ArchitecturePrinciple = 'TOGAF_ArchitecturePrinciple';
export function isTOGAF_ArchitecturePrinciple(item) {
    return reflection.isInstance(item, TOGAF_ArchitecturePrinciple);
}
export const TOGAF_ArchitectureRelationship = 'TOGAF_ArchitectureRelationship';
export function isTOGAF_ArchitectureRelationship(item) {
    return reflection.isInstance(item, TOGAF_ArchitectureRelationship);
}
export const TOGAF_ArchitectureRequirement = 'TOGAF_ArchitectureRequirement';
export function isTOGAF_ArchitectureRequirement(item) {
    return reflection.isInstance(item, TOGAF_ArchitectureRequirement);
}
export const TOGAF_ArchitectureViewpoint = 'TOGAF_ArchitectureViewpoint';
export function isTOGAF_ArchitectureViewpoint(item) {
    return reflection.isInstance(item, TOGAF_ArchitectureViewpoint);
}
export const TOGAF_ArchitectureVision = 'TOGAF_ArchitectureVision';
export function isTOGAF_ArchitectureVision(item) {
    return reflection.isInstance(item, TOGAF_ArchitectureVision);
}
export const TOGAF_Implementation = 'TOGAF_Implementation';
export function isTOGAF_Implementation(item) {
    return reflection.isInstance(item, TOGAF_Implementation);
}
export const TOGAF_Model = 'TOGAF_Model';
export function isTOGAF_Model(item) {
    return reflection.isInstance(item, TOGAF_Model);
}
export const TOGAF_Stakeholder = 'TOGAF_Stakeholder';
export function isTOGAF_Stakeholder(item) {
    return reflection.isInstance(item, TOGAF_Stakeholder);
}
export const TOGAF_WorkPackage = 'TOGAF_WorkPackage';
export function isTOGAF_WorkPackage(item) {
    return reflection.isInstance(item, TOGAF_WorkPackage);
}
export const TriggeringRelationship = 'TriggeringRelationship';
export function isTriggeringRelationship(item) {
    return reflection.isInstance(item, TriggeringRelationship);
}
export const UMLActivityDiagram = 'UMLActivityDiagram';
export function isUMLActivityDiagram(item) {
    return reflection.isInstance(item, UMLActivityDiagram);
}
export const UMLActivityFlow = 'UMLActivityFlow';
export function isUMLActivityFlow(item) {
    return reflection.isInstance(item, UMLActivityFlow);
}
export const UMLActivityNode = 'UMLActivityNode';
export function isUMLActivityNode(item) {
    return reflection.isInstance(item, UMLActivityNode);
}
export const UMLAttribute = 'UMLAttribute';
export function isUMLAttribute(item) {
    return reflection.isInstance(item, UMLAttribute);
}
export const UMLClass = 'UMLClass';
export function isUMLClass(item) {
    return reflection.isInstance(item, UMLClass);
}
export const UMLClassDiagram = 'UMLClassDiagram';
export function isUMLClassDiagram(item) {
    return reflection.isInstance(item, UMLClassDiagram);
}
export const UMLComponent = 'UMLComponent';
export function isUMLComponent(item) {
    return reflection.isInstance(item, UMLComponent);
}
export const UMLComponentDependency = 'UMLComponentDependency';
export function isUMLComponentDependency(item) {
    return reflection.isInstance(item, UMLComponentDependency);
}
export const UMLComponentDiagram = 'UMLComponentDiagram';
export function isUMLComponentDiagram(item) {
    return reflection.isInstance(item, UMLComponentDiagram);
}
export const UMLComponentInterface = 'UMLComponentInterface';
export function isUMLComponentInterface(item) {
    return reflection.isInstance(item, UMLComponentInterface);
}
export const UMLComponentOperation = 'UMLComponentOperation';
export function isUMLComponentOperation(item) {
    return reflection.isInstance(item, UMLComponentOperation);
}
export const UMLEnum = 'UMLEnum';
export function isUMLEnum(item) {
    return reflection.isInstance(item, UMLEnum);
}
export const UMLEnumValue = 'UMLEnumValue';
export function isUMLEnumValue(item) {
    return reflection.isInstance(item, UMLEnumValue);
}
export const UMLInterface = 'UMLInterface';
export function isUMLInterface(item) {
    return reflection.isInstance(item, UMLInterface);
}
export const UMLLifeline = 'UMLLifeline';
export function isUMLLifeline(item) {
    return reflection.isInstance(item, UMLLifeline);
}
export const UMLMessage = 'UMLMessage';
export function isUMLMessage(item) {
    return reflection.isInstance(item, UMLMessage);
}
export const UMLMethod = 'UMLMethod';
export function isUMLMethod(item) {
    return reflection.isInstance(item, UMLMethod);
}
export const UMLModel = 'UMLModel';
export function isUMLModel(item) {
    return reflection.isInstance(item, UMLModel);
}
export const UMLParameter = 'UMLParameter';
export function isUMLParameter(item) {
    return reflection.isInstance(item, UMLParameter);
}
export const UMLRelationship = 'UMLRelationship';
export function isUMLRelationship(item) {
    return reflection.isInstance(item, UMLRelationship);
}
export const UMLSequenceDiagram = 'UMLSequenceDiagram';
export function isUMLSequenceDiagram(item) {
    return reflection.isInstance(item, UMLSequenceDiagram);
}
export const UMLState = 'UMLState';
export function isUMLState(item) {
    return reflection.isInstance(item, UMLState);
}
export const UMLStateDiagram = 'UMLStateDiagram';
export function isUMLStateDiagram(item) {
    return reflection.isInstance(item, UMLStateDiagram);
}
export const UMLTransition = 'UMLTransition';
export function isUMLTransition(item) {
    return reflection.isInstance(item, UMLTransition);
}
export const VDML_Activity = 'VDML_Activity';
export function isVDML_Activity(item) {
    return reflection.isInstance(item, VDML_Activity);
}
export const VDML_BusinessNetwork = 'VDML_BusinessNetwork';
export function isVDML_BusinessNetwork(item) {
    return reflection.isInstance(item, VDML_BusinessNetwork);
}
export const VDML_Capability = 'VDML_Capability';
export function isVDML_Capability(item) {
    return reflection.isInstance(item, VDML_Capability);
}
export const VDML_Collaboration = 'VDML_Collaboration';
export function isVDML_Collaboration(item) {
    return reflection.isInstance(item, VDML_Collaboration);
}
export const VDML_Community = 'VDML_Community';
export function isVDML_Community(item) {
    return reflection.isInstance(item, VDML_Community);
}
export const VDML_DeliveredValue = 'VDML_DeliveredValue';
export function isVDML_DeliveredValue(item) {
    return reflection.isInstance(item, VDML_DeliveredValue);
}
export const VDML_Model = 'VDML_Model';
export function isVDML_Model(item) {
    return reflection.isInstance(item, VDML_Model);
}
export const VDML_Participant = 'VDML_Participant';
export function isVDML_Participant(item) {
    return reflection.isInstance(item, VDML_Participant);
}
export const VDML_Resource = 'VDML_Resource';
export function isVDML_Resource(item) {
    return reflection.isInstance(item, VDML_Resource);
}
export const VDML_Role = 'VDML_Role';
export function isVDML_Role(item) {
    return reflection.isInstance(item, VDML_Role);
}
export const VDML_Store = 'VDML_Store';
export function isVDML_Store(item) {
    return reflection.isInstance(item, VDML_Store);
}
export const VDML_ValueComponent = 'VDML_ValueComponent';
export function isVDML_ValueComponent(item) {
    return reflection.isInstance(item, VDML_ValueComponent);
}
export const VDML_ValueProposition = 'VDML_ValueProposition';
export function isVDML_ValueProposition(item) {
    return reflection.isInstance(item, VDML_ValueProposition);
}
export const XES_Arc = 'XES_Arc';
export function isXES_Arc(item) {
    return reflection.isInstance(item, XES_Arc);
}
export const XES_BooleanAttribute = 'XES_BooleanAttribute';
export function isXES_BooleanAttribute(item) {
    return reflection.isInstance(item, XES_BooleanAttribute);
}
export const XES_Classifier = 'XES_Classifier';
export function isXES_Classifier(item) {
    return reflection.isInstance(item, XES_Classifier);
}
export const XES_DateAttribute = 'XES_DateAttribute';
export function isXES_DateAttribute(item) {
    return reflection.isInstance(item, XES_DateAttribute);
}
export const XES_Event = 'XES_Event';
export function isXES_Event(item) {
    return reflection.isInstance(item, XES_Event);
}
export const XES_Extension = 'XES_Extension';
export function isXES_Extension(item) {
    return reflection.isInstance(item, XES_Extension);
}
export const XES_FloatAttribute = 'XES_FloatAttribute';
export function isXES_FloatAttribute(item) {
    return reflection.isInstance(item, XES_FloatAttribute);
}
export const XES_GlobalAttributes = 'XES_GlobalAttributes';
export function isXES_GlobalAttributes(item) {
    return reflection.isInstance(item, XES_GlobalAttributes);
}
export const XES_IDAttribute = 'XES_IDAttribute';
export function isXES_IDAttribute(item) {
    return reflection.isInstance(item, XES_IDAttribute);
}
export const XES_IntAttribute = 'XES_IntAttribute';
export function isXES_IntAttribute(item) {
    return reflection.isInstance(item, XES_IntAttribute);
}
export const XES_Log = 'XES_Log';
export function isXES_Log(item) {
    return reflection.isInstance(item, XES_Log);
}
export const XES_Model = 'XES_Model';
export function isXES_Model(item) {
    return reflection.isInstance(item, XES_Model);
}
export const XES_Place = 'XES_Place';
export function isXES_Place(item) {
    return reflection.isInstance(item, XES_Place);
}
export const XES_ProcessModel = 'XES_ProcessModel';
export function isXES_ProcessModel(item) {
    return reflection.isInstance(item, XES_ProcessModel);
}
export const XES_ProcessVariant = 'XES_ProcessVariant';
export function isXES_ProcessVariant(item) {
    return reflection.isInstance(item, XES_ProcessVariant);
}
export const XES_StringAttribute = 'XES_StringAttribute';
export function isXES_StringAttribute(item) {
    return reflection.isInstance(item, XES_StringAttribute);
}
export const XES_Trace = 'XES_Trace';
export function isXES_Trace(item) {
    return reflection.isInstance(item, XES_Trace);
}
export const XES_Transition = 'XES_Transition';
export function isXES_Transition(item) {
    return reflection.isInstance(item, XES_Transition);
}
export const XES_VariantActivity = 'XES_VariantActivity';
export function isXES_VariantActivity(item) {
    return reflection.isInstance(item, XES_VariantActivity);
}
export const XES_VariantEdge = 'XES_VariantEdge';
export function isXES_VariantEdge(item) {
    return reflection.isInstance(item, XES_VariantEdge);
}
export class ArchiverseAstReflection extends AbstractAstReflection {
    getAllTypes() {
        return [AccessRelationship, AggregationRelationship, ArchimateElement, ArchimateModel, ArchimateRef, ArchimateRelationship, Archimate_Application_Collaboration, Archimate_Application_Component, Archimate_Application_Function, Archimate_Application_Interaction, Archimate_Application_Interface, Archimate_Application_Service, Archimate_Artifact, Archimate_Assessment, Archimate_Business_Actor, Archimate_Business_Collaboration, Archimate_Business_Event, Archimate_Business_Function, Archimate_Business_Interaction, Archimate_Business_Interface, Archimate_Business_Object, Archimate_Business_Process, Archimate_Business_Role, Archimate_Business_Service, Archimate_Capability, Archimate_CommunicationNetwork, Archimate_Constraint, Archimate_Contract, Archimate_CourseOfAction, Archimate_Data_Object, Archimate_Deliverable, Archimate_Device, Archimate_Driver, Archimate_Gap, Archimate_Goal, Archimate_ImplementationEvent, Archimate_Meaning, Archimate_Node, Archimate_Outcome, Archimate_Path, Archimate_Plateau, Archimate_Principle, Archimate_Product, Archimate_Representation, Archimate_Requirement, Archimate_Resource, Archimate_Stakeholder, Archimate_SystemSoftware, Archimate_Technology_Collaboration, Archimate_Technology_Event, Archimate_Technology_Function, Archimate_Technology_Interaction, Archimate_Technology_Interface, Archimate_Technology_Process, Archimate_Technology_Service, Archimate_Value, Archimate_ValueStream, Archimate_WorkPackage, ArchiverseModel, AssignmentRelationship, AssociationRelationship, BPC_AreaPath, BPC_BusinessOutcomeCategory, BPC_BusinessProcessCatalog, BPC_BusinessProcessItem, BPC_ConfigurationDeliverable, BPC_Description, BPC_Effort, BPC_EndToEndProcess, BPC_Priority, BPC_Process, BPC_ProcessArea, BPC_Risk, BPC_Scenario, BPC_TimeCriticality, BPC_ValueArea, BPMN_Bpmn_Model, BPMN_Element, BPMN_Event, BPMN_EventType, BPMN_Flow_Node, BPMN_Gateway, BPMN_GatewayType, BPMN_Task, BPMN_TaskType, BusinessProcessCatalogImplementation, BusinessProcessImplementation, CMMI_Artifact, CMMI_Assessment, CMMI_CapabilityLevel, CMMI_Element, CMMI_Goal, CMMI_MaturityLevel, CMMI_MaturityRating, CMMI_Model, CMMI_Practice, CMMI_Process, CMMI_ProcessArea, CMMI_WorkProduct, CMMN_Case, CMMN_CaseFileItem, CMMN_Element, CMMN_EventListener, CMMN_Milestone, CMMN_Model, CMMN_PlanFragment, CMMN_PlanningTable, CMMN_Sentry, CMMN_Stage, CMMN_Task, CompositionRelationship, D365BC_Codeunit, D365BC_Element, D365BC_Field, D365BC_FieldRelation, D365BC_Key, D365BC_Method, D365BC_Model, D365BC_Page, D365BC_PageAction, D365BC_PageLayoutElement, D365BC_Parameter, D365BC_Table, D365BC_TableRelation, D365FO_AOTPackage, D365FO_BusinessLogic, D365FO_Class, D365FO_DataEntity, D365FO_DataModel, D365FO_Description, D365FO_EntityField, D365FO_Enum, D365FO_EnumValue, D365FO_Integration, D365FO_Label, D365FO_Method, D365FO_MethodParameter, D365FO_Model, D365FO_ModelStore, D365FO_ModelStoreElement, D365FO_Publisher, D365FO_Table, D365FO_TableField, D365FO_TableRelation, D365FO_Version, DMN_BusinessKnowledgeModel, DMN_Decision, DMN_DecisionRequirementsDiagram, DMN_DecisionTable, DMN_Element, DMN_Expression, DMN_InformationRequirement, DMN_InputData, DMN_KnowledgeSource, DMN_Model, FlowRelationship, InfluenceRelationship, ModelElement, PMBOK_ActivityAttributes, PMBOK_ActivityList, PMBOK_Agreements, PMBOK_AssumptionLog, PMBOK_BasisOfEstimates, PMBOK_BidDocuments, PMBOK_ChangeLog, PMBOK_ChangeManagementPlan, PMBOK_ChangeRequest, PMBOK_CommunicationsManagementPlan, PMBOK_ConfigurationManagementPlan, PMBOK_CostBaseline, PMBOK_CostEstimates, PMBOK_CostManagementPlan, PMBOK_Deliverable, PMBOK_DurationEstimates, PMBOK_EnterpriseEnvironmentalFactors, PMBOK_FinalReport, PMBOK_ITTO_Element, PMBOK_ITTO_Reference, PMBOK_Input, PMBOK_IssueLog, PMBOK_KnowledgeArea, PMBOK_LessonsLearnedRegister, PMBOK_LogEntry, PMBOK_MakeOrBuyDecisions, PMBOK_MilestoneList, PMBOK_OrganizationalProcessAssets, PMBOK_Output, PMBOK_PerformanceMeasurementBaseline, PMBOK_ProcessGroup, PMBOK_ProcurementManagementPlan, PMBOK_ProcurementStatementOfWork, PMBOK_Project, PMBOK_ProjectCalendar, PMBOK_ProjectCharter, PMBOK_ProjectCommunications, PMBOK_ProjectFundingRequirements, PMBOK_ProjectManagementPlan, PMBOK_ProjectProcess, PMBOK_ProjectSchedule, PMBOK_ProjectScheduleNetworkDiagram, PMBOK_ProjectScopeStatement, PMBOK_QualityControlMeasurements, PMBOK_QualityManagementPlan, PMBOK_QualityMetrics, PMBOK_QualityReport, PMBOK_RequirementsDocumentation, PMBOK_RequirementsManagementPlan, PMBOK_RequirementsTraceabilityMatrix, PMBOK_ResourceAssignments, PMBOK_ResourceBreakdownStructure, PMBOK_ResourceCalendar, PMBOK_ResourceManagementPlan, PMBOK_ResourceRequirements, PMBOK_RiskItem, PMBOK_RiskManagementPlan, PMBOK_RiskRegister, PMBOK_RiskReport, PMBOK_ScheduleBaseline, PMBOK_ScheduleData, PMBOK_ScheduleManagementPlan, PMBOK_ScopeBaseline, PMBOK_ScopeManagementPlan, PMBOK_SourceSelectionCriteria, PMBOK_StakeholderEngagementPlan, PMBOK_StakeholderItem, PMBOK_StakeholderRegister, PMBOK_TeamCharter, PMBOK_TestAndEvaluationDocuments, PMBOK_ToolTechnique, PMBOK_WBS, PMBOK_WBS_Dictionary, PRINCE2_Activity, PRINCE2_AnyManagementProduct, PRINCE2_AnyProcess, PRINCE2_BenefitsManagementApproach, PRINCE2_BusinessCase, PRINCE2_ChangeControlApproach, PRINCE2_CheckpointReport, PRINCE2_ClosingProject, PRINCE2_CommunicationManagementApproach, PRINCE2_ConfigurationItemRecord, PRINCE2_ControllingStage, PRINCE2_DailyLog, PRINCE2_Directing, PRINCE2_EndProjectReport, PRINCE2_EndStageReport, PRINCE2_ExceptionPlan, PRINCE2_ExceptionReport, PRINCE2_HighlightReport, PRINCE2_Initiating, PRINCE2_IssueRegister, PRINCE2_IssueReport, PRINCE2_LessonsLog, PRINCE2_LessonsReport, PRINCE2_ManagingProductDelivery, PRINCE2_ManagingStageBoundary, PRINCE2_PID, PRINCE2_Plan, PRINCE2_PlanOwnership, PRINCE2_Principle, PRINCE2_ProductDescription, PRINCE2_ProductStatusAccount, PRINCE2_ProjectBrief, PRINCE2_ProjectPlan, PRINCE2_ProjectProductDescription, PRINCE2_QualityManagementApproach, PRINCE2_QualityRegister, PRINCE2_Ref, PRINCE2_Referenceable, PRINCE2_RiskManagementApproach, PRINCE2_RiskRegister, PRINCE2_RiskReport, PRINCE2_Role, PRINCE2_StagePlan, PRINCE2_StartingUp, PRINCE2_Tailoring, PRINCE2_TeamPlan, PRINCE2_Theme, PRINCE2_WorkPackage, RealizationRelationship, SAP_Association, SAP_BusinessObject, SAP_BusinessObjectNode, SAP_BusinessProcess, SAP_Element, SAP_Field, SAP_FieldMapping, SAP_Message, SAP_Model, SAP_Operation, SAP_ProcessStep, SAP_Service, SAP_Table, SAP_TableField, SAP_TableKey, SAP_ValueHelp, SBVR_BusinessRule, SBVR_BusinessVocabulary, SBVR_Characteristic, SBVR_Concept, SBVR_Element, SBVR_FactType, SBVR_FactTypeRole, SBVR_Model, SBVR_ObjectType, ServingRelationship, SpecializationRelationship, TOGAF_ADMPhase, TOGAF_ADMStep, TOGAF_Architecture, TOGAF_ArchitectureBuilding, TOGAF_ArchitectureGap, TOGAF_ArchitecturePrinciple, TOGAF_ArchitectureRelationship, TOGAF_ArchitectureRequirement, TOGAF_ArchitectureViewpoint, TOGAF_ArchitectureVision, TOGAF_Element, TOGAF_Implementation, TOGAF_Model, TOGAF_Stakeholder, TOGAF_WorkPackage, TriggeringRelationship, UMLActivityDiagram, UMLActivityFlow, UMLActivityNode, UMLAttribute, UMLClass, UMLClassDiagram, UMLComponent, UMLComponentDependency, UMLComponentDiagram, UMLComponentInterface, UMLComponentOperation, UMLElement, UMLEnum, UMLEnumValue, UMLInterface, UMLLifeline, UMLMessage, UMLMethod, UMLModel, UMLParameter, UMLRelationship, UMLSequenceDiagram, UMLState, UMLStateDiagram, UMLTransition, VDML_Activity, VDML_BusinessNetwork, VDML_Capability, VDML_Collaboration, VDML_Community, VDML_DeliveredValue, VDML_Element, VDML_Model, VDML_Participant, VDML_Resource, VDML_Role, VDML_Store, VDML_ValueComponent, VDML_ValueProposition, XES_Arc, XES_Attribute, XES_BooleanAttribute, XES_Classifier, XES_DateAttribute, XES_Element, XES_Event, XES_Extension, XES_FloatAttribute, XES_GlobalAttributes, XES_IDAttribute, XES_IntAttribute, XES_Log, XES_Model, XES_Place, XES_ProcessModel, XES_ProcessVariant, XES_StringAttribute, XES_Trace, XES_Transition, XES_VariantActivity, XES_VariantEdge];
    }
    computeIsSubtype(subtype, supertype) {
        switch (subtype) {
            case AccessRelationship:
            case AggregationRelationship:
            case AssignmentRelationship:
            case AssociationRelationship:
            case CompositionRelationship:
            case FlowRelationship:
            case InfluenceRelationship:
            case RealizationRelationship:
            case ServingRelationship:
            case SpecializationRelationship:
            case TriggeringRelationship: {
                return this.isSubtype(ArchimateRelationship, supertype);
            }
            case Archimate_Application_Collaboration:
            case Archimate_Application_Component:
            case Archimate_Application_Function:
            case Archimate_Application_Interaction:
            case Archimate_Application_Interface:
            case Archimate_Application_Service:
            case Archimate_Artifact:
            case Archimate_Assessment:
            case Archimate_Business_Actor:
            case Archimate_Business_Collaboration:
            case Archimate_Business_Event:
            case Archimate_Business_Function:
            case Archimate_Business_Interaction:
            case Archimate_Business_Interface:
            case Archimate_Business_Object:
            case Archimate_Business_Process:
            case Archimate_Business_Role:
            case Archimate_Business_Service:
            case Archimate_Capability:
            case Archimate_CommunicationNetwork:
            case Archimate_Constraint:
            case Archimate_Contract:
            case Archimate_CourseOfAction:
            case Archimate_Data_Object:
            case Archimate_Deliverable:
            case Archimate_Device:
            case Archimate_Driver:
            case Archimate_Gap:
            case Archimate_Goal:
            case Archimate_ImplementationEvent:
            case Archimate_Meaning:
            case Archimate_Node:
            case Archimate_Outcome:
            case Archimate_Path:
            case Archimate_Plateau:
            case Archimate_Principle:
            case Archimate_Product:
            case Archimate_Representation:
            case Archimate_Requirement:
            case Archimate_Resource:
            case Archimate_Stakeholder:
            case Archimate_SystemSoftware:
            case Archimate_Technology_Collaboration:
            case Archimate_Technology_Event:
            case Archimate_Technology_Function:
            case Archimate_Technology_Interaction:
            case Archimate_Technology_Interface:
            case Archimate_Technology_Process:
            case Archimate_Technology_Service:
            case Archimate_Value:
            case Archimate_ValueStream:
            case Archimate_WorkPackage: {
                return this.isSubtype(ArchimateElement, supertype) || this.isSubtype(ModelElement, supertype);
            }
            case BPC_BusinessProcessCatalog:
            case BPC_BusinessProcessItem:
            case BPMN_Element:
            case BusinessProcessCatalogImplementation:
            case BusinessProcessImplementation:
            case CMMI_WorkProduct:
            case D365FO_ModelStore:
            case PMBOK_KnowledgeArea:
            case PMBOK_ProcessGroup:
            case PMBOK_Project:
            case PMBOK_ProjectProcess:
            case VDML_Community:
            case VDML_Participant: {
                return this.isSubtype(ModelElement, supertype);
            }
            case BPC_ConfigurationDeliverable:
            case BPC_EndToEndProcess:
            case BPC_ProcessArea:
            case BPC_Scenario: {
                return this.isSubtype(BPC_BusinessProcessItem, supertype);
            }
            case BPC_Process: {
                return this.isSubtype(BPC_BusinessProcessItem, supertype) || this.isSubtype(ModelElement, supertype);
            }
            case BPMN_Event:
            case BPMN_Gateway:
            case BPMN_Task: {
                return this.isSubtype(BPMN_Flow_Node, supertype);
            }
            case BPMN_Flow_Node: {
                return this.isSubtype(BPMN_Element, supertype);
            }
            case CMMI_Artifact:
            case CMMI_Assessment:
            case CMMI_CapabilityLevel:
            case CMMI_Goal:
            case CMMI_MaturityLevel:
            case CMMI_Practice:
            case CMMI_Process:
            case CMMI_ProcessArea: {
                return this.isSubtype(CMMI_Element, supertype) || this.isSubtype(ModelElement, supertype);
            }
            case CMMN_Case:
            case CMMN_CaseFileItem:
            case CMMN_EventListener:
            case CMMN_Milestone:
            case CMMN_PlanFragment:
            case CMMN_Sentry:
            case CMMN_Stage:
            case CMMN_Task: {
                return this.isSubtype(CMMN_Element, supertype) || this.isSubtype(ModelElement, supertype);
            }
            case D365BC_Codeunit:
            case D365BC_Page:
            case D365BC_Table: {
                return this.isSubtype(D365BC_Element, supertype) || this.isSubtype(ModelElement, supertype);
            }
            case D365FO_AOTPackage: {
                return this.isSubtype(D365FO_ModelStoreElement, supertype) || this.isSubtype(ModelElement, supertype);
            }
            case D365FO_BusinessLogic:
            case D365FO_DataModel:
            case D365FO_Integration: {
                return this.isSubtype(D365FO_ModelStoreElement, supertype);
            }
            case D365FO_Class:
            case D365FO_Method: {
                return this.isSubtype(D365FO_BusinessLogic, supertype);
            }
            case D365FO_DataEntity: {
                return this.isSubtype(D365FO_Integration, supertype);
            }
            case D365FO_Enum:
            case D365FO_Table: {
                return this.isSubtype(D365FO_DataModel, supertype);
            }
            case DMN_BusinessKnowledgeModel:
            case DMN_Decision:
            case DMN_DecisionRequirementsDiagram:
            case DMN_DecisionTable:
            case DMN_InputData:
            case DMN_KnowledgeSource: {
                return this.isSubtype(DMN_Element, supertype) || this.isSubtype(ModelElement, supertype);
            }
            case DMN_Expression:
            case DMN_InformationRequirement: {
                return this.isSubtype(DMN_Element, supertype);
            }
            case PMBOK_ActivityAttributes:
            case PMBOK_ActivityList:
            case PMBOK_Agreements:
            case PMBOK_AssumptionLog:
            case PMBOK_BasisOfEstimates:
            case PMBOK_BidDocuments:
            case PMBOK_ChangeLog:
            case PMBOK_ChangeManagementPlan:
            case PMBOK_ChangeRequest:
            case PMBOK_CommunicationsManagementPlan:
            case PMBOK_ConfigurationManagementPlan:
            case PMBOK_CostBaseline:
            case PMBOK_CostEstimates:
            case PMBOK_CostManagementPlan:
            case PMBOK_Deliverable:
            case PMBOK_DurationEstimates:
            case PMBOK_EnterpriseEnvironmentalFactors:
            case PMBOK_FinalReport:
            case PMBOK_Input:
            case PMBOK_IssueLog:
            case PMBOK_LessonsLearnedRegister:
            case PMBOK_MakeOrBuyDecisions:
            case PMBOK_MilestoneList:
            case PMBOK_OrganizationalProcessAssets:
            case PMBOK_Output:
            case PMBOK_PerformanceMeasurementBaseline:
            case PMBOK_ProcurementManagementPlan:
            case PMBOK_ProcurementStatementOfWork:
            case PMBOK_ProjectCalendar:
            case PMBOK_ProjectCharter:
            case PMBOK_ProjectCommunications:
            case PMBOK_ProjectFundingRequirements:
            case PMBOK_ProjectManagementPlan:
            case PMBOK_ProjectSchedule:
            case PMBOK_ProjectScheduleNetworkDiagram:
            case PMBOK_ProjectScopeStatement:
            case PMBOK_QualityControlMeasurements:
            case PMBOK_QualityManagementPlan:
            case PMBOK_QualityMetrics:
            case PMBOK_QualityReport:
            case PMBOK_RequirementsDocumentation:
            case PMBOK_RequirementsManagementPlan:
            case PMBOK_RequirementsTraceabilityMatrix:
            case PMBOK_ResourceAssignments:
            case PMBOK_ResourceBreakdownStructure:
            case PMBOK_ResourceCalendar:
            case PMBOK_ResourceManagementPlan:
            case PMBOK_ResourceRequirements:
            case PMBOK_RiskManagementPlan:
            case PMBOK_RiskRegister:
            case PMBOK_RiskReport:
            case PMBOK_ScheduleBaseline:
            case PMBOK_ScheduleData:
            case PMBOK_ScheduleManagementPlan:
            case PMBOK_ScopeBaseline:
            case PMBOK_ScopeManagementPlan:
            case PMBOK_SourceSelectionCriteria:
            case PMBOK_StakeholderEngagementPlan:
            case PMBOK_StakeholderRegister:
            case PMBOK_TeamCharter:
            case PMBOK_TestAndEvaluationDocuments:
            case PMBOK_ToolTechnique:
            case PMBOK_WBS:
            case PMBOK_WBS_Dictionary: {
                return this.isSubtype(ModelElement, supertype) || this.isSubtype(PMBOK_ITTO_Element, supertype);
            }
            case PRINCE2_Activity:
            case PRINCE2_AnyProcess:
            case PRINCE2_Principle:
            case PRINCE2_Role:
            case PRINCE2_Tailoring:
            case PRINCE2_Theme: {
                return this.isSubtype(ModelElement, supertype) || this.isSubtype(PRINCE2_Referenceable, supertype);
            }
            case PRINCE2_AnyManagementProduct: {
                return this.isSubtype(PRINCE2_Referenceable, supertype);
            }
            case PRINCE2_BenefitsManagementApproach:
            case PRINCE2_BusinessCase:
            case PRINCE2_ChangeControlApproach:
            case PRINCE2_CheckpointReport:
            case PRINCE2_CommunicationManagementApproach:
            case PRINCE2_ConfigurationItemRecord:
            case PRINCE2_DailyLog:
            case PRINCE2_EndProjectReport:
            case PRINCE2_EndStageReport:
            case PRINCE2_ExceptionPlan:
            case PRINCE2_ExceptionReport:
            case PRINCE2_HighlightReport:
            case PRINCE2_IssueRegister:
            case PRINCE2_IssueReport:
            case PRINCE2_LessonsLog:
            case PRINCE2_LessonsReport:
            case PRINCE2_PID:
            case PRINCE2_Plan:
            case PRINCE2_ProductDescription:
            case PRINCE2_ProductStatusAccount:
            case PRINCE2_ProjectBrief:
            case PRINCE2_ProjectPlan:
            case PRINCE2_ProjectProductDescription:
            case PRINCE2_QualityManagementApproach:
            case PRINCE2_QualityRegister:
            case PRINCE2_RiskManagementApproach:
            case PRINCE2_RiskRegister:
            case PRINCE2_RiskReport:
            case PRINCE2_StagePlan:
            case PRINCE2_TeamPlan:
            case PRINCE2_WorkPackage: {
                return this.isSubtype(ModelElement, supertype) || this.isSubtype(PRINCE2_AnyManagementProduct, supertype);
            }
            case PRINCE2_ClosingProject:
            case PRINCE2_ControllingStage:
            case PRINCE2_Directing:
            case PRINCE2_Initiating:
            case PRINCE2_ManagingProductDelivery:
            case PRINCE2_ManagingStageBoundary:
            case PRINCE2_StartingUp: {
                return this.isSubtype(PRINCE2_AnyProcess, supertype);
            }
            case SAP_BusinessObject:
            case SAP_BusinessProcess:
            case SAP_Message:
            case SAP_Service:
            case SAP_Table: {
                return this.isSubtype(ModelElement, supertype) || this.isSubtype(SAP_Element, supertype);
            }
            case SAP_ValueHelp: {
                return this.isSubtype(SAP_Element, supertype);
            }
            case SBVR_BusinessRule:
            case SBVR_BusinessVocabulary:
            case SBVR_Concept:
            case SBVR_FactType:
            case SBVR_ObjectType: {
                return this.isSubtype(ModelElement, supertype) || this.isSubtype(SBVR_Element, supertype);
            }
            case TOGAF_ADMPhase:
            case TOGAF_Architecture:
            case TOGAF_ArchitectureBuilding:
            case TOGAF_ArchitecturePrinciple:
            case TOGAF_ArchitectureRequirement:
            case TOGAF_ArchitectureViewpoint:
            case TOGAF_ArchitectureVision:
            case TOGAF_Stakeholder: {
                return this.isSubtype(ModelElement, supertype) || this.isSubtype(TOGAF_Element, supertype);
            }
            case TOGAF_ArchitectureGap:
            case TOGAF_Implementation:
            case TOGAF_WorkPackage: {
                return this.isSubtype(TOGAF_Element, supertype);
            }
            case UMLActivityDiagram:
            case UMLClassDiagram:
            case UMLComponentDiagram:
            case UMLSequenceDiagram:
            case UMLStateDiagram: {
                return this.isSubtype(ModelElement, supertype) || this.isSubtype(UMLElement, supertype);
            }
            case VDML_Activity:
            case VDML_BusinessNetwork:
            case VDML_Capability:
            case VDML_Role:
            case VDML_Store:
            case VDML_ValueProposition: {
                return this.isSubtype(ModelElement, supertype) || this.isSubtype(VDML_Element, supertype);
            }
            case VDML_Collaboration: {
                return this.isSubtype(VDML_Element, supertype);
            }
            case XES_BooleanAttribute:
            case XES_DateAttribute:
            case XES_FloatAttribute:
            case XES_IDAttribute:
            case XES_IntAttribute:
            case XES_StringAttribute: {
                return this.isSubtype(XES_Attribute, supertype);
            }
            case XES_Log:
            case XES_ProcessModel:
            case XES_ProcessVariant: {
                return this.isSubtype(ModelElement, supertype) || this.isSubtype(XES_Element, supertype);
            }
            default: {
                return false;
            }
        }
    }
    getReferenceType(refInfo) {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            case 'ArchimateRef:ref': {
                return ArchimateElement;
            }
            case 'BusinessProcessCatalogImplementation:businessProcess':
            case 'BusinessProcessImplementation:process': {
                return Archimate_Business_Process;
            }
            case 'BusinessProcessCatalogImplementation:catalogItem': {
                return BPC_BusinessProcessItem;
            }
            case 'BusinessProcessImplementation:task': {
                return BPMN_Task;
            }
            case 'CMMI_CapabilityLevel:genericGoals': {
                return CMMI_Goal;
            }
            case 'CMMI_MaturityLevel:processAreas':
            case 'CMMI_MaturityRating:processArea':
            case 'CMMI_Process:implementsAreas': {
                return CMMI_ProcessArea;
            }
            case 'CMMI_Practice:workProducts': {
                return CMMI_WorkProduct;
            }
            case 'D365BC_FieldRelation:fromField':
            case 'D365BC_FieldRelation:toField':
            case 'D365BC_Key:fieldNames':
            case 'D365BC_PageLayoutElement:sourceField': {
                return D365BC_Field;
            }
            case 'D365BC_Page:extends': {
                return D365BC_Page;
            }
            case 'D365BC_Page:sourceTable':
            case 'D365BC_Table:extends':
            case 'D365BC_TableRelation:toTable': {
                return D365BC_Table;
            }
            case 'D365FO_Class:superclass': {
                return D365FO_Class;
            }
            case 'D365FO_DataEntity:table':
            case 'D365FO_TableRelation:target': {
                return D365FO_Table;
            }
            case 'D365FO_EntityField:backingField':
            case 'D365FO_TableRelation:fields':
            case 'D365FO_TableRelation:targetFields': {
                return D365FO_TableField;
            }
            case 'DMN_InformationRequirement:source': {
                return DMN_InputData;
            }
            case 'DMN_InformationRequirement:target': {
                return DMN_Decision;
            }
            case 'PMBOK_ITTO_Reference:ref': {
                return PMBOK_ITTO_Element;
            }
            case 'PMBOK_KnowledgeArea:processes':
            case 'PMBOK_ProcessGroup:processes': {
                return PMBOK_ProjectProcess;
            }
            case 'PMBOK_PerformanceMeasurementBaseline:costBaselineRef':
            case 'PMBOK_ProjectManagementPlan:costBaseline': {
                return PMBOK_CostBaseline;
            }
            case 'PMBOK_PerformanceMeasurementBaseline:scheduleBaselineRef':
            case 'PMBOK_ProjectManagementPlan:scheduleBaseline': {
                return PMBOK_ScheduleBaseline;
            }
            case 'PMBOK_PerformanceMeasurementBaseline:scopeBaselineRef':
            case 'PMBOK_ProjectManagementPlan:scopeBaseline': {
                return PMBOK_ScopeBaseline;
            }
            case 'PMBOK_Project:charter': {
                return PMBOK_ProjectCharter;
            }
            case 'PMBOK_Project:riskRegister': {
                return PMBOK_RiskRegister;
            }
            case 'PMBOK_Project:stakeholderRegister': {
                return PMBOK_StakeholderRegister;
            }
            case 'PMBOK_ProjectCharter:managerRef':
            case 'PMBOK_ProjectCharter:sponsorRef':
            case 'PMBOK_RiskItem:ownerRef': {
                return PMBOK_StakeholderItem;
            }
            case 'PMBOK_ProjectManagementPlan:changeManagementPlan': {
                return PMBOK_ChangeManagementPlan;
            }
            case 'PMBOK_ProjectManagementPlan:communicationsManagementPlan': {
                return PMBOK_CommunicationsManagementPlan;
            }
            case 'PMBOK_ProjectManagementPlan:configurationManagementPlan': {
                return PMBOK_ConfigurationManagementPlan;
            }
            case 'PMBOK_ProjectManagementPlan:costManagementPlan': {
                return PMBOK_CostManagementPlan;
            }
            case 'PMBOK_ProjectManagementPlan:performanceMeasurementBaseline': {
                return PMBOK_PerformanceMeasurementBaseline;
            }
            case 'PMBOK_ProjectManagementPlan:procurementManagementPlan': {
                return PMBOK_ProcurementManagementPlan;
            }
            case 'PMBOK_ProjectManagementPlan:qualityManagementPlan': {
                return PMBOK_QualityManagementPlan;
            }
            case 'PMBOK_ProjectManagementPlan:requirementsManagementPlan': {
                return PMBOK_RequirementsManagementPlan;
            }
            case 'PMBOK_ProjectManagementPlan:resourceManagementPlan': {
                return PMBOK_ResourceManagementPlan;
            }
            case 'PMBOK_ProjectManagementPlan:riskManagementPlan': {
                return PMBOK_RiskManagementPlan;
            }
            case 'PMBOK_ProjectManagementPlan:scheduleManagementPlan': {
                return PMBOK_ScheduleManagementPlan;
            }
            case 'PMBOK_ProjectManagementPlan:scopeManagementPlan': {
                return PMBOK_ScopeManagementPlan;
            }
            case 'PMBOK_ProjectManagementPlan:stakeholderEngagementPlan': {
                return PMBOK_StakeholderEngagementPlan;
            }
            case 'PMBOK_ProjectProcess:area': {
                return PMBOK_KnowledgeArea;
            }
            case 'PMBOK_ProjectProcess:group': {
                return PMBOK_ProcessGroup;
            }
            case 'PMBOK_ScopeBaseline:scopeStatement': {
                return PMBOK_ProjectScopeStatement;
            }
            case 'PMBOK_ScopeBaseline:wbs': {
                return PMBOK_WBS;
            }
            case 'PMBOK_ScopeBaseline:wbsDictionary': {
                return PMBOK_WBS_Dictionary;
            }
            case 'PRINCE2_PID:businessCaseRef': {
                return PRINCE2_BusinessCase;
            }
            case 'PRINCE2_PID:projectPlanRef': {
                return PRINCE2_ProjectPlan;
            }
            case 'PRINCE2_PlanOwnership:ownerRef': {
                return PRINCE2_Role;
            }
            case 'PRINCE2_PlanOwnership:planRef': {
                return PRINCE2_Plan;
            }
            case 'PRINCE2_Ref:ref': {
                return PRINCE2_Referenceable;
            }
            case 'SAP_Association:toNode': {
                return SAP_BusinessObjectNode;
            }
            case 'SAP_Field:valueHelp': {
                return SAP_ValueHelp;
            }
            case 'SAP_FieldMapping:sourceField':
            case 'SAP_FieldMapping:targetField':
            case 'SAP_ValueHelp:fields': {
                return SAP_Field;
            }
            case 'SAP_Operation:error':
            case 'SAP_Operation:input':
            case 'SAP_Operation:output': {
                return SAP_Message;
            }
            case 'SAP_ProcessStep:businessObject': {
                return SAP_BusinessObject;
            }
            case 'SAP_ProcessStep:predecessor': {
                return SAP_ProcessStep;
            }
            case 'SAP_ProcessStep:service': {
                return SAP_Service;
            }
            case 'SAP_TableKey:fields': {
                return SAP_TableField;
            }
            case 'SBVR_BusinessRule:reference':
            case 'SBVR_Characteristic:fact': {
                return SBVR_FactType;
            }
            case 'SBVR_FactTypeRole:concept':
            case 'SBVR_ObjectType:general': {
                return SBVR_Concept;
            }
            case 'TOGAF_ArchitectureRelationship:source':
            case 'TOGAF_ArchitectureRelationship:target':
            case 'TOGAF_Implementation:buildingBlocks': {
                return TOGAF_ArchitectureBuilding;
            }
            case 'TOGAF_ArchitectureRequirement:source':
            case 'TOGAF_ArchitectureViewpoint:stakeholders':
            case 'TOGAF_ArchitectureVision:stakeholders': {
                return TOGAF_Stakeholder;
            }
            case 'TOGAF_Implementation:workPackages': {
                return TOGAF_WorkPackage;
            }
            case 'TOGAF_Stakeholder:viewpoints': {
                return TOGAF_ArchitectureViewpoint;
            }
            case 'UMLActivityFlow:from':
            case 'UMLActivityFlow:to': {
                return UMLActivityNode;
            }
            case 'UMLClass:extends':
            case 'UMLLifeline:represents':
            case 'UMLRelationship:source':
            case 'UMLRelationship:target':
            case 'UMLStateDiagram:targetClass': {
                return UMLClass;
            }
            case 'UMLClass:implements':
            case 'UMLInterface:extends': {
                return UMLInterface;
            }
            case 'UMLComponent:provides':
            case 'UMLComponent:requires': {
                return UMLComponentInterface;
            }
            case 'UMLComponentDependency:from':
            case 'UMLComponentDependency:to': {
                return UMLComponent;
            }
            case 'UMLMessage:from':
            case 'UMLMessage:to': {
                return UMLLifeline;
            }
            case 'UMLMessage:method': {
                return UMLMethod;
            }
            case 'UMLTransition:from':
            case 'UMLTransition:to': {
                return UMLState;
            }
            case 'VDML_Activity:inputs':
            case 'VDML_Activity:outputs': {
                return VDML_Store;
            }
            case 'VDML_Collaboration:activities': {
                return VDML_Activity;
            }
            case 'VDML_Collaboration:participants': {
                return VDML_Participant;
            }
            case 'VDML_Participant:capabilities': {
                return VDML_Capability;
            }
            case 'VDML_Participant:roles':
            case 'VDML_Store:owner':
            case 'VDML_ValueProposition:source':
            case 'VDML_ValueProposition:target': {
                return VDML_Role;
            }
            case 'VDML_Role:community': {
                return VDML_Community;
            }
            case 'XES_Arc:source':
            case 'XES_Arc:target': {
                return XES_Place;
            }
            case 'XES_Arc:sourceTransition':
            case 'XES_Arc:targetTransition': {
                return XES_Transition;
            }
            case 'XES_VariantEdge:from':
            case 'XES_VariantEdge:to': {
                return XES_VariantActivity;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }
    getTypeMetaData(type) {
        switch (type) {
            case AccessRelationship: {
                return {
                    name: AccessRelationship,
                    properties: [
                        { name: 'accessType' },
                        { name: 'from' },
                        { name: 'to' }
                    ]
                };
            }
            case AggregationRelationship: {
                return {
                    name: AggregationRelationship,
                    properties: [
                        { name: 'from' },
                        { name: 'to' }
                    ]
                };
            }
            case Archimate_Application_Collaboration: {
                return {
                    name: Archimate_Application_Collaboration,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case Archimate_Application_Component: {
                return {
                    name: Archimate_Application_Component,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case Archimate_Application_Function: {
                return {
                    name: Archimate_Application_Function,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case Archimate_Application_Interaction: {
                return {
                    name: Archimate_Application_Interaction,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case Archimate_Application_Interface: {
                return {
                    name: Archimate_Application_Interface,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case Archimate_Application_Service: {
                return {
                    name: Archimate_Application_Service,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case Archimate_Artifact: {
                return {
                    name: Archimate_Artifact,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case Archimate_Assessment: {
                return {
                    name: Archimate_Assessment,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case Archimate_Business_Actor: {
                return {
                    name: Archimate_Business_Actor,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case Archimate_Business_Collaboration: {
                return {
                    name: Archimate_Business_Collaboration,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case Archimate_Business_Event: {
                return {
                    name: Archimate_Business_Event,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case Archimate_Business_Function: {
                return {
                    name: Archimate_Business_Function,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case Archimate_Business_Interaction: {
                return {
                    name: Archimate_Business_Interaction,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case Archimate_Business_Interface: {
                return {
                    name: Archimate_Business_Interface,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case Archimate_Business_Object: {
                return {
                    name: Archimate_Business_Object,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case Archimate_Business_Process: {
                return {
                    name: Archimate_Business_Process,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case Archimate_Business_Role: {
                return {
                    name: Archimate_Business_Role,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case Archimate_Business_Service: {
                return {
                    name: Archimate_Business_Service,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case Archimate_Capability: {
                return {
                    name: Archimate_Capability,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case Archimate_CommunicationNetwork: {
                return {
                    name: Archimate_CommunicationNetwork,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case Archimate_Constraint: {
                return {
                    name: Archimate_Constraint,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case Archimate_Contract: {
                return {
                    name: Archimate_Contract,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case Archimate_CourseOfAction: {
                return {
                    name: Archimate_CourseOfAction,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case Archimate_Data_Object: {
                return {
                    name: Archimate_Data_Object,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case Archimate_Deliverable: {
                return {
                    name: Archimate_Deliverable,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case Archimate_Device: {
                return {
                    name: Archimate_Device,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case Archimate_Driver: {
                return {
                    name: Archimate_Driver,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case Archimate_Gap: {
                return {
                    name: Archimate_Gap,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case Archimate_Goal: {
                return {
                    name: Archimate_Goal,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case Archimate_ImplementationEvent: {
                return {
                    name: Archimate_ImplementationEvent,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case Archimate_Meaning: {
                return {
                    name: Archimate_Meaning,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case Archimate_Node: {
                return {
                    name: Archimate_Node,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case Archimate_Outcome: {
                return {
                    name: Archimate_Outcome,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case Archimate_Path: {
                return {
                    name: Archimate_Path,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case Archimate_Plateau: {
                return {
                    name: Archimate_Plateau,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case Archimate_Principle: {
                return {
                    name: Archimate_Principle,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case Archimate_Product: {
                return {
                    name: Archimate_Product,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case Archimate_Representation: {
                return {
                    name: Archimate_Representation,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case Archimate_Requirement: {
                return {
                    name: Archimate_Requirement,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case Archimate_Resource: {
                return {
                    name: Archimate_Resource,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case Archimate_Stakeholder: {
                return {
                    name: Archimate_Stakeholder,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case Archimate_SystemSoftware: {
                return {
                    name: Archimate_SystemSoftware,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case Archimate_Technology_Collaboration: {
                return {
                    name: Archimate_Technology_Collaboration,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case Archimate_Technology_Event: {
                return {
                    name: Archimate_Technology_Event,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case Archimate_Technology_Function: {
                return {
                    name: Archimate_Technology_Function,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case Archimate_Technology_Interaction: {
                return {
                    name: Archimate_Technology_Interaction,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case Archimate_Technology_Interface: {
                return {
                    name: Archimate_Technology_Interface,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case Archimate_Technology_Process: {
                return {
                    name: Archimate_Technology_Process,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case Archimate_Technology_Service: {
                return {
                    name: Archimate_Technology_Service,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case Archimate_Value: {
                return {
                    name: Archimate_Value,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case Archimate_ValueStream: {
                return {
                    name: Archimate_ValueStream,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case Archimate_WorkPackage: {
                return {
                    name: Archimate_WorkPackage,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case ArchimateModel: {
                return {
                    name: ArchimateModel,
                    properties: [
                        { name: 'elements', defaultValue: [] },
                        { name: 'relationships', defaultValue: [] }
                    ]
                };
            }
            case ArchimateRef: {
                return {
                    name: ArchimateRef,
                    properties: [
                        { name: 'ref' }
                    ]
                };
            }
            case ArchiverseModel: {
                return {
                    name: ArchiverseModel,
                    properties: [
                        { name: 'elements', defaultValue: [] }
                    ]
                };
            }
            case AssignmentRelationship: {
                return {
                    name: AssignmentRelationship,
                    properties: [
                        { name: 'from' },
                        { name: 'to' }
                    ]
                };
            }
            case AssociationRelationship: {
                return {
                    name: AssociationRelationship,
                    properties: [
                        { name: 'from' },
                        { name: 'to' }
                    ]
                };
            }
            case BPC_AreaPath: {
                return {
                    name: BPC_AreaPath,
                    properties: [
                        { name: 'path' }
                    ]
                };
            }
            case BPC_BusinessOutcomeCategory: {
                return {
                    name: BPC_BusinessOutcomeCategory,
                    properties: [
                        { name: 'category' }
                    ]
                };
            }
            case BPC_BusinessProcessCatalog: {
                return {
                    name: BPC_BusinessProcessCatalog,
                    properties: [
                        { name: 'items', defaultValue: [] }
                    ]
                };
            }
            case BPC_ConfigurationDeliverable: {
                return {
                    name: BPC_ConfigurationDeliverable,
                    properties: [
                        { name: 'description' },
                        { name: 'includedInEntity' },
                        { name: 'menuPath' },
                        { name: 'module' }
                    ]
                };
            }
            case BPC_Description: {
                return {
                    name: BPC_Description,
                    properties: [
                        { name: 'text' }
                    ]
                };
            }
            case BPC_Effort: {
                return {
                    name: BPC_Effort,
                    properties: [
                        { name: 'value' }
                    ]
                };
            }
            case BPC_EndToEndProcess: {
                return {
                    name: BPC_EndToEndProcess,
                    properties: [
                        { name: 'acceptanceCriteria' },
                        { name: 'alternateProcessSequenceId' },
                        { name: 'businessOutcome' },
                        { name: 'description' },
                        { name: 'discipline' },
                        { name: 'effort' },
                        { name: 'items', defaultValue: [] },
                        { name: 'kpis' },
                        { name: 'msLearnUrl' },
                        { name: 'name' },
                        { name: 'priority' },
                        { name: 'processSequenceId' },
                        { name: 'risk' },
                        { name: 'timeCriticality' },
                        { name: 'valueArea' },
                        { name: 'valuePath' }
                    ]
                };
            }
            case BPC_Priority: {
                return {
                    name: BPC_Priority,
                    properties: [
                        { name: 'value' }
                    ]
                };
            }
            case BPC_Process: {
                return {
                    name: BPC_Process,
                    properties: [
                        { name: 'acceptanceCriteria' },
                        { name: 'alternateProcessSequenceId' },
                        { name: 'businessOutcome' },
                        { name: 'description' },
                        { name: 'discipline' },
                        { name: 'effort' },
                        { name: 'items', defaultValue: [] },
                        { name: 'kpis' },
                        { name: 'name' },
                        { name: 'priority' },
                        { name: 'processSequenceId' },
                        { name: 'risk' },
                        { name: 'timeCriticality' },
                        { name: 'valueArea' },
                        { name: 'valuePath' }
                    ]
                };
            }
            case BPC_ProcessArea: {
                return {
                    name: BPC_ProcessArea,
                    properties: [
                        { name: 'acceptanceCriteria' },
                        { name: 'alternateProcessSequenceId' },
                        { name: 'businessOutcome' },
                        { name: 'description' },
                        { name: 'discipline' },
                        { name: 'effort' },
                        { name: 'items', defaultValue: [] },
                        { name: 'kpis' },
                        { name: 'name' },
                        { name: 'priority' },
                        { name: 'processSequenceId' },
                        { name: 'risk' },
                        { name: 'timeCriticality' },
                        { name: 'valueArea' },
                        { name: 'valuePath' }
                    ]
                };
            }
            case BPC_Risk: {
                return {
                    name: BPC_Risk,
                    properties: [
                        { name: 'value' }
                    ]
                };
            }
            case BPC_Scenario: {
                return {
                    name: BPC_Scenario,
                    properties: [
                        { name: 'acceptanceCriteria' },
                        { name: 'alternateProcessSequenceId' },
                        { name: 'businessOutcome' },
                        { name: 'description' },
                        { name: 'discipline' },
                        { name: 'effort' },
                        { name: 'kpis' },
                        { name: 'name' },
                        { name: 'priority' },
                        { name: 'processSequenceId' },
                        { name: 'risk' },
                        { name: 'timeCriticality' },
                        { name: 'valueArea' },
                        { name: 'valuePath' }
                    ]
                };
            }
            case BPC_TimeCriticality: {
                return {
                    name: BPC_TimeCriticality,
                    properties: [
                        { name: 'value' }
                    ]
                };
            }
            case BPC_ValueArea: {
                return {
                    name: BPC_ValueArea,
                    properties: [
                        { name: 'area' }
                    ]
                };
            }
            case BPMN_Bpmn_Model: {
                return {
                    name: BPMN_Bpmn_Model,
                    properties: [
                        { name: 'elements', defaultValue: [] }
                    ]
                };
            }
            case BPMN_Event: {
                return {
                    name: BPMN_Event,
                    properties: [
                        { name: 'description' },
                        { name: 'name' },
                        { name: 'type' }
                    ]
                };
            }
            case BPMN_EventType: {
                return {
                    name: BPMN_EventType,
                    properties: [
                        { name: 'value' }
                    ]
                };
            }
            case BPMN_Gateway: {
                return {
                    name: BPMN_Gateway,
                    properties: [
                        { name: 'description' },
                        { name: 'name' },
                        { name: 'type' }
                    ]
                };
            }
            case BPMN_GatewayType: {
                return {
                    name: BPMN_GatewayType,
                    properties: [
                        { name: 'value' }
                    ]
                };
            }
            case BPMN_Task: {
                return {
                    name: BPMN_Task,
                    properties: [
                        { name: 'description' },
                        { name: 'name' },
                        { name: 'type' }
                    ]
                };
            }
            case BPMN_TaskType: {
                return {
                    name: BPMN_TaskType,
                    properties: [
                        { name: 'value' }
                    ]
                };
            }
            case BusinessProcessCatalogImplementation: {
                return {
                    name: BusinessProcessCatalogImplementation,
                    properties: [
                        { name: 'businessProcess' },
                        { name: 'catalogItem' }
                    ]
                };
            }
            case BusinessProcessImplementation: {
                return {
                    name: BusinessProcessImplementation,
                    properties: [
                        { name: 'process' },
                        { name: 'task' }
                    ]
                };
            }
            case CMMI_Artifact: {
                return {
                    name: CMMI_Artifact,
                    properties: [
                        { name: 'artifactType' },
                        { name: 'description' },
                        { name: 'name' },
                        { name: 'template' }
                    ]
                };
            }
            case CMMI_Assessment: {
                return {
                    name: CMMI_Assessment,
                    properties: [
                        { name: 'assessmentType' },
                        { name: 'date' },
                        { name: 'description' },
                        { name: 'leadAssessor' },
                        { name: 'name' },
                        { name: 'ratings', defaultValue: [] },
                        { name: 'recommendations', defaultValue: [] },
                        { name: 'strengths', defaultValue: [] },
                        { name: 'teamMembers', defaultValue: [] },
                        { name: 'weaknesses', defaultValue: [] }
                    ]
                };
            }
            case CMMI_CapabilityLevel: {
                return {
                    name: CMMI_CapabilityLevel,
                    properties: [
                        { name: 'description' },
                        { name: 'genericGoals', defaultValue: [] },
                        { name: 'level' },
                        { name: 'levelDescription' },
                        { name: 'name' }
                    ]
                };
            }
            case CMMI_Goal: {
                return {
                    name: CMMI_Goal,
                    properties: [
                        { name: 'description' },
                        { name: 'goalType' },
                        { name: 'name' },
                        { name: 'practices', defaultValue: [] }
                    ]
                };
            }
            case CMMI_MaturityLevel: {
                return {
                    name: CMMI_MaturityLevel,
                    properties: [
                        { name: 'description' },
                        { name: 'focus' },
                        { name: 'level' },
                        { name: 'name' },
                        { name: 'processAreas', defaultValue: [] }
                    ]
                };
            }
            case CMMI_MaturityRating: {
                return {
                    name: CMMI_MaturityRating,
                    properties: [
                        { name: 'description' },
                        { name: 'processArea' },
                        { name: 'ratingValue' }
                    ]
                };
            }
            case CMMI_Model: {
                return {
                    name: CMMI_Model,
                    properties: [
                        { name: 'elements', defaultValue: [] }
                    ]
                };
            }
            case CMMI_Practice: {
                return {
                    name: CMMI_Practice,
                    properties: [
                        { name: 'artifacts', defaultValue: [] },
                        { name: 'description' },
                        { name: 'name' },
                        { name: 'practiceType' },
                        { name: 'references', defaultValue: [] },
                        { name: 'subpractices', defaultValue: [] },
                        { name: 'workProducts', defaultValue: [] }
                    ]
                };
            }
            case CMMI_Process: {
                return {
                    name: CMMI_Process,
                    properties: [
                        { name: 'description' },
                        { name: 'entryCriteria', defaultValue: [] },
                        { name: 'exitCriteria', defaultValue: [] },
                        { name: 'implementsAreas', defaultValue: [] },
                        { name: 'inputs', defaultValue: [] },
                        { name: 'name' },
                        { name: 'outputs', defaultValue: [] },
                        { name: 'owner' }
                    ]
                };
            }
            case CMMI_ProcessArea: {
                return {
                    name: CMMI_ProcessArea,
                    properties: [
                        { name: 'category' },
                        { name: 'description' },
                        { name: 'genericGoals', defaultValue: [] },
                        { name: 'maturityLevel' },
                        { name: 'name' },
                        { name: 'specificGoals', defaultValue: [] }
                    ]
                };
            }
            case CMMI_WorkProduct: {
                return {
                    name: CMMI_WorkProduct,
                    properties: [
                        { name: 'characteristics', defaultValue: [] },
                        { name: 'description' },
                        { name: 'name' },
                        { name: 'productType' }
                    ]
                };
            }
            case CMMN_Case: {
                return {
                    name: CMMN_Case,
                    properties: [
                        { name: 'caseFile', defaultValue: [] },
                        { name: 'description' },
                        { name: 'milestones', defaultValue: [] },
                        { name: 'name' },
                        { name: 'sentries', defaultValue: [] },
                        { name: 'stages', defaultValue: [] }
                    ]
                };
            }
            case CMMN_CaseFileItem: {
                return {
                    name: CMMN_CaseFileItem,
                    properties: [
                        { name: 'children', defaultValue: [] },
                        { name: 'description' },
                        { name: 'itemType' },
                        { name: 'multiplicity' },
                        { name: 'name' }
                    ]
                };
            }
            case CMMN_EventListener: {
                return {
                    name: CMMN_EventListener,
                    properties: [
                        { name: 'description' },
                        { name: 'eventType' },
                        { name: 'name' }
                    ]
                };
            }
            case CMMN_Milestone: {
                return {
                    name: CMMN_Milestone,
                    properties: [
                        { name: 'description' },
                        { name: 'hasRepetition', defaultValue: false },
                        { name: 'isRequired', defaultValue: false },
                        { name: 'name' }
                    ]
                };
            }
            case CMMN_Model: {
                return {
                    name: CMMN_Model,
                    properties: [
                        { name: 'elements', defaultValue: [] }
                    ]
                };
            }
            case CMMN_PlanFragment: {
                return {
                    name: CMMN_PlanFragment,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case CMMN_PlanningTable: {
                return {
                    name: CMMN_PlanningTable,
                    properties: [
                        { name: 'applicabilityRules', defaultValue: [] },
                        { name: 'description' },
                        { name: 'discretionaryItems', defaultValue: [] },
                        { name: 'name' }
                    ]
                };
            }
            case CMMN_Sentry: {
                return {
                    name: CMMN_Sentry,
                    properties: [
                        { name: 'description' },
                        { name: 'ifPart' },
                        { name: 'name' },
                        { name: 'onPart' }
                    ]
                };
            }
            case CMMN_Stage: {
                return {
                    name: CMMN_Stage,
                    properties: [
                        { name: 'description' },
                        { name: 'eventListeners', defaultValue: [] },
                        { name: 'hasRepetition', defaultValue: false },
                        { name: 'isAutoComplete', defaultValue: false },
                        { name: 'isRequired', defaultValue: false },
                        { name: 'milestones', defaultValue: [] },
                        { name: 'name' },
                        { name: 'planningTable' },
                        { name: 'sentries', defaultValue: [] },
                        { name: 'tasks', defaultValue: [] }
                    ]
                };
            }
            case CMMN_Task: {
                return {
                    name: CMMN_Task,
                    properties: [
                        { name: 'description' },
                        { name: 'hasRepetition', defaultValue: false },
                        { name: 'isBlocking', defaultValue: false },
                        { name: 'isRequired', defaultValue: false },
                        { name: 'manualActivation', defaultValue: false },
                        { name: 'name' },
                        { name: 'taskType' }
                    ]
                };
            }
            case CompositionRelationship: {
                return {
                    name: CompositionRelationship,
                    properties: [
                        { name: 'from' },
                        { name: 'to' }
                    ]
                };
            }
            case D365BC_Codeunit: {
                return {
                    name: D365BC_Codeunit,
                    properties: [
                        { name: 'description' },
                        { name: 'methods', defaultValue: [] },
                        { name: 'name' },
                        { name: 'tableNo' }
                    ]
                };
            }
            case D365BC_Field: {
                return {
                    name: D365BC_Field,
                    properties: [
                        { name: 'autoIncrement', defaultValue: false },
                        { name: 'dataClassification' },
                        { name: 'defaultValue' },
                        { name: 'description' },
                        { name: 'fieldType' },
                        { name: 'length' },
                        { name: 'mandatory', defaultValue: false },
                        { name: 'name' },
                        { name: 'optionString' }
                    ]
                };
            }
            case D365BC_FieldRelation: {
                return {
                    name: D365BC_FieldRelation,
                    properties: [
                        { name: 'condition' },
                        { name: 'fromField' },
                        { name: 'toField' }
                    ]
                };
            }
            case D365BC_Key: {
                return {
                    name: D365BC_Key,
                    properties: [
                        { name: 'fieldNames', defaultValue: [] },
                        { name: 'isClustered', defaultValue: false },
                        { name: 'isPrimary', defaultValue: false },
                        { name: 'name' }
                    ]
                };
            }
            case D365BC_Method: {
                return {
                    name: D365BC_Method,
                    properties: [
                        { name: 'isLocal', defaultValue: false },
                        { name: 'name' },
                        { name: 'parameters', defaultValue: [] },
                        { name: 'returnType' }
                    ]
                };
            }
            case D365BC_Model: {
                return {
                    name: D365BC_Model,
                    properties: [
                        { name: 'elements', defaultValue: [] }
                    ]
                };
            }
            case D365BC_Page: {
                return {
                    name: D365BC_Page,
                    properties: [
                        { name: 'actions', defaultValue: [] },
                        { name: 'description' },
                        { name: 'extends' },
                        { name: 'layoutElements', defaultValue: [] },
                        { name: 'name' },
                        { name: 'pageType' },
                        { name: 'sourceTable' }
                    ]
                };
            }
            case D365BC_PageAction: {
                return {
                    name: D365BC_PageAction,
                    properties: [
                        { name: 'actionType' },
                        { name: 'caption' },
                        { name: 'category' },
                        { name: 'image' },
                        { name: 'name' }
                    ]
                };
            }
            case D365BC_PageLayoutElement: {
                return {
                    name: D365BC_PageLayoutElement,
                    properties: [
                        { name: 'caption' },
                        { name: 'childElements', defaultValue: [] },
                        { name: 'name' },
                        { name: 'sourceField' },
                        { name: 'type' }
                    ]
                };
            }
            case D365BC_Parameter: {
                return {
                    name: D365BC_Parameter,
                    properties: [
                        { name: 'dataType' },
                        { name: 'isVar', defaultValue: false },
                        { name: 'name' }
                    ]
                };
            }
            case D365BC_Table: {
                return {
                    name: D365BC_Table,
                    properties: [
                        { name: 'dataClassification' },
                        { name: 'description' },
                        { name: 'extends' },
                        { name: 'fields', defaultValue: [] },
                        { name: 'keys', defaultValue: [] },
                        { name: 'name' },
                        { name: 'relations', defaultValue: [] },
                        { name: 'tableType' }
                    ]
                };
            }
            case D365BC_TableRelation: {
                return {
                    name: D365BC_TableRelation,
                    properties: [
                        { name: 'fieldRelations', defaultValue: [] },
                        { name: 'name' },
                        { name: 'toTable' }
                    ]
                };
            }
            case D365FO_AOTPackage: {
                return {
                    name: D365FO_AOTPackage,
                    properties: [
                        { name: 'description' },
                        { name: 'models', defaultValue: [] },
                        { name: 'name' },
                        { name: 'publisher' },
                        { name: 'version' }
                    ]
                };
            }
            case D365FO_Class: {
                return {
                    name: D365FO_Class,
                    properties: [
                        { name: 'description' },
                        { name: 'methods', defaultValue: [] },
                        { name: 'name' },
                        { name: 'superclass' },
                        { name: 'type' }
                    ]
                };
            }
            case D365FO_DataEntity: {
                return {
                    name: D365FO_DataEntity,
                    properties: [
                        { name: 'description' },
                        { name: 'fields', defaultValue: [] },
                        { name: 'label' },
                        { name: 'name' },
                        { name: 'table' }
                    ]
                };
            }
            case D365FO_Description: {
                return {
                    name: D365FO_Description,
                    properties: [
                        { name: 'text' }
                    ]
                };
            }
            case D365FO_EntityField: {
                return {
                    name: D365FO_EntityField,
                    properties: [
                        { name: 'backingField' },
                        { name: 'label' },
                        { name: 'name' }
                    ]
                };
            }
            case D365FO_Enum: {
                return {
                    name: D365FO_Enum,
                    properties: [
                        { name: 'description' },
                        { name: 'name' },
                        { name: 'values', defaultValue: [] }
                    ]
                };
            }
            case D365FO_EnumValue: {
                return {
                    name: D365FO_EnumValue,
                    properties: [
                        { name: 'name' },
                        { name: 'ordinal' }
                    ]
                };
            }
            case D365FO_Label: {
                return {
                    name: D365FO_Label,
                    properties: [
                        { name: 'text' }
                    ]
                };
            }
            case D365FO_Method: {
                return {
                    name: D365FO_Method,
                    properties: [
                        { name: 'body' },
                        { name: 'description' },
                        { name: 'name' },
                        { name: 'parameters', defaultValue: [] },
                        { name: 'returnType' },
                        { name: 'scope' },
                        { name: 'visibility' }
                    ]
                };
            }
            case D365FO_MethodParameter: {
                return {
                    name: D365FO_MethodParameter,
                    properties: [
                        { name: 'name' },
                        { name: 'type' }
                    ]
                };
            }
            case D365FO_Model: {
                return {
                    name: D365FO_Model,
                    properties: [
                        { name: 'description' },
                        { name: 'elements', defaultValue: [] },
                        { name: 'isSystem', defaultValue: false },
                        { name: 'layer' },
                        { name: 'name' }
                    ]
                };
            }
            case D365FO_ModelStore: {
                return {
                    name: D365FO_ModelStore,
                    properties: [
                        { name: 'elements', defaultValue: [] }
                    ]
                };
            }
            case D365FO_Publisher: {
                return {
                    name: D365FO_Publisher,
                    properties: [
                        { name: 'name' }
                    ]
                };
            }
            case D365FO_Table: {
                return {
                    name: D365FO_Table,
                    properties: [
                        { name: 'description' },
                        { name: 'fields', defaultValue: [] },
                        { name: 'group' },
                        { name: 'name' },
                        { name: 'relations', defaultValue: [] }
                    ]
                };
            }
            case D365FO_TableField: {
                return {
                    name: D365FO_TableField,
                    properties: [
                        { name: 'allowEdit', defaultValue: false },
                        { name: 'description' },
                        { name: 'isKey', defaultValue: false },
                        { name: 'mandatory', defaultValue: false },
                        { name: 'name' },
                        { name: 'noEdit', defaultValue: false },
                        { name: 'type' }
                    ]
                };
            }
            case D365FO_TableRelation: {
                return {
                    name: D365FO_TableRelation,
                    properties: [
                        { name: 'cardinality' },
                        { name: 'delete' },
                        { name: 'fields', defaultValue: [] },
                        { name: 'name' },
                        { name: 'target' },
                        { name: 'targetFields', defaultValue: [] }
                    ]
                };
            }
            case D365FO_Version: {
                return {
                    name: D365FO_Version,
                    properties: [
                        { name: 'value' }
                    ]
                };
            }
            case DMN_BusinessKnowledgeModel: {
                return {
                    name: DMN_BusinessKnowledgeModel,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case DMN_Decision: {
                return {
                    name: DMN_Decision,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case DMN_DecisionRequirementsDiagram: {
                return {
                    name: DMN_DecisionRequirementsDiagram,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case DMN_DecisionTable: {
                return {
                    name: DMN_DecisionTable,
                    properties: [
                        { name: 'description' },
                        { name: 'hitPolicy' },
                        { name: 'name' }
                    ]
                };
            }
            case DMN_Expression: {
                return {
                    name: DMN_Expression,
                    properties: [
                        { name: 'body' },
                        { name: 'language' }
                    ]
                };
            }
            case DMN_InformationRequirement: {
                return {
                    name: DMN_InformationRequirement,
                    properties: [
                        { name: 'description' },
                        { name: 'source' },
                        { name: 'target' }
                    ]
                };
            }
            case DMN_InputData: {
                return {
                    name: DMN_InputData,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case DMN_KnowledgeSource: {
                return {
                    name: DMN_KnowledgeSource,
                    properties: [
                        { name: 'description' },
                        { name: 'name' },
                        { name: 'sourceType' }
                    ]
                };
            }
            case DMN_Model: {
                return {
                    name: DMN_Model,
                    properties: [
                        { name: 'elements', defaultValue: [] }
                    ]
                };
            }
            case FlowRelationship: {
                return {
                    name: FlowRelationship,
                    properties: [
                        { name: 'from' },
                        { name: 'object' },
                        { name: 'to' }
                    ]
                };
            }
            case InfluenceRelationship: {
                return {
                    name: InfluenceRelationship,
                    properties: [
                        { name: 'from' },
                        { name: 'strength' },
                        { name: 'to' }
                    ]
                };
            }
            case PMBOK_ActivityAttributes: {
                return {
                    name: PMBOK_ActivityAttributes,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_ActivityList: {
                return {
                    name: PMBOK_ActivityList,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_Agreements: {
                return {
                    name: PMBOK_Agreements,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_AssumptionLog: {
                return {
                    name: PMBOK_AssumptionLog,
                    properties: [
                        { name: 'entries', defaultValue: [] },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_BasisOfEstimates: {
                return {
                    name: PMBOK_BasisOfEstimates,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_BidDocuments: {
                return {
                    name: PMBOK_BidDocuments,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_ChangeLog: {
                return {
                    name: PMBOK_ChangeLog,
                    properties: [
                        { name: 'entries', defaultValue: [] },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_ChangeManagementPlan: {
                return {
                    name: PMBOK_ChangeManagementPlan,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_ChangeRequest: {
                return {
                    name: PMBOK_ChangeRequest,
                    properties: [
                        { name: 'description' },
                        { name: 'id' },
                        { name: 'status' }
                    ]
                };
            }
            case PMBOK_CommunicationsManagementPlan: {
                return {
                    name: PMBOK_CommunicationsManagementPlan,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_ConfigurationManagementPlan: {
                return {
                    name: PMBOK_ConfigurationManagementPlan,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_CostBaseline: {
                return {
                    name: PMBOK_CostBaseline,
                    properties: [
                        { name: 'name' },
                        { name: 'version' }
                    ]
                };
            }
            case PMBOK_CostEstimates: {
                return {
                    name: PMBOK_CostEstimates,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_CostManagementPlan: {
                return {
                    name: PMBOK_CostManagementPlan,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_Deliverable: {
                return {
                    name: PMBOK_Deliverable,
                    properties: [
                        { name: 'acceptanceCriteria' },
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_DurationEstimates: {
                return {
                    name: PMBOK_DurationEstimates,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_EnterpriseEnvironmentalFactors: {
                return {
                    name: PMBOK_EnterpriseEnvironmentalFactors,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_FinalReport: {
                return {
                    name: PMBOK_FinalReport,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_Input: {
                return {
                    name: PMBOK_Input,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_IssueLog: {
                return {
                    name: PMBOK_IssueLog,
                    properties: [
                        { name: 'entries', defaultValue: [] },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_ITTO_Reference: {
                return {
                    name: PMBOK_ITTO_Reference,
                    properties: [
                        { name: 'ref' }
                    ]
                };
            }
            case PMBOK_KnowledgeArea: {
                return {
                    name: PMBOK_KnowledgeArea,
                    properties: [
                        { name: 'description' },
                        { name: 'name' },
                        { name: 'processes', defaultValue: [] }
                    ]
                };
            }
            case PMBOK_LessonsLearnedRegister: {
                return {
                    name: PMBOK_LessonsLearnedRegister,
                    properties: [
                        { name: 'entries', defaultValue: [] },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_LogEntry: {
                return {
                    name: PMBOK_LogEntry,
                    properties: [
                        { name: 'date' },
                        { name: 'description' },
                        { name: 'id' },
                        { name: 'status' }
                    ]
                };
            }
            case PMBOK_MakeOrBuyDecisions: {
                return {
                    name: PMBOK_MakeOrBuyDecisions,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_MilestoneList: {
                return {
                    name: PMBOK_MilestoneList,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_OrganizationalProcessAssets: {
                return {
                    name: PMBOK_OrganizationalProcessAssets,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_Output: {
                return {
                    name: PMBOK_Output,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_PerformanceMeasurementBaseline: {
                return {
                    name: PMBOK_PerformanceMeasurementBaseline,
                    properties: [
                        { name: 'costBaselineRef' },
                        { name: 'name' },
                        { name: 'scheduleBaselineRef' },
                        { name: 'scopeBaselineRef' }
                    ]
                };
            }
            case PMBOK_ProcessGroup: {
                return {
                    name: PMBOK_ProcessGroup,
                    properties: [
                        { name: 'description' },
                        { name: 'name' },
                        { name: 'processes', defaultValue: [] }
                    ]
                };
            }
            case PMBOK_ProcurementManagementPlan: {
                return {
                    name: PMBOK_ProcurementManagementPlan,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_ProcurementStatementOfWork: {
                return {
                    name: PMBOK_ProcurementStatementOfWork,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_Project: {
                return {
                    name: PMBOK_Project,
                    properties: [
                        { name: 'assumptions' },
                        { name: 'charter' },
                        { name: 'constraints' },
                        { name: 'description' },
                        { name: 'lifecycleModel' },
                        { name: 'managementPlan' },
                        { name: 'name' },
                        { name: 'riskRegister' },
                        { name: 'stakeholderRegister' }
                    ]
                };
            }
            case PMBOK_ProjectCalendar: {
                return {
                    name: PMBOK_ProjectCalendar,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_ProjectCharter: {
                return {
                    name: PMBOK_ProjectCharter,
                    properties: [
                        { name: 'exitCriteria' },
                        { name: 'highLevelRequirements' },
                        { name: 'managerRef' },
                        { name: 'name' },
                        { name: 'objectives' },
                        { name: 'purpose' },
                        { name: 'sponsorRef' },
                        { name: 'successCriteria' }
                    ]
                };
            }
            case PMBOK_ProjectCommunications: {
                return {
                    name: PMBOK_ProjectCommunications,
                    properties: [
                        { name: 'description' },
                        { name: 'format' },
                        { name: 'name' },
                        { name: 'type' }
                    ]
                };
            }
            case PMBOK_ProjectFundingRequirements: {
                return {
                    name: PMBOK_ProjectFundingRequirements,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_ProjectManagementPlan: {
                return {
                    name: PMBOK_ProjectManagementPlan,
                    properties: [
                        { name: 'changeManagementPlan' },
                        { name: 'communicationsManagementPlan' },
                        { name: 'configurationManagementPlan' },
                        { name: 'costBaseline' },
                        { name: 'costManagementPlan' },
                        { name: 'name' },
                        { name: 'performanceMeasurementBaseline' },
                        { name: 'procurementManagementPlan' },
                        { name: 'qualityManagementPlan' },
                        { name: 'requirementsManagementPlan' },
                        { name: 'resourceManagementPlan' },
                        { name: 'riskManagementPlan' },
                        { name: 'scheduleBaseline' },
                        { name: 'scheduleManagementPlan' },
                        { name: 'scopeBaseline' },
                        { name: 'scopeManagementPlan' },
                        { name: 'stakeholderEngagementPlan' }
                    ]
                };
            }
            case PMBOK_ProjectProcess: {
                return {
                    name: PMBOK_ProjectProcess,
                    properties: [
                        { name: 'area' },
                        { name: 'description' },
                        { name: 'group' },
                        { name: 'inputs', defaultValue: [] },
                        { name: 'name' },
                        { name: 'outputs', defaultValue: [] },
                        { name: 'toolsTechniques', defaultValue: [] }
                    ]
                };
            }
            case PMBOK_ProjectSchedule: {
                return {
                    name: PMBOK_ProjectSchedule,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_ProjectScheduleNetworkDiagram: {
                return {
                    name: PMBOK_ProjectScheduleNetworkDiagram,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_ProjectScopeStatement: {
                return {
                    name: PMBOK_ProjectScopeStatement,
                    properties: [
                        { name: 'acceptanceCriteria' },
                        { name: 'description' },
                        { name: 'exclusions' },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_QualityControlMeasurements: {
                return {
                    name: PMBOK_QualityControlMeasurements,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_QualityManagementPlan: {
                return {
                    name: PMBOK_QualityManagementPlan,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_QualityMetrics: {
                return {
                    name: PMBOK_QualityMetrics,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_QualityReport: {
                return {
                    name: PMBOK_QualityReport,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_RequirementsDocumentation: {
                return {
                    name: PMBOK_RequirementsDocumentation,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_RequirementsManagementPlan: {
                return {
                    name: PMBOK_RequirementsManagementPlan,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_RequirementsTraceabilityMatrix: {
                return {
                    name: PMBOK_RequirementsTraceabilityMatrix,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_ResourceAssignments: {
                return {
                    name: PMBOK_ResourceAssignments,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_ResourceBreakdownStructure: {
                return {
                    name: PMBOK_ResourceBreakdownStructure,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_ResourceCalendar: {
                return {
                    name: PMBOK_ResourceCalendar,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_ResourceManagementPlan: {
                return {
                    name: PMBOK_ResourceManagementPlan,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_ResourceRequirements: {
                return {
                    name: PMBOK_ResourceRequirements,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_RiskItem: {
                return {
                    name: PMBOK_RiskItem,
                    properties: [
                        { name: 'category' },
                        { name: 'description' },
                        { name: 'id' },
                        { name: 'impact' },
                        { name: 'ownerRef' },
                        { name: 'probability' },
                        { name: 'response' },
                        { name: 'status' },
                        { name: 'trigger' }
                    ]
                };
            }
            case PMBOK_RiskManagementPlan: {
                return {
                    name: PMBOK_RiskManagementPlan,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_RiskRegister: {
                return {
                    name: PMBOK_RiskRegister,
                    properties: [
                        { name: 'name' },
                        { name: 'risks', defaultValue: [] }
                    ]
                };
            }
            case PMBOK_RiskReport: {
                return {
                    name: PMBOK_RiskReport,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_ScheduleBaseline: {
                return {
                    name: PMBOK_ScheduleBaseline,
                    properties: [
                        { name: 'name' },
                        { name: 'version' }
                    ]
                };
            }
            case PMBOK_ScheduleData: {
                return {
                    name: PMBOK_ScheduleData,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_ScheduleManagementPlan: {
                return {
                    name: PMBOK_ScheduleManagementPlan,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_ScopeBaseline: {
                return {
                    name: PMBOK_ScopeBaseline,
                    properties: [
                        { name: 'name' },
                        { name: 'scopeStatement' },
                        { name: 'wbs' },
                        { name: 'wbsDictionary' }
                    ]
                };
            }
            case PMBOK_ScopeManagementPlan: {
                return {
                    name: PMBOK_ScopeManagementPlan,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_SourceSelectionCriteria: {
                return {
                    name: PMBOK_SourceSelectionCriteria,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_StakeholderEngagementPlan: {
                return {
                    name: PMBOK_StakeholderEngagementPlan,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_StakeholderItem: {
                return {
                    name: PMBOK_StakeholderItem,
                    properties: [
                        { name: 'assessment' },
                        { name: 'category' },
                        { name: 'engagementStrategy' },
                        { name: 'id' },
                        { name: 'influence' },
                        { name: 'interest' },
                        { name: 'name' },
                        { name: 'role' }
                    ]
                };
            }
            case PMBOK_StakeholderRegister: {
                return {
                    name: PMBOK_StakeholderRegister,
                    properties: [
                        { name: 'name' },
                        { name: 'stakeholders', defaultValue: [] }
                    ]
                };
            }
            case PMBOK_TeamCharter: {
                return {
                    name: PMBOK_TeamCharter,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_TestAndEvaluationDocuments: {
                return {
                    name: PMBOK_TestAndEvaluationDocuments,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_ToolTechnique: {
                return {
                    name: PMBOK_ToolTechnique,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_WBS: {
                return {
                    name: PMBOK_WBS,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case PMBOK_WBS_Dictionary: {
                return {
                    name: PMBOK_WBS_Dictionary,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case PRINCE2_Activity: {
                return {
                    name: PRINCE2_Activity,
                    properties: [
                        { name: 'description' },
                        { name: 'inputs', defaultValue: [] },
                        { name: 'name' },
                        { name: 'outputs', defaultValue: [] },
                        { name: 'responsibleRoles', defaultValue: [] }
                    ]
                };
            }
            case PRINCE2_BenefitsManagementApproach: {
                return {
                    name: PRINCE2_BenefitsManagementApproach,
                    properties: [
                        { name: 'approvers', defaultValue: [] },
                        { name: 'composition' },
                        { name: 'description' },
                        { name: 'format' },
                        { name: 'name' },
                        { name: 'owner' },
                        { name: 'purpose' },
                        { name: 'qualityCriteria' },
                        { name: 'state' }
                    ]
                };
            }
            case PRINCE2_BusinessCase: {
                return {
                    name: PRINCE2_BusinessCase,
                    properties: [
                        { name: 'approvers', defaultValue: [] },
                        { name: 'businessOptions' },
                        { name: 'composition' },
                        { name: 'costs' },
                        { name: 'description' },
                        { name: 'expectedBenefits' },
                        { name: 'expectedDisbenefits' },
                        { name: 'format' },
                        { name: 'investmentAppraisal' },
                        { name: 'majorRisks' },
                        { name: 'name' },
                        { name: 'owner' },
                        { name: 'purpose' },
                        { name: 'qualityCriteria' },
                        { name: 'reasons' },
                        { name: 'state' },
                        { name: 'timescale' }
                    ]
                };
            }
            case PRINCE2_ChangeControlApproach: {
                return {
                    name: PRINCE2_ChangeControlApproach,
                    properties: [
                        { name: 'approvers', defaultValue: [] },
                        { name: 'composition' },
                        { name: 'description' },
                        { name: 'format' },
                        { name: 'name' },
                        { name: 'owner' },
                        { name: 'purpose' },
                        { name: 'qualityCriteria' },
                        { name: 'state' }
                    ]
                };
            }
            case PRINCE2_CheckpointReport: {
                return {
                    name: PRINCE2_CheckpointReport,
                    properties: [
                        { name: 'approvers', defaultValue: [] },
                        { name: 'composition' },
                        { name: 'description' },
                        { name: 'format' },
                        { name: 'name' },
                        { name: 'owner' },
                        { name: 'purpose' },
                        { name: 'qualityCriteria' },
                        { name: 'state' }
                    ]
                };
            }
            case PRINCE2_ClosingProject: {
                return {
                    name: PRINCE2_ClosingProject,
                    properties: [
                        { name: 'activities', defaultValue: [] },
                        { name: 'description' },
                        { name: 'inputs', defaultValue: [] },
                        { name: 'name' },
                        { name: 'outputs', defaultValue: [] },
                        { name: 'purpose' }
                    ]
                };
            }
            case PRINCE2_CommunicationManagementApproach: {
                return {
                    name: PRINCE2_CommunicationManagementApproach,
                    properties: [
                        { name: 'approvers', defaultValue: [] },
                        { name: 'composition' },
                        { name: 'description' },
                        { name: 'format' },
                        { name: 'name' },
                        { name: 'owner' },
                        { name: 'purpose' },
                        { name: 'qualityCriteria' },
                        { name: 'state' }
                    ]
                };
            }
            case PRINCE2_ConfigurationItemRecord: {
                return {
                    name: PRINCE2_ConfigurationItemRecord,
                    properties: [
                        { name: 'approvers', defaultValue: [] },
                        { name: 'composition' },
                        { name: 'description' },
                        { name: 'format' },
                        { name: 'name' },
                        { name: 'owner' },
                        { name: 'purpose' },
                        { name: 'qualityCriteria' },
                        { name: 'state' }
                    ]
                };
            }
            case PRINCE2_ControllingStage: {
                return {
                    name: PRINCE2_ControllingStage,
                    properties: [
                        { name: 'activities', defaultValue: [] },
                        { name: 'description' },
                        { name: 'inputs', defaultValue: [] },
                        { name: 'name' },
                        { name: 'outputs', defaultValue: [] },
                        { name: 'purpose' }
                    ]
                };
            }
            case PRINCE2_DailyLog: {
                return {
                    name: PRINCE2_DailyLog,
                    properties: [
                        { name: 'approvers', defaultValue: [] },
                        { name: 'composition' },
                        { name: 'description' },
                        { name: 'format' },
                        { name: 'name' },
                        { name: 'owner' },
                        { name: 'purpose' },
                        { name: 'qualityCriteria' },
                        { name: 'state' }
                    ]
                };
            }
            case PRINCE2_Directing: {
                return {
                    name: PRINCE2_Directing,
                    properties: [
                        { name: 'activities', defaultValue: [] },
                        { name: 'description' },
                        { name: 'inputs', defaultValue: [] },
                        { name: 'name' },
                        { name: 'outputs', defaultValue: [] },
                        { name: 'purpose' }
                    ]
                };
            }
            case PRINCE2_EndProjectReport: {
                return {
                    name: PRINCE2_EndProjectReport,
                    properties: [
                        { name: 'approvers', defaultValue: [] },
                        { name: 'composition' },
                        { name: 'description' },
                        { name: 'format' },
                        { name: 'name' },
                        { name: 'owner' },
                        { name: 'purpose' },
                        { name: 'qualityCriteria' },
                        { name: 'state' }
                    ]
                };
            }
            case PRINCE2_EndStageReport: {
                return {
                    name: PRINCE2_EndStageReport,
                    properties: [
                        { name: 'approvers', defaultValue: [] },
                        { name: 'composition' },
                        { name: 'description' },
                        { name: 'format' },
                        { name: 'name' },
                        { name: 'owner' },
                        { name: 'purpose' },
                        { name: 'qualityCriteria' },
                        { name: 'state' }
                    ]
                };
            }
            case PRINCE2_ExceptionPlan: {
                return {
                    name: PRINCE2_ExceptionPlan,
                    properties: [
                        { name: 'approvers', defaultValue: [] },
                        { name: 'composition' },
                        { name: 'description' },
                        { name: 'format' },
                        { name: 'name' },
                        { name: 'owner' },
                        { name: 'purpose' },
                        { name: 'qualityCriteria' },
                        { name: 'state' }
                    ]
                };
            }
            case PRINCE2_ExceptionReport: {
                return {
                    name: PRINCE2_ExceptionReport,
                    properties: [
                        { name: 'approvers', defaultValue: [] },
                        { name: 'composition' },
                        { name: 'description' },
                        { name: 'format' },
                        { name: 'name' },
                        { name: 'owner' },
                        { name: 'purpose' },
                        { name: 'qualityCriteria' },
                        { name: 'state' }
                    ]
                };
            }
            case PRINCE2_HighlightReport: {
                return {
                    name: PRINCE2_HighlightReport,
                    properties: [
                        { name: 'approvers', defaultValue: [] },
                        { name: 'composition' },
                        { name: 'description' },
                        { name: 'format' },
                        { name: 'name' },
                        { name: 'owner' },
                        { name: 'purpose' },
                        { name: 'qualityCriteria' },
                        { name: 'state' }
                    ]
                };
            }
            case PRINCE2_Initiating: {
                return {
                    name: PRINCE2_Initiating,
                    properties: [
                        { name: 'activities', defaultValue: [] },
                        { name: 'description' },
                        { name: 'inputs', defaultValue: [] },
                        { name: 'name' },
                        { name: 'outputs', defaultValue: [] },
                        { name: 'purpose' }
                    ]
                };
            }
            case PRINCE2_IssueRegister: {
                return {
                    name: PRINCE2_IssueRegister,
                    properties: [
                        { name: 'approvers', defaultValue: [] },
                        { name: 'composition' },
                        { name: 'description' },
                        { name: 'format' },
                        { name: 'name' },
                        { name: 'owner' },
                        { name: 'purpose' },
                        { name: 'qualityCriteria' },
                        { name: 'state' }
                    ]
                };
            }
            case PRINCE2_IssueReport: {
                return {
                    name: PRINCE2_IssueReport,
                    properties: [
                        { name: 'approvers', defaultValue: [] },
                        { name: 'composition' },
                        { name: 'description' },
                        { name: 'format' },
                        { name: 'name' },
                        { name: 'owner' },
                        { name: 'purpose' },
                        { name: 'qualityCriteria' },
                        { name: 'state' }
                    ]
                };
            }
            case PRINCE2_LessonsLog: {
                return {
                    name: PRINCE2_LessonsLog,
                    properties: [
                        { name: 'approvers', defaultValue: [] },
                        { name: 'composition' },
                        { name: 'description' },
                        { name: 'format' },
                        { name: 'name' },
                        { name: 'owner' },
                        { name: 'purpose' },
                        { name: 'qualityCriteria' },
                        { name: 'state' }
                    ]
                };
            }
            case PRINCE2_LessonsReport: {
                return {
                    name: PRINCE2_LessonsReport,
                    properties: [
                        { name: 'approvers', defaultValue: [] },
                        { name: 'composition' },
                        { name: 'description' },
                        { name: 'format' },
                        { name: 'name' },
                        { name: 'owner' },
                        { name: 'purpose' },
                        { name: 'qualityCriteria' },
                        { name: 'state' }
                    ]
                };
            }
            case PRINCE2_ManagingProductDelivery: {
                return {
                    name: PRINCE2_ManagingProductDelivery,
                    properties: [
                        { name: 'activities', defaultValue: [] },
                        { name: 'description' },
                        { name: 'inputs', defaultValue: [] },
                        { name: 'name' },
                        { name: 'outputs', defaultValue: [] },
                        { name: 'purpose' }
                    ]
                };
            }
            case PRINCE2_ManagingStageBoundary: {
                return {
                    name: PRINCE2_ManagingStageBoundary,
                    properties: [
                        { name: 'activities', defaultValue: [] },
                        { name: 'description' },
                        { name: 'inputs', defaultValue: [] },
                        { name: 'name' },
                        { name: 'outputs', defaultValue: [] },
                        { name: 'purpose' }
                    ]
                };
            }
            case PRINCE2_PID: {
                return {
                    name: PRINCE2_PID,
                    properties: [
                        { name: 'approvers', defaultValue: [] },
                        { name: 'businessCaseRef' },
                        { name: 'composition' },
                        { name: 'description' },
                        { name: 'format' },
                        { name: 'name' },
                        { name: 'owner' },
                        { name: 'projectPlanRef' },
                        { name: 'purpose' },
                        { name: 'qualityCriteria' },
                        { name: 'state' }
                    ]
                };
            }
            case PRINCE2_Plan: {
                return {
                    name: PRINCE2_Plan,
                    properties: [
                        { name: 'approvers', defaultValue: [] },
                        { name: 'composition' },
                        { name: 'description' },
                        { name: 'format' },
                        { name: 'name' },
                        { name: 'planType' },
                        { name: 'purpose' },
                        { name: 'qualityCriteria' },
                        { name: 'state' }
                    ]
                };
            }
            case PRINCE2_PlanOwnership: {
                return {
                    name: PRINCE2_PlanOwnership,
                    properties: [
                        { name: 'assignmentDate' },
                        { name: 'ownerRef' },
                        { name: 'planRef' }
                    ]
                };
            }
            case PRINCE2_Principle: {
                return {
                    name: PRINCE2_Principle,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case PRINCE2_ProductDescription: {
                return {
                    name: PRINCE2_ProductDescription,
                    properties: [
                        { name: 'approvers', defaultValue: [] },
                        { name: 'composition' },
                        { name: 'description' },
                        { name: 'format' },
                        { name: 'name' },
                        { name: 'owner' },
                        { name: 'purpose' },
                        { name: 'qualityCriteria' },
                        { name: 'state' }
                    ]
                };
            }
            case PRINCE2_ProductStatusAccount: {
                return {
                    name: PRINCE2_ProductStatusAccount,
                    properties: [
                        { name: 'approvers', defaultValue: [] },
                        { name: 'composition' },
                        { name: 'description' },
                        { name: 'format' },
                        { name: 'name' },
                        { name: 'owner' },
                        { name: 'purpose' },
                        { name: 'qualityCriteria' },
                        { name: 'state' }
                    ]
                };
            }
            case PRINCE2_ProjectBrief: {
                return {
                    name: PRINCE2_ProjectBrief,
                    properties: [
                        { name: 'approvers', defaultValue: [] },
                        { name: 'composition' },
                        { name: 'description' },
                        { name: 'format' },
                        { name: 'name' },
                        { name: 'owner' },
                        { name: 'purpose' },
                        { name: 'qualityCriteria' },
                        { name: 'state' }
                    ]
                };
            }
            case PRINCE2_ProjectPlan: {
                return {
                    name: PRINCE2_ProjectPlan,
                    properties: [
                        { name: 'approvers', defaultValue: [] },
                        { name: 'composition' },
                        { name: 'description' },
                        { name: 'format' },
                        { name: 'name' },
                        { name: 'owner' },
                        { name: 'purpose' },
                        { name: 'qualityCriteria' },
                        { name: 'state' }
                    ]
                };
            }
            case PRINCE2_ProjectProductDescription: {
                return {
                    name: PRINCE2_ProjectProductDescription,
                    properties: [
                        { name: 'acceptanceCriteria' },
                        { name: 'acceptanceMethod' },
                        { name: 'acceptanceResponsibilities' },
                        { name: 'approvers', defaultValue: [] },
                        { name: 'composition' },
                        { name: 'compositionDetails' },
                        { name: 'customerQualityExpectations' },
                        { name: 'derivation' },
                        { name: 'description' },
                        { name: 'developmentSkills' },
                        { name: 'format' },
                        { name: 'name' },
                        { name: 'overallPurpose' },
                        { name: 'owner' },
                        { name: 'projectLevelQualityTolerances' },
                        { name: 'purpose' },
                        { name: 'qualityCriteria' },
                        { name: 'state' }
                    ]
                };
            }
            case PRINCE2_QualityManagementApproach: {
                return {
                    name: PRINCE2_QualityManagementApproach,
                    properties: [
                        { name: 'approvers', defaultValue: [] },
                        { name: 'composition' },
                        { name: 'description' },
                        { name: 'format' },
                        { name: 'name' },
                        { name: 'owner' },
                        { name: 'purpose' },
                        { name: 'qualityCriteria' },
                        { name: 'state' }
                    ]
                };
            }
            case PRINCE2_QualityRegister: {
                return {
                    name: PRINCE2_QualityRegister,
                    properties: [
                        { name: 'approvers', defaultValue: [] },
                        { name: 'composition' },
                        { name: 'description' },
                        { name: 'format' },
                        { name: 'name' },
                        { name: 'owner' },
                        { name: 'purpose' },
                        { name: 'qualityCriteria' },
                        { name: 'state' }
                    ]
                };
            }
            case PRINCE2_Ref: {
                return {
                    name: PRINCE2_Ref,
                    properties: [
                        { name: 'ref' }
                    ]
                };
            }
            case PRINCE2_RiskManagementApproach: {
                return {
                    name: PRINCE2_RiskManagementApproach,
                    properties: [
                        { name: 'approvers', defaultValue: [] },
                        { name: 'composition' },
                        { name: 'description' },
                        { name: 'format' },
                        { name: 'name' },
                        { name: 'owner' },
                        { name: 'purpose' },
                        { name: 'qualityCriteria' },
                        { name: 'state' }
                    ]
                };
            }
            case PRINCE2_RiskRegister: {
                return {
                    name: PRINCE2_RiskRegister,
                    properties: [
                        { name: 'approvers', defaultValue: [] },
                        { name: 'composition' },
                        { name: 'description' },
                        { name: 'format' },
                        { name: 'name' },
                        { name: 'owner' },
                        { name: 'purpose' },
                        { name: 'qualityCriteria' },
                        { name: 'state' }
                    ]
                };
            }
            case PRINCE2_RiskReport: {
                return {
                    name: PRINCE2_RiskReport,
                    properties: [
                        { name: 'approvers', defaultValue: [] },
                        { name: 'composition' },
                        { name: 'description' },
                        { name: 'format' },
                        { name: 'name' },
                        { name: 'owner' },
                        { name: 'purpose' },
                        { name: 'qualityCriteria' },
                        { name: 'state' }
                    ]
                };
            }
            case PRINCE2_Role: {
                return {
                    name: PRINCE2_Role,
                    properties: [
                        { name: 'description' },
                        { name: 'name' },
                        { name: 'reportsToRef' },
                        { name: 'responsibilities' },
                        { name: 'responsibleForProducts', defaultValue: [] },
                        { name: 'roleType' }
                    ]
                };
            }
            case PRINCE2_StagePlan: {
                return {
                    name: PRINCE2_StagePlan,
                    properties: [
                        { name: 'approvers', defaultValue: [] },
                        { name: 'composition' },
                        { name: 'description' },
                        { name: 'format' },
                        { name: 'name' },
                        { name: 'owner' },
                        { name: 'purpose' },
                        { name: 'qualityCriteria' },
                        { name: 'state' }
                    ]
                };
            }
            case PRINCE2_StartingUp: {
                return {
                    name: PRINCE2_StartingUp,
                    properties: [
                        { name: 'activities', defaultValue: [] },
                        { name: 'description' },
                        { name: 'inputs', defaultValue: [] },
                        { name: 'name' },
                        { name: 'outputs', defaultValue: [] },
                        { name: 'purpose' }
                    ]
                };
            }
            case PRINCE2_Tailoring: {
                return {
                    name: PRINCE2_Tailoring,
                    properties: [
                        { name: 'description' },
                        { name: 'name' },
                        { name: 'projectRef' }
                    ]
                };
            }
            case PRINCE2_TeamPlan: {
                return {
                    name: PRINCE2_TeamPlan,
                    properties: [
                        { name: 'approvers', defaultValue: [] },
                        { name: 'composition' },
                        { name: 'description' },
                        { name: 'format' },
                        { name: 'name' },
                        { name: 'owner' },
                        { name: 'purpose' },
                        { name: 'qualityCriteria' },
                        { name: 'state' }
                    ]
                };
            }
            case PRINCE2_Theme: {
                return {
                    name: PRINCE2_Theme,
                    properties: [
                        { name: 'description' },
                        { name: 'managementProducts', defaultValue: [] },
                        { name: 'name' },
                        { name: 'purpose' }
                    ]
                };
            }
            case PRINCE2_WorkPackage: {
                return {
                    name: PRINCE2_WorkPackage,
                    properties: [
                        { name: 'approvers', defaultValue: [] },
                        { name: 'composition' },
                        { name: 'description' },
                        { name: 'format' },
                        { name: 'name' },
                        { name: 'owner' },
                        { name: 'purpose' },
                        { name: 'qualityCriteria' },
                        { name: 'state' }
                    ]
                };
            }
            case RealizationRelationship: {
                return {
                    name: RealizationRelationship,
                    properties: [
                        { name: 'from' },
                        { name: 'to' }
                    ]
                };
            }
            case SAP_Association: {
                return {
                    name: SAP_Association,
                    properties: [
                        { name: 'cardinality' },
                        { name: 'mappings', defaultValue: [] },
                        { name: 'name' },
                        { name: 'toNode' }
                    ]
                };
            }
            case SAP_BusinessObject: {
                return {
                    name: SAP_BusinessObject,
                    properties: [
                        { name: 'description' },
                        { name: 'module' },
                        { name: 'name' },
                        { name: 'nodes', defaultValue: [] },
                        { name: 'technicalName' }
                    ]
                };
            }
            case SAP_BusinessObjectNode: {
                return {
                    name: SAP_BusinessObjectNode,
                    properties: [
                        { name: 'associations', defaultValue: [] },
                        { name: 'cardinality' },
                        { name: 'fields', defaultValue: [] },
                        { name: 'name' }
                    ]
                };
            }
            case SAP_BusinessProcess: {
                return {
                    name: SAP_BusinessProcess,
                    properties: [
                        { name: 'deploymentUnit' },
                        { name: 'description' },
                        { name: 'name' },
                        { name: 'processComponent' },
                        { name: 'steps', defaultValue: [] }
                    ]
                };
            }
            case SAP_Field: {
                return {
                    name: SAP_Field,
                    properties: [
                        { name: 'description' },
                        { name: 'fieldType' },
                        { name: 'isKey', defaultValue: false },
                        { name: 'length' },
                        { name: 'mandatory', defaultValue: false },
                        { name: 'name' },
                        { name: 'searchHelp' },
                        { name: 'valueHelp' }
                    ]
                };
            }
            case SAP_FieldMapping: {
                return {
                    name: SAP_FieldMapping,
                    properties: [
                        { name: 'sourceField' },
                        { name: 'targetField' }
                    ]
                };
            }
            case SAP_Message: {
                return {
                    name: SAP_Message,
                    properties: [
                        { name: 'description' },
                        { name: 'name' },
                        { name: 'namespace' },
                        { name: 'typeDefinition' }
                    ]
                };
            }
            case SAP_Model: {
                return {
                    name: SAP_Model,
                    properties: [
                        { name: 'elements', defaultValue: [] }
                    ]
                };
            }
            case SAP_Operation: {
                return {
                    name: SAP_Operation,
                    properties: [
                        { name: 'description' },
                        { name: 'error' },
                        { name: 'input' },
                        { name: 'name' },
                        { name: 'output' }
                    ]
                };
            }
            case SAP_ProcessStep: {
                return {
                    name: SAP_ProcessStep,
                    properties: [
                        { name: 'businessObject' },
                        { name: 'description' },
                        { name: 'name' },
                        { name: 'predecessor' },
                        { name: 'service' },
                        { name: 'stepType' }
                    ]
                };
            }
            case SAP_Service: {
                return {
                    name: SAP_Service,
                    properties: [
                        { name: 'description' },
                        { name: 'name' },
                        { name: 'namespace' },
                        { name: 'operations', defaultValue: [] }
                    ]
                };
            }
            case SAP_Table: {
                return {
                    name: SAP_Table,
                    properties: [
                        { name: 'deliveryClass' },
                        { name: 'description' },
                        { name: 'fields', defaultValue: [] },
                        { name: 'keys', defaultValue: [] },
                        { name: 'name' },
                        { name: 'technicalName' }
                    ]
                };
            }
            case SAP_TableField: {
                return {
                    name: SAP_TableField,
                    properties: [
                        { name: 'dataElement' },
                        { name: 'description' },
                        { name: 'isKey', defaultValue: false },
                        { name: 'length' },
                        { name: 'name' },
                        { name: 'notNull', defaultValue: false },
                        { name: 'type' }
                    ]
                };
            }
            case SAP_TableKey: {
                return {
                    name: SAP_TableKey,
                    properties: [
                        { name: 'fields', defaultValue: [] },
                        { name: 'name' }
                    ]
                };
            }
            case SAP_ValueHelp: {
                return {
                    name: SAP_ValueHelp,
                    properties: [
                        { name: 'description' },
                        { name: 'entity' },
                        { name: 'fields', defaultValue: [] },
                        { name: 'name' },
                        { name: 'sourceType' }
                    ]
                };
            }
            case SBVR_BusinessRule: {
                return {
                    name: SBVR_BusinessRule,
                    properties: [
                        { name: 'definition' },
                        { name: 'description' },
                        { name: 'formulation' },
                        { name: 'modality' },
                        { name: 'name' },
                        { name: 'reference' },
                        { name: 'ruleType' }
                    ]
                };
            }
            case SBVR_BusinessVocabulary: {
                return {
                    name: SBVR_BusinessVocabulary,
                    properties: [
                        { name: 'concepts', defaultValue: [] },
                        { name: 'description' },
                        { name: 'factTypes', defaultValue: [] },
                        { name: 'name' },
                        { name: 'objectTypes', defaultValue: [] }
                    ]
                };
            }
            case SBVR_Characteristic: {
                return {
                    name: SBVR_Characteristic,
                    properties: [
                        { name: 'description' },
                        { name: 'fact' },
                        { name: 'name' }
                    ]
                };
            }
            case SBVR_Concept: {
                return {
                    name: SBVR_Concept,
                    properties: [
                        { name: 'conceptType' },
                        { name: 'definition' },
                        { name: 'description' },
                        { name: 'examples', defaultValue: [] },
                        { name: 'name' },
                        { name: 'synonyms', defaultValue: [] }
                    ]
                };
            }
            case SBVR_FactType: {
                return {
                    name: SBVR_FactType,
                    properties: [
                        { name: 'definition' },
                        { name: 'description' },
                        { name: 'examples', defaultValue: [] },
                        { name: 'name' },
                        { name: 'roles', defaultValue: [] }
                    ]
                };
            }
            case SBVR_FactTypeRole: {
                return {
                    name: SBVR_FactTypeRole,
                    properties: [
                        { name: 'concept' },
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case SBVR_Model: {
                return {
                    name: SBVR_Model,
                    properties: [
                        { name: 'elements', defaultValue: [] }
                    ]
                };
            }
            case SBVR_ObjectType: {
                return {
                    name: SBVR_ObjectType,
                    properties: [
                        { name: 'characteristics', defaultValue: [] },
                        { name: 'definition' },
                        { name: 'description' },
                        { name: 'general' },
                        { name: 'name' }
                    ]
                };
            }
            case ServingRelationship: {
                return {
                    name: ServingRelationship,
                    properties: [
                        { name: 'from' },
                        { name: 'to' }
                    ]
                };
            }
            case SpecializationRelationship: {
                return {
                    name: SpecializationRelationship,
                    properties: [
                        { name: 'from' },
                        { name: 'to' }
                    ]
                };
            }
            case TOGAF_ADMPhase: {
                return {
                    name: TOGAF_ADMPhase,
                    properties: [
                        { name: 'description' },
                        { name: 'inputs', defaultValue: [] },
                        { name: 'name' },
                        { name: 'objectives', defaultValue: [] },
                        { name: 'outputs', defaultValue: [] },
                        { name: 'phaseType' },
                        { name: 'steps', defaultValue: [] }
                    ]
                };
            }
            case TOGAF_ADMStep: {
                return {
                    name: TOGAF_ADMStep,
                    properties: [
                        { name: 'activities', defaultValue: [] },
                        { name: 'description' },
                        { name: 'name' },
                        { name: 'stepNumber' }
                    ]
                };
            }
            case TOGAF_Architecture: {
                return {
                    name: TOGAF_Architecture,
                    properties: [
                        { name: 'architectureType' },
                        { name: 'buildingBlocks', defaultValue: [] },
                        { name: 'description' },
                        { name: 'name' },
                        { name: 'principles', defaultValue: [] },
                        { name: 'requirements', defaultValue: [] },
                        { name: 'version' },
                        { name: 'viewpoints', defaultValue: [] }
                    ]
                };
            }
            case TOGAF_ArchitectureBuilding: {
                return {
                    name: TOGAF_ArchitectureBuilding,
                    properties: [
                        { name: 'capabilities', defaultValue: [] },
                        { name: 'description' },
                        { name: 'functions', defaultValue: [] },
                        { name: 'name' },
                        { name: 'relationships', defaultValue: [] },
                        { name: 'type' }
                    ]
                };
            }
            case TOGAF_ArchitectureGap: {
                return {
                    name: TOGAF_ArchitectureGap,
                    properties: [
                        { name: 'analysis' },
                        { name: 'baselineComponent' },
                        { name: 'description' },
                        { name: 'gapType' },
                        { name: 'name' },
                        { name: 'targetComponent' }
                    ]
                };
            }
            case TOGAF_ArchitecturePrinciple: {
                return {
                    name: TOGAF_ArchitecturePrinciple,
                    properties: [
                        { name: 'description' },
                        { name: 'domain' },
                        { name: 'implications', defaultValue: [] },
                        { name: 'keyMetrics', defaultValue: [] },
                        { name: 'name' },
                        { name: 'rationale' }
                    ]
                };
            }
            case TOGAF_ArchitectureRelationship: {
                return {
                    name: TOGAF_ArchitectureRelationship,
                    properties: [
                        { name: 'description' },
                        { name: 'relationType' },
                        { name: 'source' },
                        { name: 'target' }
                    ]
                };
            }
            case TOGAF_ArchitectureRequirement: {
                return {
                    name: TOGAF_ArchitectureRequirement,
                    properties: [
                        { name: 'description' },
                        { name: 'name' },
                        { name: 'priority' },
                        { name: 'rationale' },
                        { name: 'source' },
                        { name: 'statement' }
                    ]
                };
            }
            case TOGAF_ArchitectureViewpoint: {
                return {
                    name: TOGAF_ArchitectureViewpoint,
                    properties: [
                        { name: 'concerns', defaultValue: [] },
                        { name: 'description' },
                        { name: 'framework' },
                        { name: 'name' },
                        { name: 'purpose' },
                        { name: 'stakeholders', defaultValue: [] }
                    ]
                };
            }
            case TOGAF_ArchitectureVision: {
                return {
                    name: TOGAF_ArchitectureVision,
                    properties: [
                        { name: 'concernStatements', defaultValue: [] },
                        { name: 'description' },
                        { name: 'name' },
                        { name: 'objectives', defaultValue: [] },
                        { name: 'stakeholders', defaultValue: [] },
                        { name: 'targetState' }
                    ]
                };
            }
            case TOGAF_Implementation: {
                return {
                    name: TOGAF_Implementation,
                    properties: [
                        { name: 'buildingBlocks', defaultValue: [] },
                        { name: 'description' },
                        { name: 'migrationApproach' },
                        { name: 'name' },
                        { name: 'workPackages', defaultValue: [] }
                    ]
                };
            }
            case TOGAF_Model: {
                return {
                    name: TOGAF_Model,
                    properties: [
                        { name: 'elements', defaultValue: [] }
                    ]
                };
            }
            case TOGAF_Stakeholder: {
                return {
                    name: TOGAF_Stakeholder,
                    properties: [
                        { name: 'class' },
                        { name: 'concerns', defaultValue: [] },
                        { name: 'description' },
                        { name: 'name' },
                        { name: 'role' },
                        { name: 'viewpoints', defaultValue: [] }
                    ]
                };
            }
            case TOGAF_WorkPackage: {
                return {
                    name: TOGAF_WorkPackage,
                    properties: [
                        { name: 'deliverables', defaultValue: [] },
                        { name: 'description' },
                        { name: 'issues', defaultValue: [] },
                        { name: 'name' },
                        { name: 'priority' },
                        { name: 'resources', defaultValue: [] },
                        { name: 'risks', defaultValue: [] }
                    ]
                };
            }
            case TriggeringRelationship: {
                return {
                    name: TriggeringRelationship,
                    properties: [
                        { name: 'from' },
                        { name: 'to' }
                    ]
                };
            }
            case UMLActivityDiagram: {
                return {
                    name: UMLActivityDiagram,
                    properties: [
                        { name: 'description' },
                        { name: 'flows', defaultValue: [] },
                        { name: 'name' },
                        { name: 'nodes', defaultValue: [] }
                    ]
                };
            }
            case UMLActivityFlow: {
                return {
                    name: UMLActivityFlow,
                    properties: [
                        { name: 'description' },
                        { name: 'from' },
                        { name: 'guard' },
                        { name: 'label' },
                        { name: 'to' }
                    ]
                };
            }
            case UMLActivityNode: {
                return {
                    name: UMLActivityNode,
                    properties: [
                        { name: 'action' },
                        { name: 'description' },
                        { name: 'guard' },
                        { name: 'name' },
                        { name: 'nodeType' }
                    ]
                };
            }
            case UMLAttribute: {
                return {
                    name: UMLAttribute,
                    properties: [
                        { name: 'defaultValue' },
                        { name: 'description' },
                        { name: 'name' },
                        { name: 'nullable', defaultValue: false },
                        { name: 'readonly', defaultValue: false },
                        { name: 'type' },
                        { name: 'unique', defaultValue: false },
                        { name: 'visibility' }
                    ]
                };
            }
            case UMLClass: {
                return {
                    name: UMLClass,
                    properties: [
                        { name: 'attributes', defaultValue: [] },
                        { name: 'description' },
                        { name: 'extends' },
                        { name: 'implements', defaultValue: [] },
                        { name: 'isAbstract', defaultValue: false },
                        { name: 'methods', defaultValue: [] },
                        { name: 'name' }
                    ]
                };
            }
            case UMLClassDiagram: {
                return {
                    name: UMLClassDiagram,
                    properties: [
                        { name: 'description' },
                        { name: 'elements', defaultValue: [] },
                        { name: 'name' },
                        { name: 'namespace' }
                    ]
                };
            }
            case UMLComponent: {
                return {
                    name: UMLComponent,
                    properties: [
                        { name: 'description' },
                        { name: 'name' },
                        { name: 'provides', defaultValue: [] },
                        { name: 'requires', defaultValue: [] }
                    ]
                };
            }
            case UMLComponentDependency: {
                return {
                    name: UMLComponentDependency,
                    properties: [
                        { name: 'description' },
                        { name: 'from' },
                        { name: 'label' },
                        { name: 'to' }
                    ]
                };
            }
            case UMLComponentDiagram: {
                return {
                    name: UMLComponentDiagram,
                    properties: [
                        { name: 'components', defaultValue: [] },
                        { name: 'dependencies', defaultValue: [] },
                        { name: 'description' },
                        { name: 'interfaces', defaultValue: [] },
                        { name: 'name' }
                    ]
                };
            }
            case UMLComponentInterface: {
                return {
                    name: UMLComponentInterface,
                    properties: [
                        { name: 'description' },
                        { name: 'name' },
                        { name: 'operations', defaultValue: [] }
                    ]
                };
            }
            case UMLComponentOperation: {
                return {
                    name: UMLComponentOperation,
                    properties: [
                        { name: 'description' },
                        { name: 'name' },
                        { name: 'parameters', defaultValue: [] },
                        { name: 'returnType' }
                    ]
                };
            }
            case UMLEnum: {
                return {
                    name: UMLEnum,
                    properties: [
                        { name: 'description' },
                        { name: 'name' },
                        { name: 'values', defaultValue: [] }
                    ]
                };
            }
            case UMLEnumValue: {
                return {
                    name: UMLEnumValue,
                    properties: [
                        { name: 'description' },
                        { name: 'name' }
                    ]
                };
            }
            case UMLInterface: {
                return {
                    name: UMLInterface,
                    properties: [
                        { name: 'description' },
                        { name: 'extends', defaultValue: [] },
                        { name: 'methods', defaultValue: [] },
                        { name: 'name' }
                    ]
                };
            }
            case UMLLifeline: {
                return {
                    name: UMLLifeline,
                    properties: [
                        { name: 'description' },
                        { name: 'name' },
                        { name: 'represents' }
                    ]
                };
            }
            case UMLMessage: {
                return {
                    name: UMLMessage,
                    properties: [
                        { name: 'description' },
                        { name: 'from' },
                        { name: 'messageType' },
                        { name: 'method' },
                        { name: 'name' },
                        { name: 'to' }
                    ]
                };
            }
            case UMLMethod: {
                return {
                    name: UMLMethod,
                    properties: [
                        { name: 'description' },
                        { name: 'isAbstract', defaultValue: false },
                        { name: 'isStatic', defaultValue: false },
                        { name: 'name' },
                        { name: 'parameters', defaultValue: [] },
                        { name: 'returnType' },
                        { name: 'visibility' }
                    ]
                };
            }
            case UMLModel: {
                return {
                    name: UMLModel,
                    properties: [
                        { name: 'elements', defaultValue: [] }
                    ]
                };
            }
            case UMLParameter: {
                return {
                    name: UMLParameter,
                    properties: [
                        { name: 'name' },
                        { name: 'type' }
                    ]
                };
            }
            case UMLRelationship: {
                return {
                    name: UMLRelationship,
                    properties: [
                        { name: 'description' },
                        { name: 'name' },
                        { name: 'source' },
                        { name: 'sourceMultiplicity' },
                        { name: 'sourceRole' },
                        { name: 'target' },
                        { name: 'targetMultiplicity' },
                        { name: 'targetRole' },
                        { name: 'type' }
                    ]
                };
            }
            case UMLSequenceDiagram: {
                return {
                    name: UMLSequenceDiagram,
                    properties: [
                        { name: 'description' },
                        { name: 'lifelines', defaultValue: [] },
                        { name: 'messages', defaultValue: [] },
                        { name: 'name' }
                    ]
                };
            }
            case UMLState: {
                return {
                    name: UMLState,
                    properties: [
                        { name: 'description' },
                        { name: 'entryAction' },
                        { name: 'exitAction' },
                        { name: 'isFinal', defaultValue: false },
                        { name: 'isInitial', defaultValue: false },
                        { name: 'name' }
                    ]
                };
            }
            case UMLStateDiagram: {
                return {
                    name: UMLStateDiagram,
                    properties: [
                        { name: 'description' },
                        { name: 'name' },
                        { name: 'states', defaultValue: [] },
                        { name: 'targetClass' },
                        { name: 'transitions', defaultValue: [] }
                    ]
                };
            }
            case UMLTransition: {
                return {
                    name: UMLTransition,
                    properties: [
                        { name: 'action' },
                        { name: 'description' },
                        { name: 'event' },
                        { name: 'from' },
                        { name: 'guard' },
                        { name: 'to' }
                    ]
                };
            }
            case VDML_Activity: {
                return {
                    name: VDML_Activity,
                    properties: [
                        { name: 'deliveredValue' },
                        { name: 'description' },
                        { name: 'duration' },
                        { name: 'inputs', defaultValue: [] },
                        { name: 'name' },
                        { name: 'outputs', defaultValue: [] }
                    ]
                };
            }
            case VDML_BusinessNetwork: {
                return {
                    name: VDML_BusinessNetwork,
                    properties: [
                        { name: 'communities', defaultValue: [] },
                        { name: 'description' },
                        { name: 'name' },
                        { name: 'participants', defaultValue: [] },
                        { name: 'valuePropositions', defaultValue: [] }
                    ]
                };
            }
            case VDML_Capability: {
                return {
                    name: VDML_Capability,
                    properties: [
                        { name: 'activities', defaultValue: [] },
                        { name: 'description' },
                        { name: 'level' },
                        { name: 'name' },
                        { name: 'resources', defaultValue: [] }
                    ]
                };
            }
            case VDML_Collaboration: {
                return {
                    name: VDML_Collaboration,
                    properties: [
                        { name: 'activities', defaultValue: [] },
                        { name: 'description' },
                        { name: 'name' },
                        { name: 'participants', defaultValue: [] }
                    ]
                };
            }
            case VDML_Community: {
                return {
                    name: VDML_Community,
                    properties: [
                        { name: 'capabilities', defaultValue: [] },
                        { name: 'description' },
                        { name: 'name' },
                        { name: 'roles', defaultValue: [] }
                    ]
                };
            }
            case VDML_DeliveredValue: {
                return {
                    name: VDML_DeliveredValue,
                    properties: [
                        { name: 'formula' },
                        { name: 'valuation' }
                    ]
                };
            }
            case VDML_Model: {
                return {
                    name: VDML_Model,
                    properties: [
                        { name: 'elements', defaultValue: [] }
                    ]
                };
            }
            case VDML_Participant: {
                return {
                    name: VDML_Participant,
                    properties: [
                        { name: 'capabilities', defaultValue: [] },
                        { name: 'description' },
                        { name: 'name' },
                        { name: 'roles', defaultValue: [] },
                        { name: 'type' }
                    ]
                };
            }
            case VDML_Resource: {
                return {
                    name: VDML_Resource,
                    properties: [
                        { name: 'description' },
                        { name: 'name' },
                        { name: 'quantity' },
                        { name: 'unit' }
                    ]
                };
            }
            case VDML_Role: {
                return {
                    name: VDML_Role,
                    properties: [
                        { name: 'community' },
                        { name: 'description' },
                        { name: 'name' },
                        { name: 'responsibilities', defaultValue: [] }
                    ]
                };
            }
            case VDML_Store: {
                return {
                    name: VDML_Store,
                    properties: [
                        { name: 'description' },
                        { name: 'name' },
                        { name: 'owner' },
                        { name: 'storeType' }
                    ]
                };
            }
            case VDML_ValueComponent: {
                return {
                    name: VDML_ValueComponent,
                    properties: [
                        { name: 'description' },
                        { name: 'formula' },
                        { name: 'name' },
                        { name: 'valuation' }
                    ]
                };
            }
            case VDML_ValueProposition: {
                return {
                    name: VDML_ValueProposition,
                    properties: [
                        { name: 'description' },
                        { name: 'name' },
                        { name: 'source' },
                        { name: 'target' },
                        { name: 'valueComponents', defaultValue: [] }
                    ]
                };
            }
            case XES_Arc: {
                return {
                    name: XES_Arc,
                    properties: [
                        { name: 'attributes', defaultValue: [] },
                        { name: 'source' },
                        { name: 'sourceTransition' },
                        { name: 'target' },
                        { name: 'targetTransition' },
                        { name: 'weight' }
                    ]
                };
            }
            case XES_BooleanAttribute: {
                return {
                    name: XES_BooleanAttribute,
                    properties: [
                        { name: 'key' },
                        { name: 'value', defaultValue: false }
                    ]
                };
            }
            case XES_Classifier: {
                return {
                    name: XES_Classifier,
                    properties: [
                        { name: 'keys', defaultValue: [] },
                        { name: 'name' }
                    ]
                };
            }
            case XES_DateAttribute: {
                return {
                    name: XES_DateAttribute,
                    properties: [
                        { name: 'key' },
                        { name: 'value' }
                    ]
                };
            }
            case XES_Event: {
                return {
                    name: XES_Event,
                    properties: [
                        { name: 'attributes', defaultValue: [] },
                        { name: 'name' }
                    ]
                };
            }
            case XES_Extension: {
                return {
                    name: XES_Extension,
                    properties: [
                        { name: 'name' },
                        { name: 'prefix' },
                        { name: 'uri' }
                    ]
                };
            }
            case XES_FloatAttribute: {
                return {
                    name: XES_FloatAttribute,
                    properties: [
                        { name: 'key' },
                        { name: 'value' }
                    ]
                };
            }
            case XES_GlobalAttributes: {
                return {
                    name: XES_GlobalAttributes,
                    properties: [
                        { name: 'attributes', defaultValue: [] },
                        { name: 'scope' }
                    ]
                };
            }
            case XES_IDAttribute: {
                return {
                    name: XES_IDAttribute,
                    properties: [
                        { name: 'key' },
                        { name: 'value' }
                    ]
                };
            }
            case XES_IntAttribute: {
                return {
                    name: XES_IntAttribute,
                    properties: [
                        { name: 'key' },
                        { name: 'value' }
                    ]
                };
            }
            case XES_Log: {
                return {
                    name: XES_Log,
                    properties: [
                        { name: 'classifiers', defaultValue: [] },
                        { name: 'description' },
                        { name: 'extensions', defaultValue: [] },
                        { name: 'globals', defaultValue: [] },
                        { name: 'name' },
                        { name: 'source' },
                        { name: 'traces', defaultValue: [] },
                        { name: 'version' }
                    ]
                };
            }
            case XES_Model: {
                return {
                    name: XES_Model,
                    properties: [
                        { name: 'elements', defaultValue: [] }
                    ]
                };
            }
            case XES_Place: {
                return {
                    name: XES_Place,
                    properties: [
                        { name: 'attributes', defaultValue: [] },
                        { name: 'isFinal', defaultValue: false },
                        { name: 'isInitial', defaultValue: false },
                        { name: 'name' },
                        { name: 'tokens' }
                    ]
                };
            }
            case XES_ProcessModel: {
                return {
                    name: XES_ProcessModel,
                    properties: [
                        { name: 'algorithm' },
                        { name: 'arcs', defaultValue: [] },
                        { name: 'description' },
                        { name: 'fitness' },
                        { name: 'generalization' },
                        { name: 'name' },
                        { name: 'places', defaultValue: [] },
                        { name: 'precision' },
                        { name: 'simplicity' },
                        { name: 'threshold' },
                        { name: 'transitions', defaultValue: [] }
                    ]
                };
            }
            case XES_ProcessVariant: {
                return {
                    name: XES_ProcessVariant,
                    properties: [
                        { name: 'activities', defaultValue: [] },
                        { name: 'coverage' },
                        { name: 'description' },
                        { name: 'edges', defaultValue: [] },
                        { name: 'frequency' },
                        { name: 'name' }
                    ]
                };
            }
            case XES_StringAttribute: {
                return {
                    name: XES_StringAttribute,
                    properties: [
                        { name: 'key' },
                        { name: 'value' }
                    ]
                };
            }
            case XES_Trace: {
                return {
                    name: XES_Trace,
                    properties: [
                        { name: 'attributes', defaultValue: [] },
                        { name: 'events', defaultValue: [] },
                        { name: 'name' }
                    ]
                };
            }
            case XES_Transition: {
                return {
                    name: XES_Transition,
                    properties: [
                        { name: 'activity' },
                        { name: 'attributes', defaultValue: [] },
                        { name: 'frequency' },
                        { name: 'invisible', defaultValue: false },
                        { name: 'name' }
                    ]
                };
            }
            case XES_VariantActivity: {
                return {
                    name: XES_VariantActivity,
                    properties: [
                        { name: 'attributes', defaultValue: [] },
                        { name: 'frequency' },
                        { name: 'label' },
                        { name: 'name' }
                    ]
                };
            }
            case XES_VariantEdge: {
                return {
                    name: XES_VariantEdge,
                    properties: [
                        { name: 'attributes', defaultValue: [] },
                        { name: 'frequency' },
                        { name: 'from' },
                        { name: 'probability' },
                        { name: 'to' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    properties: []
                };
            }
        }
    }
}
export const reflection = new ArchiverseAstReflection();
//# sourceMappingURL=ast.js.map